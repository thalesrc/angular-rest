var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/ClientConstructor.html",[0,0.024,1,0.689]],["body/interfaces/ClientConstructor.html",[0,0.04,1,0.813,2,0.736,3,0.569,4,0.496,5,0.496,6,0.569,7,1.229,8,0.927,9,0.366,10,1.349,11,1.181,12,3.367,13,0.592,14,0.05,15,0.709,16,0.903,17,0.569,18,1.349,19,0.949,20,1.053,21,1.349,22,0.496,23,1.191,24,1.487,25,2.163,26,1.912,27,0.834,28,0.813,29,0.834,30,0.612,31,0.834,32,0.715,33,0.834,34,0.813,35,0.834,36,0.813,37,0.834,38,0.813,39,0.834,40,0.513,41,0.834,42,0.813,43,0.834,44,0.569,45,0.834,46,0.813,47,0.834,48,0.612,49,0.834,50,0.813,51,0.834,52,0.813,53,0.834,54,0.813,55,0.834,56,1.053,57,0.834,58,0.736,59,0.709,60,0.649,61,0.944,62,0.649,63,0.813,64,0.813,65,0.927,66,0.813,67,0.927,68,0.813,69,0.927,70,0.813,71,0.649,72,0.709,73,0.834,74,1.192,75,1.192,76,1.341,77,0.944,78,1.349,79,1.392,80,1.349,81,0.944,82,0.944,83,0.944,84,0.361,85,0.496,86,1.392,87,0.827,88,1.229,89,0.834,90,0.834,91,0.649,92,0.649,93,0.949,94,0.649,95,0.944,96,0.994,97,0.903,98,1.519,99,1.192,100,1.392,101,1.392,102,0.736,103,0.944,104,0.834,105,0.78,106,1.607,107,0.709,108,0.649,109,0.612,110,1.24,111,1.13,112,1.392,113,1.349,114,0.428,115,0.944,116,0.834,117,0.496,118,1.036,119,0.569,120,1.229,121,0.649,122,0.649,123,0.496,124,0.834,125,0.834,126,0.366,127,0.02,128,0.029,129,0.02]],["title/interfaces/ClientInstance.html",[0,0.024,119,0.689]],["body/interfaces/ClientInstance.html",[0,0.04,1,0.563,2,0.729,3,0.563,4,0.491,5,0.491,6,0.563,7,1.045,8,0.642,9,0.362,10,1.339,11,0.642,13,0.592,14,0.05,15,0.704,16,1.062,17,0.563,18,1.711,19,0.944,20,1.045,21,1.339,22,0.491,23,1.19,24,1.485,25,2.16,26,1.909,27,0.825,28,1.092,29,0.825,30,0.822,31,0.825,32,0.711,33,0.825,34,0.807,35,0.825,36,0.807,37,0.825,38,0.807,39,0.825,40,0.51,41,0.825,42,0.807,43,0.825,44,0.563,45,0.825,46,0.807,47,0.825,48,0.608,49,0.825,50,0.807,51,0.825,52,0.807,53,0.825,54,0.807,55,0.825,56,1.045,57,0.825,58,0.729,59,0.704,60,0.642,61,0.934,62,0.642,63,0.807,64,0.807,65,0.921,66,0.807,67,0.921,68,0.807,69,0.921,70,0.807,71,0.642,72,0.704,73,0.825,74,1.184,75,1.184,76,1.335,77,0.934,78,1.339,79,1.384,80,1.339,81,0.934,82,0.934,83,0.934,84,0.358,85,0.491,86,1.384,87,0.823,88,1.222,89,0.825,90,0.825,91,0.642,92,0.642,93,0.944,94,0.642,95,0.934,96,0.99,97,0.899,98,1.512,99,1.184,100,1.384,101,1.384,102,0.729,103,0.934,104,0.825,105,0.776,106,1.601,107,0.704,108,0.642,109,0.608,110,1.237,111,1.141,112,1.384,113,1.339,114,0.424,115,0.934,116,0.825,117,0.491,118,1.031,119,0.807,120,1.222,121,0.642,122,0.642,123,0.491,124,0.825,125,0.825,126,0.362,127,0.02,128,0.029,129,0.02]],["title/interfaces/ClientOptions.html",[0,0.024,121,0.786]],["body/interfaces/ClientOptions.html",[0,0.04,1,0.542,2,0.702,3,0.542,4,0.473,5,0.473,6,0.542,7,1.018,8,0.619,9,0.349,10,1.304,11,0.619,13,0.597,14,0.05,15,0.685,16,0.883,17,0.542,18,1.304,19,0.925,20,1.018,21,1.304,22,0.473,23,1.187,24,1.477,25,2.149,26,1.899,27,0.795,28,0.786,29,0.795,30,0.592,31,0.795,32,0.845,33,0.795,34,0.786,35,0.795,36,0.786,37,0.795,38,0.786,39,0.795,40,0.606,41,0.795,42,0.786,43,0.795,44,0.542,45,0.795,46,0.786,47,0.795,48,0.592,49,0.795,50,0.786,51,0.795,52,0.786,53,0.795,54,0.786,55,0.795,56,1.018,57,0.795,58,0.702,59,0.685,60,0.619,61,0.9,62,0.619,63,0.786,64,0.786,65,0.896,66,0.786,67,0.896,68,0.786,69,0.896,70,0.786,71,0.619,72,0.685,73,0.795,74,1.152,75,1.152,76,1.312,77,0.9,78,1.304,79,1.355,80,1.304,81,0.9,82,0.9,83,0.9,84,0.349,85,0.473,86,1.355,87,0.806,88,1.197,89,0.795,90,0.795,91,0.619,92,0.619,93,1.076,94,0.619,95,0.9,96,1.033,97,0.883,98,1.486,99,1.152,100,1.355,101,1.355,102,0.702,103,0.9,104,0.795,105,0.845,106,1.578,107,0.685,108,0.619,109,0.592,110,1.227,111,1.135,112,1.355,113,1.304,114,0.408,115,0.9,116,0.795,117,0.473,118,1.122,119,0.542,120,1.197,121,0.896,122,1.156,123,0.883,124,1.486,125,1.355,126,0.652,127,0.019,128,0.028,129,0.019,130,2.361]],["title/classes/GuardForbid.html",[84,0.306,131,1.685]],["body/classes/GuardForbid.html",[0,0.016,1,0.822,3,0.445,4,0.716,5,0.388,7,0.878,8,0.507,9,0.528,10,1.125,11,0.773,13,0.365,14,0.05,15,0.801,16,0.388,19,1.146,20,0.878,22,0.388,23,0.388,24,1.465,28,0.445,30,0.335,32,0.335,34,0.445,36,0.445,38,0.445,40,0.444,42,0.445,44,0.445,46,0.445,48,0.907,50,0.678,52,0.445,54,0.445,59,1.019,62,0.937,72,1.019,76,0.878,84,0.197,85,1.063,87,0.801,88,0.576,91,0.507,92,0.937,93,0.678,96,0.591,97,0.716,102,1.064,105,0.745,107,0.801,108,0.507,109,0.511,110,0.678,111,1.019,114,0.619,117,0.591,118,0.822,119,0.919,120,0.576,123,0.591,126,0.636,127,0.041,128,0.024,129,0.016,130,0.836,131,1.659,132,1.261,133,1.757,134,0.951,135,3.497,136,1.757,137,1.842,138,1.275,139,1.842,140,1.088,141,1.275,142,1.842,143,1.088,144,2.756,145,2.274,146,1.261,147,0.836,148,0.738,149,0.738,150,1.088,151,2.011,152,2.329,153,1.491,154,2.756,155,2.606,156,1.491,157,1.491,158,1.261,159,1.965,160,2.54,161,3.169,162,1.491,163,1.922,164,1.491,165,2.329,166,2.329,167,3.749,168,2.329,169,1.922,170,1.491,171,1.491,172,2.274,173,2.39,174,2.274,175,1.491,176,1.261,177,3.749,178,1.491,179,1.261,180,1.491,181,2.606,182,2.39,183,2.274,184,1.922,185,2.274,186,2.805,187,2.274,188,1.491,189,2.274,190,1.491,191,0.951,192,2.274,193,2.274,194,2.274,195,1.491,196,1.491,197,1.491,198,1.088,199,1.659,200,1.491,201,2.274,202,1.491,203,1.261,204,1.491,205,1.491,206,2.274,207,2.274,208,1.491,209,1.491,210,1.491,211,1.261,212,1.491,213,1.491,214,1.261,215,1.491,216,3.083,217,2.329,218,1.491,219,1.491,220,2.274,221,1.491,222,3.637,223,1.491,224,2.274,225,1.491,226,2.274,227,1.491,228,1.659,229,1.491,230,1.491,231,2.249,232,2.011,233,2.274,234,2.274,235,2.274,236,2.422,237,1.659,238,1.491,239,1.491,240,1.491,241,1.491,242,1.491,243,1.491,244,2.756,245,2.274,246,0.951,247,1.088,248,1.922,249,1.491,250,1.491,251,1.491,252,1.491,253,1.491,254,1.491,255,3.083,256,1.261,257,1.491,258,1.491,259,1.491,260,1.491,261,1.491,262,1.491,263,1.491,264,2.274,265,1.491,266,1.491,267,3.083,268,1.491,269,1.491,270,1.491,271,1.491,272,1.491,273,1.491,274,1.491,275,1.491]],["title/interfaces/Handler.html",[0,0.024,107,0.6]],["body/interfaces/Handler.html",[0,0.04,1,0.571,2,0.739,3,0.571,4,0.498,5,0.498,6,0.571,7,1.056,8,0.651,9,0.367,10,1.353,11,0.651,13,0.589,14,0.05,15,0.711,16,0.905,17,0.571,18,1.353,19,0.952,20,1.056,21,1.353,22,0.498,23,1.191,24,1.488,25,2.165,26,1.913,27,0.837,28,0.816,29,0.837,30,0.614,31,0.837,32,0.716,33,0.837,34,0.816,35,0.837,36,0.816,37,0.837,38,0.816,39,0.837,40,0.514,41,0.837,42,0.816,43,0.837,44,0.571,45,0.837,46,0.816,47,0.837,48,0.614,49,0.837,50,0.816,51,0.837,52,0.816,53,0.837,54,0.816,55,0.837,56,1.056,57,0.837,58,0.739,59,0.711,60,0.651,61,0.947,62,0.651,63,0.816,64,0.816,65,0.93,66,0.816,67,0.93,68,0.816,69,0.93,70,0.816,71,0.651,72,0.711,73,0.837,74,1.196,75,1.196,76,1.344,77,0.947,78,1.353,79,1.395,80,1.353,81,0.947,82,0.947,83,0.947,84,0.362,85,0.498,86,1.395,87,0.829,88,1.232,89,0.837,90,0.837,91,0.651,92,0.651,93,0.952,94,0.651,95,0.947,96,0.995,97,0.905,98,1.522,99,1.196,100,1.395,101,1.61,102,0.739,103,0.947,104,0.837,105,0.782,106,1.61,107,0.829,108,1.184,109,0.614,110,1.241,111,1.131,112,1.395,113,1.353,114,0.43,115,0.947,116,0.837,117,0.498,118,1.038,119,0.571,120,1.232,121,0.651,122,0.651,123,0.498,124,0.837,125,0.837,126,0.367,127,0.02,128,0.029,129,0.02]],["title/classes/HeadersInjector.html",[84,0.306,114,0.519]],["body/classes/HeadersInjector.html",[0,0.04,1,0.569,3,0.569,4,0.496,5,0.496,6,0.569,7,1.054,8,0.649,9,0.366,11,0.649,13,0.586,14,0.05,15,0.709,16,0.903,17,0.569,18,1.35,19,0.95,20,1.054,21,1.35,22,0.496,23,1.191,24,1.487,25,2.164,26,1.912,27,0.835,28,0.814,29,0.835,30,0.613,31,0.835,32,0.715,33,0.835,34,0.814,35,0.835,36,0.814,37,0.835,38,0.814,39,0.835,40,0.513,41,0.835,42,0.814,43,0.835,44,0.569,45,0.835,46,0.814,47,0.835,48,0.613,49,0.835,50,0.814,51,0.835,52,0.814,53,0.835,54,0.814,55,0.835,56,1.054,57,0.835,58,0.737,59,0.709,60,1.083,61,0.944,62,0.649,63,0.814,64,0.814,65,0.928,66,0.814,67,0.928,68,0.814,69,0.928,70,0.95,71,0.649,72,0.709,73,0.835,74,1.193,75,1.193,76,1.342,77,0.944,78,1.35,79,1.393,80,1.35,81,0.944,82,0.944,83,0.944,84,0.361,85,0.496,86,1.393,87,0.828,88,1.23,89,0.835,90,0.835,91,0.649,92,0.649,93,0.95,94,0.649,95,0.944,96,0.994,97,0.903,98,1.52,99,1.193,100,1.393,101,1.393,102,0.737,103,0.944,104,0.835,105,0.78,106,1.608,107,0.709,108,0.649,109,0.613,110,1.24,111,1.13,112,1.52,113,1.72,114,0.613,115,1.72,116,0.835,117,0.496,118,1.037,119,0.569,120,1.23,121,0.649,122,0.649,123,0.496,124,0.835,125,0.835,126,0.366,127,0.02,128,0.029,129,0.02,132,1.613,138,1.07,276,2.357]],["title/interfaces/HeadersObject.html",[0,0.024,109,0.519]],["body/interfaces/HeadersObject.html",[0,0.04,1,0.572,2,0.741,3,0.572,4,0.499,5,0.499,6,0.572,7,1.058,8,0.653,11,0.653,13,0.587,14,0.05,15,0.712,16,0.906,17,0.572,18,1.355,19,0.953,20,1.058,21,1.355,22,0.499,23,1.191,24,1.488,25,2.165,26,1.914,27,0.839,28,0.817,29,0.839,30,0.615,31,0.839,32,0.717,33,0.839,34,0.817,35,0.839,36,0.817,37,0.839,38,0.817,39,0.839,40,0.514,41,0.839,42,0.817,43,0.839,44,0.572,45,0.839,46,0.817,47,0.839,48,0.615,49,0.839,50,0.817,51,0.839,52,0.817,53,0.839,54,0.817,55,0.839,56,1.058,57,0.839,58,0.741,59,0.712,60,0.653,61,0.949,62,0.653,63,0.817,64,0.817,65,0.932,66,0.817,67,0.932,68,0.817,69,0.932,70,0.817,71,0.653,72,0.712,73,0.839,74,1.198,75,1.198,76,1.345,77,0.949,78,1.355,79,1.397,80,1.355,81,0.949,82,0.949,83,0.949,84,0.362,85,0.499,86,1.397,87,0.83,88,1.233,89,0.839,90,0.839,91,0.653,92,0.653,93,0.953,94,0.653,95,0.949,96,0.996,97,0.906,98,1.523,99,1.198,100,1.397,101,1.397,102,0.741,103,0.949,104,0.839,105,0.782,106,1.611,107,0.712,108,0.653,109,0.717,110,1.257,111,1.143,112,1.397,113,1.355,114,0.431,115,0.949,116,0.839,117,0.499,118,1.039,119,0.572,120,1.233,121,0.653,122,0.653,123,0.499,124,0.839,125,0.839,126,0.368,127,0.02,128,0.029,129,0.02,138,1.076,277,2.369,278,2.369]],["title/interfaces/RequestConfig.html",[0,0.024,231,1.685]],["body/interfaces/RequestConfig.html",[0,0.016,1,0.827,2,0.581,3,0.449,4,0.72,5,0.391,7,0.581,8,0.512,9,0.531,10,1.133,11,0.512,13,0.367,14,0.05,15,0.805,16,0.391,19,1.047,20,0.884,22,0.391,23,0.391,24,1.467,28,0.449,30,0.338,32,0.338,34,0.449,36,0.449,38,0.449,40,0.446,42,0.449,44,0.449,46,0.449,48,0.938,50,0.683,52,0.449,54,0.449,59,0.948,62,0.942,72,1.021,76,0.884,84,0.199,85,1.065,87,0.805,88,0.581,91,0.512,92,0.942,93,0.683,96,0.805,97,0.72,102,1.07,105,0.748,107,0.805,108,0.512,109,0.514,110,0.683,111,1.021,114,0.622,117,0.595,118,0.827,119,0.924,120,0.581,123,0.595,126,0.721,127,0.042,128,0.024,129,0.016,131,1.098,133,0.959,134,0.959,135,3.332,136,0.959,141,0.844,143,1.098,144,3.332,145,2.289,146,1.272,147,0.844,148,0.745,149,0.745,150,1.098,151,2.022,152,2.342,153,1.505,154,2.771,155,2.618,156,1.505,157,1.505,158,1.272,159,1.974,160,2.545,161,3.178,162,1.505,163,1.935,164,1.505,165,2.342,166,2.342,167,3.76,168,2.342,169,1.935,170,1.505,171,1.505,172,2.289,173,2.397,174,2.289,175,1.505,176,1.272,177,3.76,178,1.505,179,1.272,180,1.505,181,2.618,182,2.397,183,2.289,184,1.935,185,2.289,186,2.816,187,2.289,188,1.505,189,2.289,190,1.505,191,0.959,192,2.289,193,2.289,194,2.289,195,1.505,196,1.505,197,1.505,198,1.098,199,1.671,200,1.505,201,2.289,202,1.505,203,1.272,204,1.505,205,1.505,206,2.289,207,2.289,208,1.505,209,1.505,210,1.505,211,1.272,212,1.505,213,1.505,214,1.272,215,1.505,216,3.097,217,2.342,218,1.505,219,1.505,220,2.289,221,1.505,222,3.648,223,1.505,224,2.289,225,1.505,226,2.289,227,1.505,228,1.671,229,1.505,230,1.505,231,2.431,232,2.022,233,2.289,234,2.289,235,2.289,236,2.431,237,1.671,238,1.505,239,1.505,240,1.505,241,1.505,242,1.505,243,1.505,244,2.771,245,2.289,246,0.959,247,1.098,248,1.935,249,1.505,250,1.505,251,1.505,252,1.505,253,1.505,254,1.505,255,3.097,256,1.272,257,1.505,258,1.505,259,1.505,260,1.505,261,1.505,262,1.505,263,1.505,264,2.289,265,1.505,266,1.505,267,3.097,268,1.505,269,1.505,270,1.505,271,1.505,272,1.505,273,1.505,274,1.505,275,1.505]],["title/interfaces/RestGuard.html",[0,0.024,94,0.786]],["body/interfaces/RestGuard.html",[0,0.04,1,0.561,2,0.727,3,0.561,4,0.489,5,0.489,6,0.561,7,1.043,8,0.64,9,0.361,11,0.64,13,0.588,14,0.05,15,0.702,16,0.897,17,0.561,18,1.336,19,1.091,20,1.043,21,1.336,22,0.489,23,1.19,24,1.484,25,2.159,26,1.908,27,0.823,28,0.806,29,0.823,30,0.606,31,0.823,32,0.709,33,0.823,34,0.806,35,0.823,36,0.806,37,0.823,38,0.806,39,0.823,40,0.509,41,0.823,42,0.806,43,0.823,44,0.561,45,0.823,46,0.806,47,0.823,48,0.606,49,0.823,50,0.806,51,0.823,52,0.806,53,0.823,54,0.806,55,0.823,56,1.043,57,0.823,58,0.727,59,0.821,60,1.075,61,0.931,62,0.64,63,0.806,64,0.806,65,0.919,66,0.806,67,0.919,68,0.806,69,0.919,70,0.942,71,0.64,72,0.702,73,0.823,74,1.181,75,1.181,76,1.333,77,0.931,78,1.336,79,1.382,80,1.336,81,0.931,82,0.931,83,0.931,84,0.357,85,0.489,86,1.382,87,0.821,88,1.22,89,1.181,90,1.181,91,0.919,92,0.919,93,1.03,94,0.919,95,1.336,96,1.019,97,0.95,98,1.51,99,1.181,100,1.382,101,1.382,102,0.727,103,0.931,104,0.823,105,0.775,106,1.599,107,0.702,108,0.64,109,0.606,110,1.236,111,1.128,112,1.382,113,1.336,114,0.422,115,0.931,116,0.823,117,0.489,118,1.03,119,0.561,120,1.22,121,0.64,122,0.64,123,0.489,124,0.823,125,0.823,126,0.361,127,0.02,128,0.029,129,0.02,130,1.055,138,1.055,140,1.373,141,1.055,256,2.283,279,1.881,280,2.323]],["title/modules/RestModule.html",[281,1.952,282,1.472]],["body/modules/RestModule.html",[0,0.03,3,0.834,4,0.727,5,0.727,13,0.37,14,0.05,15,1.056,17,0.834,22,0.727,23,0.727,30,0.868,40,0.623,60,0.951,70,0.834,84,0.37,96,0.727,105,0.792,111,0.727,114,0.628,117,0.917,122,1.315,123,1.005,126,0.741,127,0.03,128,0.037,129,0.03,130,1.567,136,1.782,138,1.567,140,2.04,141,1.567,143,2.04,147,2.168,148,1.914,149,1.914,150,2.04,160,1.782,246,1.782,282,2.465,283,2.363,284,2.363,285,2.983,286,3.529,287,3.452,288,2.964,289,3.452,290,2.363,291,3.867,292,3.269,293,2.363,294,3.867,295,2.363,296,2.575,297,3.714,298,3.714,299,3.433,300,3.615,301,2.363]],["title/interfaces/RootConfiguration.html",[0,0.024,288,1.685]],["body/interfaces/RootConfiguration.html",[0,0.029,2,1.048,3,0.809,4,0.705,5,0.705,9,0.52,10,1.713,13,0.531,14,0.05,15,1.044,17,0.809,22,0.705,23,0.705,30,0.856,40,0.683,84,0.359,96,0.991,105,0.902,111,0.991,114,0.609,117,1.044,122,1.444,123,1.103,126,0.814,127,0.029,128,0.037,129,0.029,130,2.449,136,1.729,143,1.98,147,2.138,148,1.887,149,1.887,150,1.98,160,1.729,282,2.207,284,2.293,285,2.293,286,2.713,288,2.783,291,3.463,292,3.224,293,2.293,294,3.814,295,2.293,296,2.527,297,3.692,298,3.692,299,3.396,300,3.588,301,2.293]],["title/coverage.html",[302,3.115]],["body/coverage.html",[0,0.044,1,0.647,5,0.564,6,1.356,13,0.287,14,0.05,16,0.564,28,0.647,30,0.67,32,0.67,34,0.647,36,0.647,38,0.647,40,0.481,42,0.647,44,0.647,46,0.647,48,0.67,50,0.647,52,0.647,54,0.647,56,0.837,63,0.647,64,0.647,65,0.738,66,0.647,67,0.738,68,0.647,69,0.738,84,0.395,85,1.156,87,0.564,94,0.738,107,0.564,109,0.487,114,0.487,119,0.647,121,0.738,126,0.416,127,0.023,128,0.032,129,0.023,131,1.582,133,2.65,134,2.65,147,1.216,148,1.073,149,1.073,159,1.382,173,1.382,182,1.382,191,1.902,228,1.582,231,1.582,232,2.49,247,1.582,284,1.833,288,1.582,302,2.169,303,2.169,304,2.678,305,2.678,306,2.169,307,5.774,308,5.751,309,2.169,310,2.169,311,2.169,312,2.169,313,2.169,314,2.169,315,2.169,316,2.169,317,2.169,318,2.169,319,1.833,320,2.169,321,2.678,322,2.678,323,3.685,324,2.169,325,4.158,326,5.664,327,2.678,328,3.676,329,4.214,330,2.678,331,2.678,332,2.678,333,2.678,334,2.169,335,2.169,336,2.678,337,2.678]],["title/dependencies.html",[338,1.947,339,2.02]],["body/dependencies.html",[14,0.049,17,1.002,127,0.036,128,0.042,129,0.036,146,2.839,339,2.451,340,4.148,341,5.611,342,4.148,343,4.148,344,4.148,345,4.874,346,4.874,347,4.148,348,4.148,349,4.148,350,4.148,351,4.148,352,4.148,353,4.148,354,4.148,355,4.148,356,4.148,357,4.148]],["title/miscellaneous/enumerations.html",[358,0.851,359,2.768]],["body/miscellaneous/enumerations.html",[6,1.006,9,0.646,14,0.049,58,1.302,59,0.876,60,1.147,62,1.345,63,1.18,64,1.18,65,1.345,66,1.18,67,1.345,68,1.18,69,1.345,127,0.036,128,0.042,129,0.036,290,3.843,358,1.474,359,3.371,360,2.85]],["title/miscellaneous/functions.html",[358,0.851,361,2.34]],["body/miscellaneous/functions.html",[4,0.852,9,0.478,13,0.33,14,0.049,19,1.093,32,0.736,40,0.627,48,0.822,59,0.852,70,1.339,71,0.848,72,0.952,97,0.852,110,1.093,126,0.702,127,0.026,128,0.035,129,0.026,130,2.505,133,1.589,134,2.696,140,3.261,141,2.517,151,1.819,152,2.108,155,3.416,158,2.108,159,2.48,161,2.771,168,2.108,173,2.335,182,2.09,191,2.48,198,1.819,199,2.673,214,2.108,228,2.392,232,3.028,236,3.086,237,2.839,247,2.392,248,3.289,279,2.493,306,2.493,309,2.493,310,2.493,311,3.278,312,3.663,313,2.493,314,2.493,315,2.493,316,2.493,317,2.493,318,3.278,319,3.096,320,2.493,324,3.278,334,2.493,335,3.278,358,1.09,361,2.108,362,3.079,363,4.149,364,3.079,365,3.079,366,3.079,367,3.079,368,3.079,369,3.079,370,3.079,371,3.079,372,3.079,373,4.523,374,3.079,375,4.523,376,3.079,377,3.079,378,3.079,379,3.079,380,3.079,381,3.079,382,3.079,383,2.493,384,3.079,385,3.079]],["title/index.html",[9,0.373,386,1.947,387,1.646]],["body/index.html",[0,0.013,8,0.826,11,0.942,13,0.258,14,0.05,15,1.078,16,0.631,17,0.961,19,0.826,22,0.318,23,1.086,24,0.662,32,0.788,40,0.544,48,0.723,58,0.752,59,0.837,60,1.149,63,0.581,64,0.365,66,0.365,68,0.365,70,0.365,71,0.662,72,1.016,75,0.535,84,0.562,85,0.912,87,0.318,90,0.852,91,0.942,92,1.42,93,1.105,94,0.826,96,0.506,97,1.07,105,0.275,107,0.72,108,0.416,109,0.275,110,0.724,111,0.983,118,0.365,121,0.942,122,0.662,123,0.786,124,0.535,125,0.535,126,0.648,127,0.013,128,0.021,129,0.013,136,2.525,138,1.361,141,0.686,148,0.964,149,1.201,159,1.927,160,2.625,163,2.856,165,2.34,166,1.034,169,1.034,173,1.927,176,3.254,179,3.055,181,2.34,182,0.779,184,1.646,186,2.723,191,2.827,198,2.465,199,0.892,203,1.034,211,1.646,217,1.646,236,0.892,237,2.02,246,0.779,281,2.723,282,2.154,285,1.034,292,3.055,293,1.034,295,2.34,296,2.206,297,2.34,298,2.052,299,1.646,300,2.34,319,2.34,338,1.223,339,0.892,361,1.034,383,1.223,387,1.034,388,4.754,389,2.405,390,1.51,391,1.51,392,1.51,393,1.51,394,1.223,395,1.51,396,1.51,397,1.51,398,1.51,399,1.51,400,1.51,401,1.51,402,1.223,403,1.51,404,4.671,405,1.51,406,5.044,407,1.51,408,2.998,409,1.51,410,1.51,411,2.405,412,1.223,413,3.419,414,1.51,415,3.977,416,3.733,417,1.51,418,4.948,419,1.51,420,3.419,421,1.51,422,1.51,423,1.51,424,1.51,425,3.419,426,1.51,427,2.405,428,1.51,429,2.998,430,1.51,431,1.51,432,1.51,433,1.51,434,1.51,435,4.827,436,2.998,437,1.51,438,1.51,439,1.51,440,2.405,441,1.51,442,1.51,443,1.51,444,1.51,445,1.51,446,1.51,447,1.51,448,2.998,449,1.51,450,2.405,451,1.51,452,1.51,453,1.51,454,2.998,455,1.51,456,1.223,457,1.51,458,3.419,459,1.51,460,1.51,461,1.51,462,1.51,463,1.51,464,1.51,465,1.51,466,1.51,467,1.51,468,1.51,469,2.405,470,2.405,471,2.998,472,1.51,473,2.998,474,2.405,475,1.51,476,2.405,477,2.998,478,1.51,479,1.51,480,2.405,481,2.405,482,1.51,483,1.51,484,1.51,485,1.51,486,1.51,487,1.51,488,1.51,489,1.51,490,1.51,491,2.405,492,1.51,493,1.51,494,5.217,495,1.51,496,2.998,497,1.51,498,1.51,499,1.51,500,1.51,501,1.51,502,1.51,503,1.51,504,1.51,505,1.51,506,3.419,507,2.405,508,2.428,509,1.51,510,1.51,511,1.51,512,1.51,513,1.51,514,2.405,515,1.51,516,1.51,517,1.51,518,1.51,519,1.51,520,2.405,521,2.405,522,1.51,523,1.51,524,1.51,525,1.51,526,2.405,527,1.51,528,1.51,529,1.51,530,1.51,531,1.51,532,1.51,533,1.51,534,1.51,535,1.51,536,1.51,537,1.51,538,1.51,539,1.51,540,1.51,541,1.51,542,1.51,543,1.51,544,1.51,545,1.51,546,2.998,547,1.51,548,2.405,549,1.51,550,1.51,551,1.51,552,1.51,553,2.998,554,1.51,555,2.405,556,1.51,557,1.51,558,1.51,559,1.51,560,3.977,561,1.51,562,1.51,563,1.51,564,1.51,565,2.405,566,2.405,567,1.51,568,1.51,569,1.948,570,1.51,571,1.51,572,1.51,573,1.51,574,1.51,575,1.51,576,1.51,577,1.51,578,1.51,579,2.405,580,2.405,581,1.51,582,1.51,583,1.51,584,1.51,585,1.51,586,1.51,587,2.405,588,2.998,589,1.51,590,1.51,591,1.51,592,1.51,593,1.51,594,1.51,595,1.51,596,1.51,597,1.51,598,1.51,599,1.51,600,1.51,601,1.51,602,1.51,603,1.034,604,1.223]],["title/license.html",[386,1.947,387,1.646,603,1.646]],["body/license.html",[14,0.04,89,1.638,127,0.033,128,0.04,129,0.033,303,3.079,456,3.079,508,3.079,569,3.079,603,2.603,604,3.079,605,4.988,606,3.803,607,3.803,608,3.803,609,4.627,610,3.803,611,3.803,612,3.803,613,3.803,614,3.803,615,3.803,616,4.627,617,5.566,618,3.803,619,3.803,620,3.803,621,4.988,622,3.803,623,4.627,624,3.803,625,3.803,626,3.803,627,3.803,628,3.803,629,3.803,630,3.803,631,3.803,632,3.803,633,4.627,634,3.803,635,3.803,636,3.803,637,3.803,638,3.803,639,3.803,640,3.803,641,4.627,642,4.627,643,3.803,644,3.803,645,3.803,646,3.803,647,3.803,648,3.803,649,3.803,650,3.803,651,3.803,652,3.803,653,3.803,654,3.803,655,3.803,656,3.803,657,3.803,658,3.803,659,3.803,660,3.803,661,3.803,662,3.803,663,3.803,664,3.803,665,3.803,666,3.803,667,3.803,668,3.079,669,3.803,670,3.803]],["title/modules.html",[283,2.633]],["body/modules.html",[14,0.043,127,0.038,128,0.043,129,0.038,282,2.296,283,3.044,671,4.447,672,4.447,673,4.447]],["title/overview.html",[674,3.115]],["body/overview.html",[2,1.356,14,0.043,127,0.037,128,0.043,129,0.037,132,2.969,281,3.424,296,2.563,301,2.969,339,2.563,394,3.512,402,3.512,412,3.512,668,3.512,674,3.512,675,4.337,676,4.337,677,5.002,678,4.337,679,4.337]],["title/miscellaneous/typealiases.html",[358,0.851,680,3.418]],["body/miscellaneous/typealiases.html",[6,0.936,9,0.601,13,0.539,14,0.047,70,1.13,71,1.067,72,0.815,73,1.372,74,1.657,79,1.849,84,0.415,85,1.099,86,1.849,93,1.13,97,0.815,98,1.78,99,1.78,100,1.849,101,1.657,104,1.657,105,0.851,106,1.78,109,0.704,112,1.657,116,1.657,117,0.985,118,1.13,127,0.033,128,0.04,129,0.033,133,2,134,2.415,151,2.765,358,1.372,360,3.887,363,3.137,681,3.874]],["title/miscellaneous/variables.html",[358,0.851,682,2.768]],["body/miscellaneous/variables.html",[6,0.725,9,0.466,13,0.597,14,0.05,16,0.838,26,1.973,27,1.063,28,0.962,29,1.063,30,0.865,31,1.063,32,0.724,33,1.063,34,0.962,35,1.063,36,0.962,37,1.063,38,0.962,39,1.063,40,0.519,41,1.063,42,0.962,43,1.063,44,0.962,45,1.063,46,0.962,47,1.063,48,0.724,49,1.063,50,0.962,51,1.063,52,0.962,53,1.063,54,0.962,55,1.063,56,1.245,57,1.063,63,0.962,64,0.962,65,1.097,66,0.962,67,1.097,68,0.962,69,1.097,87,1.001,127,0.026,128,0.034,129,0.026,147,1.807,148,1.595,149,1.595,246,2.948,290,3.909,325,2.431,328,2.431,358,1.063,360,3.813,682,2.431,683,4.757,684,5.27,685,3.002,686,3.002,687,3.002,688,3.002,689,3.002,690,3.002,691,3.002,692,3.002,693,3.002,694,3.002,695,3.002,696,3.002]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":394,"title":{},"body":{"index.html":{},"overview.html":{}}}],["1/1",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":402,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.5.4",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["2018",{"_index":607,"title":{},"body":{"license.html":{}}}],["3",{"_index":431,"title":{},"body":{"index.html":{}}}],["3.1",{"_index":434,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":446,"title":{},"body":{"index.html":{}}}],["3.10",{"_index":559,"title":{},"body":{"index.html":{}}}],["3.10.1",{"_index":564,"title":{},"body":{"index.html":{}}}],["3.10.2",{"_index":568,"title":{},"body":{"index.html":{}}}],["3.10.3",{"_index":571,"title":{},"body":{"index.html":{}}}],["3.10.4",{"_index":572,"title":{},"body":{"index.html":{}}}],["3.10.5",{"_index":575,"title":{},"body":{"index.html":{}}}],["3.2",{"_index":453,"title":{},"body":{"index.html":{}}}],["3.3",{"_index":470,"title":{},"body":{"index.html":{}}}],["3.5",{"_index":493,"title":{},"body":{"index.html":{}}}],["3.5.1",{"_index":495,"title":{},"body":{"index.html":{}}}],["3.5.1.1",{"_index":497,"title":{},"body":{"index.html":{}}}],["3.5.1.2",{"_index":499,"title":{},"body":{"index.html":{}}}],["3.5.1.3",{"_index":500,"title":{},"body":{"index.html":{}}}],["3.5.2",{"_index":501,"title":{},"body":{"index.html":{}}}],["3.5.3",{"_index":502,"title":{},"body":{"index.html":{}}}],["3.5.4",{"_index":503,"title":{},"body":{"index.html":{}}}],["3.6",{"_index":504,"title":{},"body":{"index.html":{}}}],["3.6.1",{"_index":509,"title":{},"body":{"index.html":{}}}],["3.6.1.1",{"_index":510,"title":{},"body":{"index.html":{}}}],["3.6.1.2",{"_index":523,"title":{},"body":{"index.html":{}}}],["3.6.1.3",{"_index":529,"title":{},"body":{"index.html":{}}}],["3.6.2",{"_index":530,"title":{},"body":{"index.html":{}}}],["3.6.3",{"_index":531,"title":{},"body":{"index.html":{}}}],["3.6.4",{"_index":532,"title":{},"body":{"index.html":{}}}],["3.7",{"_index":533,"title":{},"body":{"index.html":{}}}],["3.7.1",{"_index":534,"title":{},"body":{"index.html":{}}}],["3.7.2",{"_index":536,"title":{},"body":{"index.html":{}}}],["3.7.2.1",{"_index":537,"title":{},"body":{"index.html":{}}}],["3.7.2.2",{"_index":538,"title":{},"body":{"index.html":{}}}],["3.7.2.3",{"_index":539,"title":{},"body":{"index.html":{}}}],["3.7.3",{"_index":540,"title":{},"body":{"index.html":{}}}],["3.7.4",{"_index":541,"title":{},"body":{"index.html":{}}}],["3.7.5",{"_index":542,"title":{},"body":{"index.html":{}}}],["3.8",{"_index":543,"title":{},"body":{"index.html":{}}}],["3.9",{"_index":544,"title":{},"body":{"index.html":{}}}],["4",{"_index":578,"title":{},"body":{"index.html":{}}}],["5",{"_index":591,"title":{},"body":{"index.html":{}}}],["50",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":602,"title":{},"body":{"index.html":{}}}],["6.5.2",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":679,"title":{},"body":{"overview.html":{}}}],["8.2.3",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["_____________________________________________________________________________",{"_index":167,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers",{"_index":183,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers[key",{"_index":190,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["above",{"_index":640,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":113,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["accepts",{"_index":525,"title":{},"body":{"index.html":{}}}],["acomponent",{"_index":481,"title":{},"body":{"index.html":{}}}],["action",{"_index":664,"title":{},"body":{"license.html":{}}}],["add",{"_index":397,"title":{},"body":{"index.html":{}}}],["ahin",{"_index":594,"title":{},"body":{"index.html":{}}}],["ali",{"_index":593,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allguards",{"_index":249,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["allguards.reduce((prev",{"_index":252,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["and/or",{"_index":631,"title":{},"body":{"license.html":{}}}],["angular",{"_index":389,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":22,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["angular/compiler",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":17,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["annotations",{"_index":392,"title":{},"body":{"index.html":{}}}],["aot",{"_index":579,"title":{},"body":{"index.html":{}}}],["api",{"_index":432,"title":{},"body":{"index.html":{}}}],["app",{"_index":422,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":405,"title":{},"body":{"index.html":{}}}],["append",{"_index":201,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["appmodule",{"_index":413,"title":{},"body":{"index.html":{}}}],["args",{"_index":88,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["args[bodyparamindex",{"_index":178,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["args[index",{"_index":172,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["arising",{"_index":667,"title":{},"body":{"license.html":{}}}],["array",{"_index":106,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["associated",{"_index":618,"title":{},"body":{"license.html":{}}}],["async",{"_index":163,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["authors",{"_index":658,"title":{},"body":{"license.html":{}}}],["available",{"_index":672,"title":{},"body":{"modules.html":{}}}],["await",{"_index":186,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base",{"_index":179,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base_handlers",{"_index":587,"title":{},"body":{"index.html":{}}}],["base_headers",{"_index":148,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base_url",{"_index":30,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_with_credentials",{"_index":149,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["basehandler",{"_index":588,"title":{},"body":{"index.html":{}}}],["baseheaders",{"_index":123,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["baseurl",{"_index":122,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["basic",{"_index":403,"title":{},"body":{"index.html":{}}}],["before",{"_index":505,"title":{},"body":{"index.html":{}}}],["best",{"_index":451,"title":{},"body":{"index.html":{}}}],["blob",{"_index":484,"title":{},"body":{"index.html":{}}}],["bodies",{"_index":36,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":173,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bodyparamindex",{"_index":174,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["bootstrap",{"_index":676,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":673,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["builder",{"_index":455,"title":{},"body":{"index.html":{}}}],["builder.ts",{"_index":134,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["builder.ts:11",{"_index":139,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builder.ts:13",{"_index":142,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builds",{"_index":582,"title":{},"body":{"index.html":{}}}],["c",{"_index":606,"title":{},"body":{"license.html":{}}}],["cache.service",{"_index":554,"title":{},"body":{"index.html":{}}}],["call",{"_index":546,"title":{},"body":{"index.html":{}}}],["called",{"_index":548,"title":{},"body":{"index.html":{}}}],["calling",{"_index":545,"title":{},"body":{"index.html":{}}}],["calls",{"_index":440,"title":{},"body":{"index.html":{}}}],["cansend",{"_index":256,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["cansend(req",{"_index":518,"title":{},"body":{"index.html":{}}}],["cansend(request",{"_index":95,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["case",{"_index":244,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch",{"_index":267,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch(error",{"_index":218,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["chainhandlers",{"_index":228,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["chainhandlers(handlers",{"_index":374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["charge",{"_index":613,"title":{},"body":{"license.html":{}}}],["check",{"_index":507,"title":{},"body":{"index.html":{}}}],["claim",{"_index":661,"title":{},"body":{"license.html":{}}}],["class",{"_index":84,"title":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["class/interface",{"_index":77,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["classes",{"_index":132,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"overview.html":{}}}],["classof",{"_index":86,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["client",{"_index":191,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["client(undefined",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client_guards",{"_index":34,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_handlers",{"_index":42,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_headers",{"_index":50,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_with_credentials",{"_index":54,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientconstructor",{"_index":1,"title":{"interfaces/ClientConstructor.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clienthandlers",{"_index":224,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientheaders",{"_index":192,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientinstance",{"_index":119,"title":{"interfaces/ClientInstance.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clientoptions",{"_index":121,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["code",{"_index":549,"title":{},"body":{"index.html":{}}}],["completely",{"_index":599,"title":{},"body":{"index.html":{}}}],["component",{"_index":420,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":639,"title":{},"body":{"license.html":{}}}],["config",{"_index":237,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["configure",{"_index":165,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["configured",{"_index":444,"title":{},"body":{"index.html":{}}}],["configures",{"_index":447,"title":{},"body":{"index.html":{}}}],["connection",{"_index":669,"title":{},"body":{"license.html":{}}}],["const",{"_index":24,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["construction",{"_index":552,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":11,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["constructor(injector",{"_index":583,"title":{},"body":{"index.html":{}}}],["constructor(private",{"_index":425,"title":{},"body":{"index.html":{}}}],["constructor(request",{"_index":137,"title":{},"body":{"classes/GuardForbid.html":{}}}],["context",{"_index":248,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["context)[next](request",{"_index":259,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next",{"_index":270,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next).cansend(request",{"_index":257,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next]).bind(context",{"_index":269,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next][error_handler",{"_index":268,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["contract",{"_index":665,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":592,"title":{},"body":{"index.html":{}}}],["cookies",{"_index":563,"title":{},"body":{"index.html":{}}}],["copies",{"_index":633,"title":{},"body":{"license.html":{}}}],["copy",{"_index":616,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":605,"title":{},"body":{"license.html":{}}}],["core",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":302,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":208,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["created",{"_index":550,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":203,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["credentials.decorator.ts",{"_index":335,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":103,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["damages",{"_index":662,"title":{},"body":{"license.html":{}}}],["data",{"_index":480,"title":{},"body":{"index.html":{}}}],["data.append('image",{"_index":485,"title":{},"body":{"index.html":{}}}],["deal",{"_index":620,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":670,"title":{},"body":{"license.html":{}}}],["declaration",{"_index":496,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":412,"title":{},"body":{"index.html":{},"overview.html":{}}}],["declarative",{"_index":391,"title":{},"body":{"index.html":{}}}],["declare",{"_index":511,"title":{},"body":{"index.html":{}}}],["declared",{"_index":448,"title":{},"body":{"index.html":{}}}],["decorated",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["decorator",{"_index":435,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":454,"title":{},"body":{"index.html":{}}}],["default",{"_index":246,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":90,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["defined",{"_index":138,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"index.html":{}}}],["defines",{"_index":561,"title":{},"body":{"index.html":{}}}],["defining",{"_index":445,"title":{},"body":{"index.html":{}}}],["delete",{"_index":65,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delete(path",{"_index":464,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":339,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":279,"title":{},"body":{"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{}}}],["descriptor",{"_index":154,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["descriptor.value",{"_index":162,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["determined",{"_index":494,"title":{},"body":{"index.html":{}}}],["developed",{"_index":577,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":629,"title":{},"body":{"license.html":{}}}],["docs",{"_index":433,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":303,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":512,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":459,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":166,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["endpoint.replace",{"_index":171,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["enum",{"_index":61,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["enumerations",{"_index":359,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":135,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["error_handler",{"_index":44,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorhandler",{"_index":312,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["errorhandlers",{"_index":535,"title":{},"body":{"index.html":{}}}],["especially",{"_index":566,"title":{},"body":{"index.html":{}}}],["etc",{"_index":476,"title":{},"body":{"index.html":{}}}],["event",{"_index":657,"title":{},"body":{"license.html":{}}}],["example",{"_index":404,"title":{},"body":{"index.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["exports",{"_index":301,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["express",{"_index":648,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["false",{"_index":217,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["files",{"_index":619,"title":{},"body":{"license.html":{}}}],["fill",{"_index":472,"title":{},"body":{"index.html":{}}}],["first",{"_index":526,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":653,"title":{},"body":{"license.html":{}}}],["following",{"_index":638,"title":{},"body":{"license.html":{}}}],["forbad",{"_index":157,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["forbidden",{"_index":547,"title":{},"body":{"index.html":{}}}],["forget",{"_index":513,"title":{},"body":{"index.html":{}}}],["fork",{"_index":597,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":473,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":286,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["forroot(undefined",{"_index":287,"title":{},"body":{"modules/RestModule.html":{}}}],["free",{"_index":612,"title":{},"body":{"license.html":{}}}],["function",{"_index":85,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(this",{"_index":164,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["functionality",{"_index":439,"title":{},"body":{"index.html":{}}}],["functions",{"_index":361,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["functionsof",{"_index":79,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":636,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":461,"title":{},"body":{"index.html":{}}}],["getting",{"_index":386,"title":{"index.html":{},"license.html":{}},"body":{}}],["globalhandlers",{"_index":220,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["going",{"_index":457,"title":{},"body":{"index.html":{}}}],["granted",{"_index":611,"title":{},"body":{"license.html":{}}}],["graph",{"_index":671,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":93,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["guardforbid",{"_index":131,"title":{"classes/GuardForbid.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["guardforbid(request",{"_index":219,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardfunction",{"_index":98,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guardfunctions",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardfunctionsof",{"_index":99,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guards",{"_index":32,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["guards([posttodoguard",{"_index":520,"title":{},"body":{"index.html":{}}}],["guards(guardfunctions",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardspromise",{"_index":213,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardspromise.then",{"_index":229,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardtype",{"_index":100,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handle",{"_index":108,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["handler",{"_index":107,"title":{"interfaces/Handler.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["handler(original",{"_index":275,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handler.decorator.ts",{"_index":311,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlerfunction",{"_index":101,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlerfunctionsof",{"_index":104,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":40,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["handlers(handlers",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers.reduce((prev",{"_index":265,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handlersof",{"_index":105,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["head",{"_index":67,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["head(path",{"_index":467,"title":{},"body":{"index.html":{}}}],["header",{"_index":182,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["header(name",{"_index":380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["header[key",{"_index":197,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headerinjector",{"_index":498,"title":{},"body":{"index.html":{}}}],["headerinjectorresponse",{"_index":112,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headerinjectortype",{"_index":116,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":48,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["headers(headers",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headers.append(key",{"_index":189,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headers[method](name",{"_index":202,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headersclientparam",{"_index":118,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersinjector",{"_index":114,"title":{"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["headersobject",{"_index":109,"title":{"interfaces/HeadersObject.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersparam",{"_index":117,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hello",{"_index":423,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":610,"title":{},"body":{"license.html":{}}}],["holders",{"_index":659,"title":{},"body":{"license.html":{}}}],["http",{"_index":58,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["http://localhost:3000",{"_index":411,"title":{},"body":{"index.html":{}}}],["http_client",{"_index":28,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpclient",{"_index":18,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpclientmodule",{"_index":294,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["httperrorresponse",{"_index":21,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpheaders",{"_index":144,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httprequest",{"_index":19,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["httprequest(method",{"_index":245,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpresponse",{"_index":20,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["id",{"_index":490,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":474,"title":{},"body":{"index.html":{}}}],["implements",{"_index":515,"title":{},"body":{"index.html":{}}}],["implied",{"_index":649,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["imports",{"_index":295,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["included",{"_index":643,"title":{},"body":{"license.html":{}}}],["including",{"_index":623,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":277,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["inject",{"_index":115,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["injectable",{"_index":91,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["injectable.handle.bind(injectable",{"_index":272,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectable.handle[error_handler",{"_index":271,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectiontoken('base_headers",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('base_with_credentials",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_base_url",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_handlers",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":16,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inserttodo(@body",{"_index":417,"title":{},"body":{"index.html":{}}}],["inside",{"_index":449,"title":{},"body":{"index.html":{}}}],["install",{"_index":400,"title":{},"body":{"index.html":{}}}],["installation",{"_index":395,"title":{},"body":{"index.html":{}}}],["instance",{"_index":184,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["instance.inject",{"_index":187,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["instanceof",{"_index":260,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["interface/class",{"_index":74,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["js",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["jsonp",{"_index":69,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["jsonp(path",{"_index":468,"title":{},"body":{"index.html":{}}}],["key",{"_index":110,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["keyof",{"_index":81,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["kind",{"_index":647,"title":{},"body":{"license.html":{}}}],["legend",{"_index":675,"title":{},"body":{"overview.html":{}}}],["liability",{"_index":663,"title":{},"body":{"license.html":{}}}],["liable",{"_index":660,"title":{},"body":{"license.html":{}}}],["license",{"_index":603,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":624,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":580,"title":{},"body":{"index.html":{}}}],["limited",{"_index":650,"title":{},"body":{"license.html":{}}}],["literal",{"_index":12,"title":{},"body":{"interfaces/ClientConstructor.html":{}}}],["make",{"_index":427,"title":{},"body":{"index.html":{}}}],["makes",{"_index":442,"title":{},"body":{"index.html":{}}}],["mark",{"_index":471,"title":{},"body":{"index.html":{}}}],["marked",{"_index":441,"title":{},"body":{"index.html":{}}}],["marks",{"_index":436,"title":{},"body":{"index.html":{}}}],["matching",{"_index":128,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":652,"title":{},"body":{"license.html":{}}}],["merge",{"_index":627,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":72,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["methodhandlers",{"_index":226,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodheaders",{"_index":194,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodname",{"_index":161,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":60,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["miscellaneous",{"_index":358,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":604,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":626,"title":{},"body":{"license.html":{}}}],["module",{"_index":281,"title":{"modules/RestModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":283,"title":{"modules.html":{}},"body":{"modules/RestModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":291,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["more",{"_index":393,"title":{},"body":{"index.html":{}}}],["multi",{"_index":299,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["name",{"_index":141,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":73,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["never}[keyof",{"_index":83,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["new",{"_index":87,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":222,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next(request",{"_index":258,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next.prototype",{"_index":255,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next[error_handler",{"_index":273,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ngmodule",{"_index":292,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["noninfringement",{"_index":656,"title":{},"body":{"license.html":{}}}],["notice",{"_index":641,"title":{},"body":{"license.html":{}}}],["now",{"_index":601,"title":{},"body":{"index.html":{}}}],["npm",{"_index":399,"title":{},"body":{"index.html":{}}}],["null",{"_index":176,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["number",{"_index":120,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["object",{"_index":8,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["object.entries((target.constructor[param_headers",{"_index":200,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries((target.constructor[paths",{"_index":170,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(_headers",{"_index":188,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(header",{"_index":196,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["observable",{"_index":145,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["obtaining",{"_index":615,"title":{},"body":{"license.html":{}}}],["on_client_ready",{"_index":56,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["onclientready",{"_index":319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onready",{"_index":556,"title":{},"body":{"index.html":{}}}],["option",{"_index":560,"title":{},"body":{"index.html":{}}}],["optional",{"_index":130,"title":{},"body":{"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":68,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options(path",{"_index":466,"title":{},"body":{"index.html":{}}}],["original",{"_index":102,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["otherservices",{"_index":584,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":456,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":668,"title":{},"body":{"license.html":{},"overview.html":{}}}],["outgoing",{"_index":562,"title":{},"body":{"index.html":{}}}],["overview",{"_index":674,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":80,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["package",{"_index":338,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":169,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["param_headers",{"_index":46,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":198,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parameterdecorator",{"_index":373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":140,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":654,"title":{},"body":{"license.html":{}}}],["passed",{"_index":254,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["patch",{"_index":66,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["patch('todos/:id",{"_index":487,"title":{},"body":{"index.html":{}}}],["patch(path",{"_index":465,"title":{},"body":{"index.html":{}}}],["patchtodo(@body",{"_index":488,"title":{},"body":{"index.html":{}}}],["path",{"_index":159,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["path('id",{"_index":489,"title":{},"body":{"index.html":{}}}],["path(key",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paths",{"_index":38,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":609,"title":{},"body":{"license.html":{}}}],["permit",{"_index":634,"title":{},"body":{"license.html":{}}}],["person",{"_index":614,"title":{},"body":{"license.html":{}}}],["persons",{"_index":635,"title":{},"body":{"license.html":{}}}],["placeholder",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portions",{"_index":645,"title":{},"body":{"license.html":{}}}],["post",{"_index":63,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post('image",{"_index":478,"title":{},"body":{"index.html":{}}}],["post('todos",{"_index":416,"title":{},"body":{"index.html":{}}}],["post(path",{"_index":462,"title":{},"body":{"index.html":{}}}],["posttodo(@body",{"_index":469,"title":{},"body":{"index.html":{}}}],["posttodo(todo",{"_index":429,"title":{},"body":{"index.html":{}}}],["posttodoguard",{"_index":514,"title":{},"body":{"index.html":{}}}],["posttodoguard(req",{"_index":527,"title":{},"body":{"index.html":{}}}],["posttodos(todo",{"_index":521,"title":{},"body":{"index.html":{}}}],["prev",{"_index":223,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev.then(passed",{"_index":253,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev[method](res",{"_index":274,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["private",{"_index":555,"title":{},"body":{"index.html":{}}}],["process",{"_index":212,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["projects/.../body.decorator.ts",{"_index":362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../client.decorator.ts",{"_index":364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../error",{"_index":365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../guards.decorator.ts",{"_index":366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../handlers.decorator.ts",{"_index":367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../header.decorator.ts",{"_index":368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../headers.decorator.ts",{"_index":369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../on",{"_index":370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../path.decorator.ts",{"_index":371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../request",{"_index":363,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../request.decorator.ts",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../tokens.ts",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":360,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../with",{"_index":372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/body.decorator.ts",{"_index":306,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/client.decorator.ts",{"_index":309,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/error",{"_index":310,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/guards.decorator.ts",{"_index":313,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/handlers.decorator.ts",{"_index":314,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/header.decorator.ts",{"_index":315,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/headers.decorator.ts",{"_index":316,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/on",{"_index":317,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/path.decorator.ts",{"_index":320,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/request",{"_index":133,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/rest/src/lib/request.decorator.ts",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/rest.module.ts",{"_index":284,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["projects/rest/src/lib/rest.module.ts:29",{"_index":289,"title":{},"body":{"modules/RestModule.html":{}}}],["projects/rest/src/lib/tokens.ts",{"_index":328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts",{"_index":6,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts:52",{"_index":280,"title":{},"body":{"interfaces/RestGuard.html":{}}}],["projects/rest/src/lib/types.ts:66",{"_index":278,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["projects/rest/src/lib/types.ts:73",{"_index":276,"title":{},"body":{"classes/HeadersInjector.html":{}}}],["projects/rest/src/lib/with",{"_index":334,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":97,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["promise.resolve(true",{"_index":262,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["promiselike",{"_index":266,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"interfaces/RequestConfig.html":{},"interfaces/RootConfiguration.html":{}}}],["propertydescriptor",{"_index":155,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":153,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["provide",{"_index":297,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["provided",{"_index":569,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":124,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["provider",{"_index":293,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["providers",{"_index":296,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":438,"title":{},"body":{"index.html":{}}}],["public",{"_index":136,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["publish",{"_index":628,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":655,"title":{},"body":{"license.html":{}}}],["put",{"_index":64,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["put(path",{"_index":463,"title":{},"body":{"index.html":{}}}],["ready.decorator.ts",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refactored",{"_index":600,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":199,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["repository",{"_index":596,"title":{},"body":{"index.html":{}}}],["req.body.canbesent",{"_index":528,"title":{},"body":{"index.html":{}}}],["request",{"_index":59,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["requestbuilder",{"_index":324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestbuilder(requestmethod.delete",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.get",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.head",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.jsonp",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.options",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.patch",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.post",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.put",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(type",{"_index":158,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["requestconfig",{"_index":231,"title":{"interfaces/RequestConfig.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["requestfactory",{"_index":232,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestfactory(method",{"_index":375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requestfactory(type",{"_index":209,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod",{"_index":62,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{}}}],["requestmethod.delete",{"_index":239,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.get",{"_index":238,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.head",{"_index":240,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.jsonp",{"_index":241,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.options",{"_index":242,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.patch",{"_index":235,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.post",{"_index":233,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.put",{"_index":234,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requests",{"_index":477,"title":{},"body":{"index.html":{}}}],["res",{"_index":264,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["reset",{"_index":678,"title":{},"body":{"overview.html":{}}}],["rest",{"_index":92,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rest_handlers",{"_index":147,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["restclient",{"_index":437,"title":{},"body":{"index.html":{}}}],["restguard",{"_index":94,"title":{"interfaces/RestGuard.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["restmodule",{"_index":282,"title":{"modules/RestModule.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"modules.html":{}}}],["restmodule.forroot",{"_index":586,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({baseurl",{"_index":410,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({withcredentials",{"_index":567,"title":{},"body":{"index.html":{}}}],["restor",{"_index":398,"title":{},"body":{"index.html":{}}}],["restpropertydecorator",{"_index":151,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":622,"title":{},"body":{"license.html":{}}}],["result",{"_index":127,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.topromise",{"_index":261,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["results",{"_index":129,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":160,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["returning",{"_index":460,"title":{},"body":{"index.html":{}}}],["returns",{"_index":70,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["right",{"_index":551,"title":{},"body":{"index.html":{}}}],["rights",{"_index":625,"title":{},"body":{"license.html":{}}}],["root",{"_index":125,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rootconfiguration",{"_index":288,"title":{"interfaces/RootConfiguration.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["run",{"_index":211,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["rxjs",{"_index":146,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"dependencies.html":{}}}],["save",{"_index":401,"title":{},"body":{"index.html":{}}}],["secret",{"_index":450,"title":{},"body":{"index.html":{}}}],["selector",{"_index":421,"title":{},"body":{"index.html":{}}}],["sell",{"_index":632,"title":{},"body":{"license.html":{}}}],["sent",{"_index":506,"title":{},"body":{"index.html":{}}}],["service",{"_index":443,"title":{},"body":{"index.html":{}}}],["services",{"_index":589,"title":{},"body":{"index.html":{}}}],["session",{"_index":516,"title":{},"body":{"index.html":{}}}],["sessionservice",{"_index":517,"title":{},"body":{"index.html":{}}}],["set",{"_index":181,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["shall",{"_index":642,"title":{},"body":{"license.html":{}}}],["shouldn't",{"_index":585,"title":{},"body":{"index.html":{}}}],["single",{"_index":524,"title":{},"body":{"index.html":{}}}],["software",{"_index":617,"title":{},"body":{"license.html":{}}}],["something",{"_index":428,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["source.then(res",{"_index":263,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["specified",{"_index":71,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":387,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["startguardcheck",{"_index":247,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["startguardcheck(target",{"_index":214,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["statements",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":285,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["steven166/angular",{"_index":598,"title":{},"body":{"index.html":{}}}],["string",{"_index":111,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["subject",{"_index":637,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":630,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":644,"title":{},"body":{"license.html":{}}}],["super('a",{"_index":156,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["supports",{"_index":581,"title":{},"body":{"index.html":{}}}],["switch",{"_index":243,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["symbol",{"_index":26,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('base_url",{"_index":31,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('bodies",{"_index":37,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_guards",{"_index":35,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_handlers",{"_index":43,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_headers",{"_index":51,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_with_credentials",{"_index":55,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('error_handler",{"_index":45,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('guards",{"_index":33,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('handlers",{"_index":41,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('headers",{"_index":49,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('http_client",{"_index":29,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('injector",{"_index":27,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('on_client_ready",{"_index":57,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('param_headers",{"_index":47,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('paths",{"_index":39,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('with_credentials",{"_index":53,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":76,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["t[p",{"_index":82,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["table",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":152,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["target.constructor[bodies",{"_index":175,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][client_guards",{"_index":250,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][methodname",{"_index":251,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][client_handlers",{"_index":225,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][methodname",{"_index":227,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[headers",{"_index":193,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials",{"_index":205,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][client_with_credentials",{"_index":206,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][methodname",{"_index":207,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["template",{"_index":75,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["thalesrc",{"_index":608,"title":{},"body":{"license.html":{}}}],["thalesrc/angular",{"_index":388,"title":{},"body":{"index.html":{}}}],["then(result",{"_index":215,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this.client.inserttodo(todo",{"_index":430,"title":{},"body":{"index.html":{}}}],["this.client.patchtodo(todo",{"_index":492,"title":{},"body":{"index.html":{}}}],["this.client.posttodo(todo",{"_index":482,"title":{},"body":{"index.html":{}}}],["this.client.todos().then(todos",{"_index":426,"title":{},"body":{"index.html":{}}}],["this.client.uploadimage(data",{"_index":486,"title":{},"body":{"index.html":{}}}],["this.session.loggedin$.pipe(first()).topromise",{"_index":519,"title":{},"body":{"index.html":{}}}],["this.todocacheservice.cachetodos(todos",{"_index":558,"title":{},"body":{"index.html":{}}}],["this.todos",{"_index":557,"title":{},"body":{"index.html":{}}}],["this[base_url]}/${endpoint",{"_index":210,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[header",{"_index":195,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[http_client].request(request).topromise",{"_index":230,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_headers",{"_index":180,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_with_credentials",{"_index":204,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(header",{"_index":185,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(rest_handlers)).reduce((prev",{"_index":221,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["throw",{"_index":216,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["todo",{"_index":418,"title":{},"body":{"index.html":{}}}],["todo.client",{"_index":407,"title":{},"body":{"index.html":{}}}],["todo.client.ts",{"_index":414,"title":{},"body":{"index.html":{}}}],["todo.component",{"_index":409,"title":{},"body":{"index.html":{}}}],["todo.component.ts",{"_index":419,"title":{},"body":{"index.html":{}}}],["todocacheservice",{"_index":553,"title":{},"body":{"index.html":{}}}],["todoclient",{"_index":406,"title":{},"body":{"index.html":{}}}],["todocomponent",{"_index":408,"title":{},"body":{"index.html":{}}}],["todoid",{"_index":491,"title":{},"body":{"index.html":{}}}],["todomodule",{"_index":522,"title":{},"body":{"index.html":{}}}],["todos",{"_index":415,"title":{},"body":{"index.html":{}}}],["token",{"_index":570,"title":{},"body":{"index.html":{}}}],["tokens",{"_index":150,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["top",{"_index":573,"title":{},"body":{"index.html":{}}}],["topsecret",{"_index":590,"title":{},"body":{"index.html":{}}}],["tort",{"_index":666,"title":{},"body":{"license.html":{}}}],["true",{"_index":300,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":680,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":177,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["types",{"_index":143,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["typescript",{"_index":390,"title":{},"body":{"index.html":{}}}],["u",{"_index":78,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["undefined",{"_index":168,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["unless",{"_index":565,"title":{},"body":{"index.html":{}}}],["uploadimage(@body",{"_index":479,"title":{},"body":{"index.html":{}}}],["uploadimage(image",{"_index":483,"title":{},"body":{"index.html":{}}}],["uploads",{"_index":475,"title":{},"body":{"index.html":{}}}],["url",{"_index":236,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["use",{"_index":89,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"license.html":{}}}],["used",{"_index":458,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":298,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["util",{"_index":452,"title":{},"body":{"index.html":{}}}],["value",{"_index":290,"title":{},"body":{"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":682,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":651,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":646,"title":{},"body":{"license.html":{}}}],["whether",{"_index":508,"title":{},"body":{"index.html":{},"license.html":{}}}],["with_credentials",{"_index":52,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["withcredentials",{"_index":126,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["withcredentials(true",{"_index":574,"title":{},"body":{"index.html":{}}}],["withcredentials(withcredentials",{"_index":385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withcredentialsparam",{"_index":576,"title":{},"body":{"index.html":{}}}],["without",{"_index":621,"title":{},"body":{"license.html":{}}}],["world",{"_index":424,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":396,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":677,"title":{},"body":{"overview.html":{}}}],["zçelik",{"_index":595,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ClientConstructor.html":{"url":"interfaces/ClientConstructor.html","title":"interface - ClientConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Object\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constructor\n                                    \n                                \n                                \n                                    \n                                        constructor:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientInstance.html":{"url":"interfaces/ClientInstance.html","title":"interface - ClientInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        BASE_URL\n                                \n                                \n                                        HTTP_CLIENT\n                                \n                                \n                                        INJECTOR\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        BASE_URL\n                                    \n                                \n                                \n                                    \n                                        BASE_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        HTTP_CLIENT\n                                    \n                                \n                                \n                                    \n                                        HTTP_CLIENT:         HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        INJECTOR\n                                    \n                                \n                                \n                                    \n                                        INJECTOR:         Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Injector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        guards\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        providedIn\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersClientParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersClientParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guards\n                                    \n                                \n                                \n                                    \n                                        guards:         Guard\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Guard\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providedIn\n                                    \n                                \n                                \n                                    \n                                        providedIn:     Type | \"root\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Type | \"root\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuardForbid.html":{"url":"classes/GuardForbid.html","title":"class - GuardForbid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuardForbid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: HttpRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/request-builder.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    HttpRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpRequest\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/rest/src/lib/request-builder.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS, CLIENT_WITH_CREDENTIALS, PATHS } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Handler.html":{"url":"interfaces/Handler.html","title":"interface - Handler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Handler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handle\n                                    \n                                \n                                \n                                    \n                                        handle:         HandlerFunction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlerFunction\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeadersInjector.html":{"url":"classes/HeadersInjector.html","title":"class - HeadersInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeadersInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                inject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            inject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inject()\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         HeaderInjectorResponse\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeadersObject.html":{"url":"interfaces/HeadersObject.html","title":"interface - HeadersObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeadersObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | []\n\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/types.ts:66\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestConfig.html":{"url":"interfaces/RequestConfig.html","title":"interface - RequestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        headers\n                                \n                                \n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         HttpHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpHeaders\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS, CLIENT_WITH_CREDENTIALS, PATHS } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestGuard.html":{"url":"interfaces/RestGuard.html","title":"interface - RestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n            \n                Description\n            \n            \n                Use to define an injectable as a rest guard\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canSend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canSend\n                        \n                        \n                    \n                \n            \n            \n                \ncanSend(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(undefined: RootConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/rest.module.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                                RootConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootConfiguration.html":{"url":"interfaces/RootConfiguration.html","title":"interface - RootConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RootConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/rest/src/lib/body.decorator.ts\n            \n            function\n            Body\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/client.decorator.ts\n            \n            function\n            Client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/error-handler.decorator.ts\n            \n            function\n            ErrorHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/guards.decorator.ts\n            \n            function\n            Guards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/handlers.decorator.ts\n            \n            function\n            Handlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/header.decorator.ts\n            \n            function\n            Header\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/headers.decorator.ts\n            \n            function\n            Headers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/on-client-ready.decorator.ts\n            \n            function\n            OnClientReady\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/path.decorator.ts\n            \n            function\n            Path\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            class\n            GuardForbid\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            interface\n            RequestConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            chainHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestBuilder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            startGuardCheck\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Delete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Get\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Head\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Jsonp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Patch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Put\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/rest.module.ts\n            \n            interface\n            RootConfiguration\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            REST_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            class\n            HeadersInjector\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientConstructor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientInstance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientOptions\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            Handler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            HeadersObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            RestGuard\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BODIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ERROR_HANDLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HTTP_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            INJECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ON_CLIENT_READY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PARAM_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PATHS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/with-credentials.decorator.ts\n            \n            function\n            WithCredentials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.3\n        \n            @angular/common : ~8.2.3\n        \n            @angular/compiler : ~8.2.3\n        \n            @angular/core : ~8.2.3\n        \n            @angular/forms : ~8.2.3\n        \n            @angular/platform-browser : ~8.2.3\n        \n            @angular/platform-browser-dynamic : ~8.2.3\n        \n            @angular/router : ~8.2.3\n        \n            core-js : ^2.5.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.5.2\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RequestMethod   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RequestMethod\n                    \n                \n                    \n                        \n                            Http Request Methods\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 JSONP\n                            \n                        \n                        \n                            \n                                Value : JSONP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Body   (projects/.../body.decorator.ts)\n                        \n                        \n                            chainHandlers   (projects/.../request-builder.ts)\n                        \n                        \n                            Client   (projects/.../client.decorator.ts)\n                        \n                        \n                            ErrorHandler   (projects/.../error-handler.decorator.ts)\n                        \n                        \n                            Guards   (projects/.../guards.decorator.ts)\n                        \n                        \n                            Handlers   (projects/.../handlers.decorator.ts)\n                        \n                        \n                            Header   (projects/.../header.decorator.ts)\n                        \n                        \n                            Headers   (projects/.../headers.decorator.ts)\n                        \n                        \n                            OnClientReady   (projects/.../on-client-ready.decorator.ts)\n                        \n                        \n                            Path   (projects/.../path.decorator.ts)\n                        \n                        \n                            requestBuilder   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            startGuardCheck   (projects/.../request-builder.ts)\n                        \n                        \n                            WithCredentials   (projects/.../with-credentials.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/body.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Body\n                        \n                        \n                    \n                \n            \n            \n                \nBody()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ParameterDecorator\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            chainHandlers\n                        \n                        \n                    \n                \n            \n            \n                \nchainHandlers(handlers, context, source)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestBuilder\n                        \n                        \n                    \n                \n            \n            \n                \nrequestBuilder(type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RestPropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startGuardCheck\n                        \n                        \n                    \n                \n            \n            \n                \nstartGuardCheck(target, methodName, request, context)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    methodName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/client.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Client\n                        \n                        \n                    \n                \n            \n            \n                \nClient(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/error-handler.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ErrorHandler\n                        \n                        \n                    \n                \n            \n            \n                \nErrorHandler()\n                \n            \n\n\n\n\n        \n    \n    projects/rest/src/lib/guards.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Guards\n                        \n                        \n                    \n                \n            \n            \n                \nGuards(guardFunctions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    guardFunctions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/handlers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Handlers\n                        \n                        \n                    \n                \n            \n            \n                \nHandlers(handlers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/header.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Header\n                        \n                        \n                    \n                \n            \n            \n                \nHeader(name, replace)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replace\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/headers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Headers\n                        \n                        \n                    \n                \n            \n            \n                \nHeaders(headers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/on-client-ready.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            OnClientReady\n                        \n                        \n                    \n                \n            \n            \n                \nOnClientReady()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/path.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Path\n                        \n                        \n                    \n                \n            \n            \n                \nPath(key)\n                \n            \n\n\n\n\n            \n                \n                    A parameter decorated with Path will replace the specified key in the url\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path placeholder key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/with-credentials.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithCredentials\n                        \n                        \n                    \n                \n            \n            \n                \nWithCredentials(withCredentials)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    withCredentials\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n@thalesrc/angular-rest\nAngular Rest Http Module with Typescript Declarative Annotations, Guards, Handlers and more\n\n1. Installation\nyarn add @thalesrc/angular-restor\nnpm install @thalesrc/angular-rest --save\n2. Basic Example\n// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\nimport { TodoClient } from './todo.client';\nimport { TodoComponent } from './todo.component';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({baseUrl: 'http://localhost:3000'})\n  ],\n  providers: [\n    TodoClient\n  ],\n  declarations: [\n    TodoComponent\n  ]\n})\nexport class AppModule {}\n// todo.client.ts\n\nimport { HttpRequest } from '@angular/common/http';\nimport { Client, Get, Post, Body } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public insertTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n// todo.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-todo',\n  template: 'Hello World'\n})\nexport class TodoComponent {\n  constructor(private client: TodoClient) {\n    this.client.todos().then(todos => {\n      // Make something with todos\n    });\n  }\n\n  async postTodo(todo: Todo): Promise {\n    return await this.client.insertTodo(todo);\n  }\n}\n\n3. API Docs\n\n3.1. Client Decorator\n@Client() decorator marks a class as RestClient and provides functionality to make Http calls with its marked methods.\nThis decorator also marks the class as Injectable() and makes it to function as an Angular Service.\nIt can be configured by defining a ClientOptions object as a parameter\n3.1.1. ClientOptions\nA ClientOptions object configures base options for the rest methods declared inside a @Client() class\ninterface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n}@Client({\n  baseUrl: 'http://localhost:3000',\n  baseHeaders: [{'Secret-Key': 'The best rest util is @thalesrc/angular-rest'}]\n  ...\n})\nexport class TodoClient {\n  ...\n}\n3.2. Request Method Decorators\nAll of these decorators marks a method in a @Client() as a request builder. path can be specified to define the endpoint path. Otherwise, the method name is going to be used as path.\nThe method return type should be defined as Promise and function should be empty but only returning null. Decorators will handle all the rest.\n\n@Get(path?: string)\n@Post(path?: string)\n@Put(path?: string)\n@Delete(path?: string)\n@Patch(path?: string)\n@Options(path?: string)\n@Head(path?: string)\n@Jsonp(path?: string)\n\nExample:\n@Client()\nexport class TodoClient {\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n3.3. Body Parameter Decorator\nMark a parameter with @Body() decorator to fill body object with it.\nA FormData instance can be used for image uploads etc.\nBody decorator can be used in only POST, PUT, PATCH requests\nExample:\n@Client()\nexport class TodoClient {\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n\n  @Post('image')\n  public uploadImage(@Body() data: FormData): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo): Promise {\n    return await this.client.postTodo(todo);\n  }\n\n  public async uploadImage(image: Blob): Promise {\n    const data = new FormData();\n    data.append('image', image);\n\n    return await this.client.uploadImage(data);\n  }\n}\n3.3. Path Parameter Decorator\nMark a parameter decorated with Path to replace the specified key in the url\nExample:\n@Client()\nexport class TodoClient {\n  @Patch('todos/:id')\n  public patchTodo(@Body() todo: Todo, @Path('id') id: string): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo, todoId: string): Promise {\n    return await this.client.patchTodo(todo, todoId);\n  }\n}\n3.5. Headers\nTo be determined\n3.5.1. Header Declaration Methods\nTo be determined\n3.5.1.1 HeaderInjector\nTo be determined\n3.5.1.2 HeadersObject\nTo be determined\n3.5.1.3 Headers as Client Method\nTo be determined\n3.5.2. Base Headers\nTo be determined\n3.5.3. Client Headers\nTo be determined\n3.5.4. Parameter Headers\nTo be determined\n\n3.6. Guards\nGuards run just before a request has been sent to check whether request should be sent or not\n3.6.1. Guard Declaration Methods\nGuards can be a function, a method of a client or an injectable of RestGuard\n3.6.1.1 RestGuard\nDefine an injectable as a rest guard and declare them as a guard (Base Guard, Client Guard, Method Guard) to check a request can be sent or not.\nDon't forget to provide them in a module\nExample:\n@Injectable()\nexport class PostTodoGuard implements RestGuard {\n constructor(private session: SessionService) {}\n\n async canSend(req: HttpRequest): Promise {\n   return await this.session.loggedIn$.pipe(first()).toPromise()\n }\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([PostTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}\n\n@NgModule({\n providers: [\n   TodoClient,\n   PostTodoGuard\n ]\n})\nexport class TodoModule {}3.6.1.2. Guard Function\nA single function can be a rest guard if it accepts first param as HttpRequest and returns whether boolean or Promise\nExample:\nfunction postTodoGuard(req: HttpRequest): boolean {\n  return req.body.canBeSent;\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([postTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}3.6.1.3. Guard Method\nTo be determined\n3.6.2. Base Guards\nTo be determined\n3.6.3. Client Guards\nTo be determined\n3.6.4. Method Guards\nTo be determined\n\n3.7. Handlers\nTo be determined\n3.7.1 ErrorHandlers\nTo be determined\n3.7.2 Handler Declaration Methods\nTo be determined\n3.7.2.1 Handler\nTo be determined\n3.7.2.2 Handler Function\nTo be determined\n3.7.2.3 Handler Method\nTo be determined\n3.7.3 Base Handlers\nTo be determined\n3.7.4 Client Handlers\nTo be determined\n3.7.5 Method Handlers\nTo be determined\n\n3.8. RestModule\nTo be determined\n\n3.9. OnClientReady Decorator\nIn client constructor functions, calling a rest call is forbidden. Because the client dependencies have not been set yet when the constructor function called.\nTo run some code when client instance created, @OnClientReady() decorator can be used. It will mark a method of a client to be called right after construction.\nExample:\nimport { Client, OnClientReady } from '@thalesrc/angular-rest';\nimport { TodoCacheService } from './todo-cache.service';\n\n@Client()\nexport class TodoClient {\n  constructor(\n    private todoCacheService: TodoCacheService\n  ) {}\n\n  @OnClientReady()\n  private onReady() {\n    const todos = await this.todos();\n\n    this.todoCacheService.cacheTodos(todos);\n  }\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n}\n3.10. WithCredentials Option\nDefines whether a request should be sent with outgoing credentials (cookies). Default true\n3.10.1. As Module Config\nIt can be set in module config as base option. That would configure for all requests unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({withCredentials: false})\n    ...\n  ],\n})\nexport class AppModule {}3.10.2. As Provider\nIt can be provided with the BASE_WITH_CREDENTIALS token as base option. That would also configure for all requests like As Module Config unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_WITH_CREDENTIALS } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule\n    ...\n  ],\n  providers: [\n    {provide: BASE_WITH_CREDENTIALS, useValue: false},\n    ...\n  ]\n})\nexport class AppModule {}3.10.3. As Client Config\nIt can be set in @Client() decorator as an option. That would configure withCredentials option for all the calls in that client.\nExample:\nimport { Client } from '@thalesrc/angular-rest';\n\n@Client({\n  withCredentials: true\n})\nexport class TodoClient {\n  ...\n}3.10.4. WithCredentials Decorator\nIt can be set by @WithCredentials() decorator on top a rest call. That would configure withCredentials option for only that call.\nExample:\nimport { Client, WithCredentials } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n  @Get()\n  @WithCredentials(true)\n  public todos(): Promise {\n    return null;\n  }\n}3.10.5. WithCredentialsParam Decorator\nto be developed\n\n4. Aot Limitations\nThis package supports aot builds, however there are some limitations.\n\nThe Injector should have been defined as the first parameter for every @Client constructor.\n\nimport { Injector } from '@angular/core';\n\n@Client()\nexport class TodoClient {\n  constructor(injector: Injector, otherServices: Etc) {\n\n  }\n}\nBase handlers and base headers shouldn't be defined in RestModule.forRoot static method. All of these should be provided in module providers\n\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_HEADERS, BASE_HANDLERS } from '@thalesrc/angular-rest';\n\nimport { BaseHeaders, BaseHandler } from './services';\n\n@NgModule({\n  imports: [RestModule],\n  providers: [\n    BaseHeaders,\n    BaseHandler,\n    {provide: BASE_HEADERS, useValue: [BaseHeaders, {'Secret-Key': 'topsecret'}], multi: true},\n    {provide: BASE_HANDLERS, useValue: [BaseHandler], multi: true},\n  ]\n})\nexport class AppModule {}\n5. Contributors\nAli Şahin Özçelik\nThis repository is started as a fork of steven166/angular-rest-client and completely refactored now\n\n6. License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Thalesrc\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassOf   (projects/.../types.ts)\n                        \n                        \n                            FunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            Guard   (projects/.../types.ts)\n                        \n                        \n                            GuardFunction   (projects/.../types.ts)\n                        \n                        \n                            GuardFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            GuardType   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunction   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            HandlersOf   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorResponse   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorType   (projects/.../types.ts)\n                        \n                        \n                            HeadersClientParam   (projects/.../types.ts)\n                        \n                        \n                            HeadersParam   (projects/.../types.ts)\n                        \n                        \n                            RestPropertyDecorator   (projects/.../request-builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    ClassOf\n                \n            \n            \n                \n                    Returns a class-function type of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FunctionsOf\n                \n            \n            \n                \n                    Returns specified type of method names of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Guard\n                \n            \n            \n                \n                        GuardType[] | GuardType\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunctionsOf\n                \n            \n            \n                \n                        FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardType\n                \n            \n            \n                \n                            GuardFunctionsOf | GuardFunction | ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunctionsOf\n                \n            \n            \n                \n                            FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlersOf\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorResponse\n                \n            \n            \n                \n                            HeadersObject | Promise\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorType\n                \n            \n            \n                \n                            ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersClientParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n    \n        \n            \n                \n                    \n                    RestPropertyDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_HEADERS   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_URL   (projects/.../types.ts)\n                        \n                        \n                            BASE_URL   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_WITH_CREDENTIALS   (projects/.../tokens.ts)\n                        \n                        \n                            BODIES   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_GUARDS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                        \n                            Delete   (projects/.../request.decorator.ts)\n                        \n                        \n                            ERROR_HANDLER   (projects/.../types.ts)\n                        \n                        \n                            Get   (projects/.../request.decorator.ts)\n                        \n                        \n                            GUARDS   (projects/.../types.ts)\n                        \n                        \n                            HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            Head   (projects/.../request.decorator.ts)\n                        \n                        \n                            HEADERS   (projects/.../types.ts)\n                        \n                        \n                            HTTP_CLIENT   (projects/.../types.ts)\n                        \n                        \n                            INJECTOR   (projects/.../types.ts)\n                        \n                        \n                            Jsonp   (projects/.../request.decorator.ts)\n                        \n                        \n                            ON_CLIENT_READY   (projects/.../types.ts)\n                        \n                        \n                            Options   (projects/.../request.decorator.ts)\n                        \n                        \n                            PARAM_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            Patch   (projects/.../request.decorator.ts)\n                        \n                        \n                            PATHS   (projects/.../types.ts)\n                        \n                        \n                            Post   (projects/.../request.decorator.ts)\n                        \n                        \n                            Put   (projects/.../request.decorator.ts)\n                        \n                        \n                            REST_HANDLERS   (projects/.../tokens.ts)\n                        \n                        \n                            WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/tokens.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REST_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_HANDLERS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BODIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BODIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_HANDLER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ERROR_HANDLER')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HTTP_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HTTP_CLIENT')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INJECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('INJECTOR')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLIENT_READY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ON_CLIENT_READY')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PARAM_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PARAM_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PATHS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PATHS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/request.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Delete\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.DELETE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.GET)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Head\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.HEAD)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Jsonp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.JSONP)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Options\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.OPTIONS)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PATCH)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Post\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.POST)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PUT)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
