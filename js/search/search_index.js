var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/ClientConstructor.html",[0,0.024,1,0.689]],["body/interfaces/ClientConstructor.html",[0,0.04,1,0.81,2,0.733,3,0.566,4,0.493,5,0.493,6,0.566,7,1.226,8,0.924,9,0.364,10,1.344,11,1.179,12,3.355,13,0.592,14,0.05,15,0.706,16,0.901,17,0.566,18,1.344,19,0.947,20,1.049,21,1.344,22,0.493,23,1.189,24,1.477,25,2.149,26,1.899,27,0.83,28,0.81,29,0.83,30,0.61,31,0.83,32,0.713,33,0.83,34,0.81,35,0.83,36,0.81,37,0.83,38,0.511,39,0.83,40,0.81,41,0.83,42,0.566,43,0.83,44,0.81,45,0.83,46,0.61,47,0.83,48,0.81,49,0.83,50,0.81,51,0.83,52,0.81,53,0.83,54,1.049,55,0.83,56,0.733,57,0.706,58,0.645,59,0.939,60,0.645,61,0.81,62,0.924,63,0.924,64,0.924,65,0.924,66,0.81,67,0.924,68,0.81,69,0.733,70,0.706,71,0.83,72,1.188,73,1.188,74,1.338,75,0.939,76,1.344,77,1.226,78,1.344,79,0.939,80,0.939,81,0.939,82,0.359,83,0.493,84,1.388,85,0.947,86,1.226,87,0.733,88,0.83,89,0.645,90,0.645,91,0.947,92,0.645,93,0.939,94,0.992,95,0.901,96,1.516,97,1.188,98,1.388,99,1.388,100,0.733,101,0.939,102,0.83,103,0.778,104,1.604,105,0.706,106,0.645,107,0.61,108,1.367,109,1.113,110,1.388,111,1.344,112,0.426,113,0.939,114,0.83,115,0.493,116,1.034,117,0.566,118,1.049,119,0.645,120,0.645,121,0.493,122,0.83,123,0.83,124,0.364,125,0.02,126,0.029,127,0.02]],["title/interfaces/ClientInstance.html",[0,0.024,117,0.689]],["body/interfaces/ClientInstance.html",[0,0.04,1,0.56,2,0.725,3,0.56,4,0.488,5,0.488,6,0.56,7,1.041,8,0.638,9,0.36,10,1.334,11,0.638,13,0.591,14,0.05,15,0.701,16,1.061,17,0.56,18,1.707,19,0.941,20,1.041,21,1.334,22,0.488,23,1.188,24,1.475,25,2.146,26,1.896,27,0.821,28,1.09,29,0.821,30,0.82,31,0.821,32,0.709,33,0.821,34,0.804,35,0.821,36,0.804,37,0.821,38,0.508,39,0.821,40,0.804,41,0.821,42,0.56,43,0.821,44,0.804,45,0.821,46,0.605,47,0.821,48,0.804,49,0.821,50,0.804,51,0.821,52,0.804,53,0.821,54,1.041,55,0.821,56,0.725,57,0.701,58,0.638,59,0.929,60,0.638,61,0.804,62,0.917,63,0.917,64,0.917,65,0.917,66,0.804,67,0.917,68,0.804,69,0.725,70,0.701,71,0.821,72,1.179,73,1.179,74,1.332,75,0.929,76,1.334,77,1.218,78,1.334,79,0.929,80,0.929,81,0.929,82,0.357,83,0.488,84,1.38,85,0.941,86,1.218,87,0.725,88,0.821,89,0.638,90,0.638,91,0.941,92,0.638,93,0.929,94,0.988,95,0.896,96,1.508,97,1.179,98,1.38,99,1.38,100,0.725,101,0.929,102,0.821,103,0.774,104,1.597,105,0.701,106,0.638,107,0.605,108,1.363,109,1.127,110,1.38,111,1.334,112,0.421,113,0.929,114,0.821,115,0.488,116,1.029,117,0.804,118,1.041,119,0.638,120,0.638,121,0.488,122,0.821,123,0.821,124,0.36,125,0.02,126,0.029,127,0.02]],["title/interfaces/ClientOptions.html",[0,0.024,119,0.786]],["body/interfaces/ClientOptions.html",[0,0.04,1,0.539,2,0.697,3,0.539,4,0.469,5,0.469,6,0.539,7,1.012,8,0.614,9,0.346,10,1.297,11,0.614,13,0.596,14,0.05,15,0.682,16,0.881,17,0.539,18,1.297,19,0.921,20,1.012,21,1.297,22,0.469,23,1.184,24,1.466,25,2.133,26,1.885,27,0.79,28,0.782,29,0.79,30,0.589,31,0.79,32,0.843,33,0.79,34,0.782,35,0.79,36,0.782,37,0.79,38,0.604,39,0.79,40,0.782,41,0.79,42,0.539,43,0.79,44,0.782,45,0.79,46,0.589,47,0.79,48,0.782,49,0.79,50,0.782,51,0.79,52,0.782,53,0.79,54,1.012,55,0.79,56,0.697,57,0.682,58,0.614,59,0.894,60,0.614,61,0.782,62,0.892,63,0.892,64,0.892,65,0.892,66,0.782,67,0.892,68,0.782,69,0.697,70,0.682,71,0.79,72,1.147,73,1.147,74,1.308,75,0.894,76,1.297,77,1.192,78,1.297,79,0.894,80,0.894,81,0.894,82,0.347,83,0.469,84,1.35,85,0.921,86,1.192,87,0.697,88,0.79,89,0.614,90,0.614,91,1.073,92,0.614,93,0.894,94,1.031,95,0.881,96,1.481,97,1.147,98,1.35,99,1.35,100,0.697,101,0.894,102,0.79,103,0.843,104,1.573,105,0.682,106,0.614,107,0.589,108,1.349,109,1.12,110,1.35,111,1.297,112,0.405,113,0.894,114,0.79,115,0.469,116,1.119,117,0.539,118,1.012,119,0.892,120,1.152,121,0.881,122,1.481,123,1.35,124,0.649,125,0.019,126,0.028,127,0.019,128,2.358]],["title/classes/GuardForbid.html",[82,0.306,129,1.685]],["body/classes/GuardForbid.html",[0,0.016,1,0.815,3,0.438,4,0.71,5,0.382,7,0.868,8,0.5,9,0.431,10,1.113,11,0.765,13,0.361,14,0.05,15,0.795,16,0.382,19,1.141,20,0.868,22,0.382,23,0.382,24,1.462,28,0.438,30,0.33,32,0.33,34,0.438,36,0.438,38,0.44,40,0.438,42,0.438,44,0.438,46,0.904,48,0.671,50,0.438,52,0.438,57,1.015,60,0.929,70,1.015,74,0.868,82,0.194,83,1.06,85,0.913,86,0.568,89,0.5,90,0.929,91,0.671,94,0.585,95,0.71,100,1.055,103,0.74,105,0.795,106,0.5,107,0.505,108,0.765,109,1.015,112,0.613,115,0.585,116,0.815,117,0.913,118,0.568,121,0.585,124,0.632,125,0.04,126,0.024,127,0.016,128,0.824,129,1.641,130,1.242,131,1.741,132,0.937,133,3.619,134,1.741,135,1.815,136,1.261,137,1.815,138,1.073,139,1.261,140,1.815,141,1.073,142,2.731,143,2.249,144,1.242,145,0.824,146,0.727,147,0.727,148,1.073,149,1.993,150,2.309,151,1.47,152,2.731,153,2.586,154,1.47,155,1.47,156,1.242,157,2.586,158,2.531,159,3.059,160,1.47,161,1.901,162,1.47,163,2.309,164,1.47,165,3.059,166,3.732,167,2.309,168,2.379,169,2.249,170,1.47,171,1.242,172,3.732,173,1.47,174,1.242,175,1.47,176,2.586,177,2.379,178,2.249,179,1.901,180,2.249,181,2.939,182,2.249,183,1.47,184,2.249,185,1.47,186,0.937,187,2.249,188,2.249,189,2.249,190,1.47,191,1.47,192,1.47,193,1.242,194,1.901,195,1.47,196,2.249,197,1.47,198,1.47,199,1.242,200,1.47,201,1.47,202,2.249,203,2.249,204,1.47,205,1.47,206,1.47,207,1.242,208,1.47,209,1.47,210,2.249,211,1.242,212,3.06,213,2.309,214,3.297,215,1.47,216,2.249,217,1.47,218,3.619,219,1.47,220,2.249,221,1.47,222,2.249,223,1.47,224,1.641,225,1.47,226,2.233,227,1.993,228,2.249,229,2.249,230,2.249,231,1.641,232,1.47,233,1.47,234,1.47,235,1.47,236,1.47,237,1.47,238,2.731,239,2.249,240,0.937,241,1.073,242,1.901,243,1.47,244,1.47,245,1.47,246,1.47,247,1.47,248,1.47,249,3.06,250,1.242,251,1.47,252,1.47,253,1.47,254,1.47,255,1.47,256,1.47,257,1.47,258,2.249,259,1.47,260,1.47,261,1.47,262,1.47,263,1.47,264,1.47,265,1.47,266,1.47,267,1.47,268,1.47]],["title/interfaces/Handler.html",[0,0.024,105,0.6]],["body/interfaces/Handler.html",[0,0.04,1,0.568,2,0.736,3,0.568,4,0.495,5,0.495,6,0.568,7,1.052,8,0.648,9,0.365,10,1.349,11,0.648,13,0.588,14,0.05,15,0.708,16,0.903,17,0.568,18,1.349,19,0.949,20,1.052,21,1.349,22,0.495,23,1.189,24,1.478,25,2.151,26,1.901,27,0.833,28,0.813,29,0.833,30,0.612,31,0.833,32,0.714,33,0.833,34,0.813,35,0.833,36,0.813,37,0.833,38,0.512,39,0.833,40,0.813,41,0.833,42,0.568,43,0.833,44,0.813,45,0.833,46,0.612,47,0.833,48,0.813,49,0.833,50,0.813,51,0.833,52,0.813,53,0.833,54,1.052,55,0.833,56,0.736,57,0.708,58,0.648,59,0.943,60,0.648,61,0.813,62,0.927,63,0.927,64,0.927,65,0.927,66,0.813,67,0.927,68,0.813,69,0.736,70,0.708,71,0.833,72,1.192,73,1.192,74,1.341,75,0.943,76,1.349,77,1.229,78,1.349,79,0.943,80,0.943,81,0.943,82,0.361,83,0.495,84,1.391,85,0.949,86,1.229,87,0.736,88,0.833,89,0.648,90,0.648,91,0.949,92,0.648,93,0.943,94,0.993,95,0.903,96,1.518,97,1.192,98,1.391,99,1.607,100,0.736,101,0.943,102,0.833,103,0.78,104,1.607,105,0.827,106,1.181,107,0.612,108,1.369,109,1.114,110,1.391,111,1.349,112,0.428,113,0.943,114,0.833,115,0.495,116,1.036,117,0.568,118,1.052,119,0.648,120,0.648,121,0.495,122,0.833,123,0.833,124,0.365,125,0.02,126,0.029,127,0.02]],["title/classes/HeadersInjector.html",[82,0.306,112,0.519]],["body/classes/HeadersInjector.html",[0,0.04,1,0.566,3,0.566,4,0.494,5,0.494,6,0.566,7,1.05,8,0.646,9,0.364,11,0.646,13,0.586,14,0.05,15,0.707,16,0.901,17,0.566,18,1.345,19,0.947,20,1.05,21,1.345,22,0.494,23,1.189,24,1.478,25,2.15,26,1.9,27,0.83,28,0.811,29,0.83,30,0.611,31,0.83,32,0.713,33,0.83,34,0.811,35,0.83,36,0.811,37,0.83,38,0.511,39,0.83,40,0.811,41,0.83,42,0.566,43,0.83,44,0.811,45,0.83,46,0.611,47,0.83,48,0.811,49,0.83,50,0.811,51,0.83,52,0.811,53,0.83,54,1.05,55,0.83,56,0.733,57,0.707,58,1.08,59,0.94,60,0.646,61,0.811,62,0.925,63,0.925,64,0.925,65,0.925,66,0.811,67,0.925,68,0.947,69,0.733,70,0.707,71,0.83,72,1.189,73,1.189,74,1.339,75,0.94,76,1.345,77,1.226,78,1.345,79,0.94,80,0.94,81,0.94,82,0.36,83,0.494,84,1.389,85,0.947,86,1.226,87,0.733,88,0.83,89,0.646,90,0.646,91,0.947,92,0.646,93,0.94,94,0.992,95,0.901,96,1.516,97,1.189,98,1.389,99,1.389,100,0.733,101,0.94,102,0.83,103,0.779,104,1.605,105,0.707,106,0.646,107,0.611,108,1.368,109,1.114,110,1.516,111,1.716,112,0.611,113,1.716,114,0.83,115,0.494,116,1.034,117,0.566,118,1.05,119,0.646,120,0.646,121,0.494,122,0.83,123,0.83,124,0.364,125,0.02,126,0.029,127,0.02,130,1.605,136,1.065,269,2.345]],["title/interfaces/HeadersObject.html",[0,0.024,107,0.519]],["body/interfaces/HeadersObject.html",[0,0.04,1,0.57,2,0.737,3,0.57,4,0.496,5,0.496,6,0.57,7,1.054,8,0.649,11,0.649,13,0.586,14,0.05,15,0.71,16,0.904,17,0.57,18,1.351,19,0.95,20,1.054,21,1.351,22,0.496,23,1.189,24,1.479,25,2.152,26,1.901,27,0.835,28,0.814,29,0.835,30,0.613,31,0.835,32,0.715,33,0.835,34,0.814,35,0.835,36,0.814,37,0.835,38,0.513,39,0.835,40,0.814,41,0.835,42,0.57,43,0.835,44,0.814,45,0.835,46,0.613,47,0.835,48,0.814,49,0.835,50,0.814,51,0.835,52,0.814,53,0.835,54,1.054,55,0.835,56,0.737,57,0.71,58,0.649,59,0.945,60,0.649,61,0.814,62,0.928,63,0.928,64,0.928,65,0.928,66,0.814,67,0.928,68,0.814,69,0.737,70,0.71,71,0.835,72,1.194,73,1.194,74,1.342,75,0.945,76,1.351,77,1.23,78,1.351,79,0.945,80,0.945,81,0.945,82,0.361,83,0.496,84,1.393,85,0.95,86,1.23,87,0.737,88,0.835,89,0.649,90,0.649,91,0.95,92,0.649,93,0.945,94,0.994,95,0.904,96,1.52,97,1.194,98,1.393,99,1.393,100,0.737,101,0.945,102,0.835,103,0.781,104,1.608,105,0.71,106,0.649,107,0.715,108,1.394,109,1.13,110,1.393,111,1.351,112,0.429,113,0.945,114,0.835,115,0.496,116,1.037,117,0.57,118,1.054,119,0.649,120,0.649,121,0.496,122,0.835,123,0.835,124,0.366,125,0.02,126,0.029,127,0.02,136,1.07,270,2.358,271,2.358]],["title/interfaces/RequestConfig.html",[0,0.024,226,1.685]],["body/interfaces/RequestConfig.html",[0,0.016,1,0.819,2,0.573,3,0.442,4,0.714,5,0.386,7,0.573,8,0.505,9,0.434,10,1.121,11,0.505,13,0.363,14,0.05,15,0.799,16,0.386,19,1.041,20,0.874,22,0.386,23,0.386,24,1.464,28,0.442,30,0.333,32,0.333,34,0.442,36,0.442,38,0.442,40,0.442,42,0.442,44,0.442,46,0.936,48,0.676,50,0.442,52,0.442,57,0.944,60,0.934,70,1.017,74,0.874,82,0.196,83,1.062,85,0.917,86,0.573,89,0.505,90,0.934,91,0.676,94,0.799,95,0.714,100,1.061,103,0.743,105,0.799,106,0.505,107,0.509,108,0.77,109,1.017,112,0.617,115,0.589,116,0.819,117,0.917,118,0.573,121,0.589,124,0.718,125,0.041,126,0.024,127,0.016,129,1.082,131,0.946,132,0.946,133,3.49,134,0.946,139,0.832,141,1.082,142,3.311,143,2.265,144,1.254,145,0.832,146,0.734,147,0.734,148,1.082,149,2.004,150,2.322,151,1.483,152,2.747,153,2.599,154,1.483,155,1.483,156,1.254,157,2.599,158,2.537,159,3.069,160,1.483,161,1.914,162,1.483,163,2.322,164,1.483,165,3.069,166,3.743,167,2.322,168,2.386,169,2.265,170,1.483,171,1.254,172,3.743,173,1.483,174,1.254,175,1.483,176,2.599,177,2.386,178,2.265,179,1.914,180,2.265,181,2.95,182,2.265,183,1.483,184,2.265,185,1.483,186,0.946,187,2.265,188,2.265,189,2.265,190,1.483,191,1.483,192,1.483,193,1.254,194,1.914,195,1.483,196,2.265,197,1.483,198,1.483,199,1.254,200,1.483,201,1.483,202,2.265,203,2.265,204,1.483,205,1.483,206,1.483,207,1.254,208,1.483,209,1.483,210,2.265,211,1.254,212,3.074,213,2.322,214,3.311,215,1.483,216,2.265,217,1.483,218,3.63,219,1.483,220,2.265,221,1.483,222,2.265,223,1.483,224,1.653,225,1.483,226,2.416,227,2.004,228,2.265,229,2.265,230,2.265,231,1.653,232,1.483,233,1.483,234,1.483,235,1.483,236,1.483,237,1.483,238,2.747,239,2.265,240,0.946,241,1.082,242,1.914,243,1.483,244,1.483,245,1.483,246,1.483,247,1.483,248,1.483,249,3.074,250,1.254,251,1.483,252,1.483,253,1.483,254,1.483,255,1.483,256,1.483,257,1.483,258,2.265,259,1.483,260,1.483,261,1.483,262,1.483,263,1.483,264,1.483,265,1.483,266,1.483,267,1.483,268,1.483]],["title/interfaces/RestGuard.html",[0,0.024,92,0.786]],["body/interfaces/RestGuard.html",[0,0.04,1,0.558,2,0.722,3,0.558,4,0.486,5,0.486,6,0.558,7,1.039,8,0.636,9,0.359,11,0.636,13,0.587,14,0.05,15,0.699,16,0.895,17,0.558,18,1.331,19,1.088,20,1.039,21,1.331,22,0.486,23,1.188,24,1.474,25,2.145,26,1.895,27,0.818,28,0.802,29,0.818,30,0.604,31,0.818,32,0.707,33,0.818,34,0.802,35,0.818,36,0.802,37,0.818,38,0.507,39,0.818,40,0.802,41,0.818,42,0.558,43,0.818,44,0.802,45,0.818,46,0.604,47,0.818,48,0.802,49,0.818,50,0.802,51,0.818,52,0.802,53,0.818,54,1.039,55,0.818,56,0.722,57,0.819,58,1.071,59,0.926,60,0.636,61,0.802,62,0.915,63,0.915,64,0.915,65,0.915,66,0.802,67,0.915,68,0.939,69,0.722,70,0.699,71,0.818,72,1.176,73,1.176,74,1.33,75,0.926,76,1.331,77,1.216,78,1.331,79,0.926,80,0.926,81,0.926,82,0.356,83,0.486,84,1.377,85,0.939,86,1.216,87,1.039,88,1.176,89,0.915,90,0.915,91,1.027,92,0.915,93,1.331,94,1.017,95,0.948,96,1.506,97,1.176,98,1.377,99,1.377,100,0.722,101,0.926,102,0.818,103,0.773,104,1.595,105,0.699,106,0.636,107,0.604,108,1.362,109,1.111,110,1.377,111,1.331,112,0.42,113,0.926,114,0.818,115,0.486,116,1.027,117,0.558,118,1.039,119,0.636,120,0.636,121,0.486,122,0.818,123,0.818,124,0.359,125,0.02,126,0.028,127,0.02,128,1.049,136,1.049,138,1.365,139,1.049,250,2.274,272,2.31,273,2.31]],["title/modules/RestModule.html",[274,1.952,275,1.472]],["body/modules/RestModule.html",[0,0.029,3,0.824,4,0.718,5,0.718,13,0.365,14,0.05,15,1.051,17,0.824,22,0.718,23,0.718,30,0.864,38,0.619,58,0.94,68,0.824,82,0.365,94,0.718,103,0.787,109,0.718,112,0.62,115,0.911,120,1.308,121,1,124,0.737,125,0.029,126,0.037,127,0.029,128,1.549,134,1.761,136,1.549,138,2.016,139,1.549,141,2.016,145,2.156,146,1.903,147,1.903,148,2.016,158,1.761,240,1.761,275,2.452,276,2.335,277,2.335,278,2.961,279,3.503,280,3.412,281,2.951,282,3.412,283,2.335,284,3.846,285,3.251,286,2.335,287,3.846,288,2.335,289,2.556,290,3.705,291,3.705,292,3.419,293,3.605,294,2.335]],["title/interfaces/RootConfiguration.html",[0,0.024,281,1.685]],["body/interfaces/RootConfiguration.html",[0,0.028,2,1.034,3,0.799,4,0.696,5,0.696,9,0.514,10,1.7,13,0.529,14,0.05,15,1.039,17,0.799,22,0.696,23,0.696,30,0.851,38,0.681,82,0.354,94,0.985,103,0.898,109,0.985,112,0.602,115,1.039,120,1.439,121,1.1,124,0.811,125,0.028,126,0.036,127,0.028,128,2.442,134,1.708,141,1.955,145,2.125,146,1.876,147,1.876,148,1.955,158,1.708,275,2.189,277,2.264,278,2.264,279,2.679,281,2.766,284,3.435,285,3.205,286,2.264,287,3.791,288,2.264,289,2.506,290,3.682,291,3.682,292,3.38,293,3.576,294,2.264]],["title/coverage.html",[295,3.115]],["body/coverage.html",[0,0.044,1,0.643,5,0.561,6,1.352,13,0.285,14,0.049,16,0.561,28,0.643,30,0.668,32,0.668,34,0.643,36,0.643,38,0.479,40,0.643,42,0.643,44,0.643,46,0.668,48,0.643,50,0.643,52,0.643,54,0.833,61,0.643,62,0.734,63,0.734,64,0.734,65,0.734,66,0.643,67,0.734,82,0.393,83,1.15,85,0.643,92,0.734,105,0.561,107,0.484,112,0.484,117,0.643,119,0.734,124,0.414,125,0.023,126,0.031,127,0.023,129,1.574,131,2.647,132,2.647,145,1.209,146,1.067,147,1.067,168,1.375,177,1.375,186,1.896,224,1.574,226,1.574,227,2.483,241,1.574,277,1.823,281,1.574,295,2.157,296,2.157,297,2.664,298,2.664,299,2.157,300,5.77,301,5.746,302,2.157,303,2.157,304,2.157,305,2.157,306,2.157,307,2.157,308,2.157,309,2.157,310,2.157,311,2.157,312,1.823,313,3.672,314,2.157,315,4.152,316,5.653,317,2.664,318,3.668,319,4.202,320,2.664,321,2.664,322,2.664,323,2.664,324,2.157,325,2.157,326,2.664,327,2.664]],["title/dependencies.html",[328,1.947,329,2.02]],["body/dependencies.html",[14,0.049,17,0.998,125,0.035,126,0.042,127,0.035,144,2.827,329,2.441,330,4.131,331,5.607,332,4.131,333,4.131,334,4.131,335,4.862,336,4.862,337,4.131,338,4.131,339,4.131,340,4.131,341,4.131,342,4.131,343,4.131,344,4.131,345,4.131,346,4.131,347,4.131]],["title/miscellaneous/enumerations.html",[348,0.851,349,2.768]],["body/miscellaneous/enumerations.html",[6,1.002,9,0.644,14,0.049,56,1.297,57,0.873,58,1.142,60,1.342,61,1.177,62,1.342,63,1.342,64,1.342,65,1.342,66,1.177,67,1.342,125,0.035,126,0.042,127,0.035,283,3.84,348,1.468,349,3.358,350,2.838]],["title/miscellaneous/functions.html",[348,0.851,351,2.34]],["body/miscellaneous/functions.html",[4,0.863,9,0.487,13,0.336,14,0.049,19,1.102,32,0.745,38,0.631,46,0.83,57,0.863,68,1.336,70,0.961,95,0.863,124,0.708,125,0.027,126,0.035,127,0.027,128,2.498,131,1.619,132,2.708,138,3.252,139,2.512,149,1.853,150,2.147,153,3.437,156,2.147,159,2.805,165,3.525,167,2.147,168,2.356,177,2.115,186,2.498,194,2.805,211,2.147,224,2.421,227,3.043,231,2.859,241,2.421,242,3.312,299,2.54,302,2.54,303,2.54,304,3.318,305,3.696,306,2.54,307,2.54,308,2.54,309,2.54,310,2.54,311,3.318,312,3.124,314,3.318,324,2.54,325,3.318,348,1.111,351,2.147,352,3.136,353,4.17,354,3.136,355,3.136,356,3.136,357,3.136,358,3.136,359,3.136,360,3.136,361,3.136,362,4.098,363,3.136,364,4.564,365,3.136,366,3.136,367,3.136,368,3.136,369,3.136,370,3.136,371,3.136]],["title/index.html",[9,0.373,372,1.947,373,1.646]],["body/index.html",[0,0.014,8,0.698,11,0.977,13,0.272,14,0.05,15,1.091,16,0.659,17,0.989,19,0.857,22,0.34,23,1.066,24,0.445,32,0.806,38,0.558,46,0.744,56,0.793,57,0.862,58,1.179,61,0.39,66,0.39,68,0.39,69,0.505,70,1.032,73,0.572,77,0.505,82,0.555,83,0.933,87,0.505,88,0.898,89,0.977,90,1.436,91,1.127,92,0.863,94,0.534,95,1.018,103,0.294,105,0.747,106,0.445,107,0.294,108,0.698,109,0.96,116,0.39,119,0.977,120,0.698,121,0.812,122,0.572,123,0.572,124,0.665,125,0.014,126,0.022,127,0.014,134,2.289,136,1.422,139,0.733,146,1.016,147,1.255,157,2.144,158,2.497,161,2.429,163,2.429,168,0.833,171,3.122,174,3.122,176,2.429,177,0.833,179,1.105,181,2.144,186,2.822,193,2.144,199,1.105,207,1.736,213,1.736,231,2.097,240,0.833,274,2.802,275,2.21,278,1.105,285,3.122,286,1.105,288,2.429,289,2.279,290,2.429,291,2.144,292,1.736,293,2.429,312,2.429,328,2.054,329,0.954,351,1.105,373,1.105,374,4.836,375,2.536,376,1.614,377,1.614,378,1.614,379,1.614,380,1.614,381,1.614,382,1.614,383,1.307,384,1.614,385,1.614,386,1.614,387,1.614,388,1.614,389,1.614,390,1.614,391,1.307,392,1.614,393,4.56,394,1.614,395,4.905,396,1.614,397,3.132,398,1.614,399,1.614,400,2.536,401,1.307,402,3.549,403,1.614,404,4.094,405,3.549,406,1.614,407,4.56,408,1.614,409,2.536,410,1.614,411,1.614,412,1.614,413,1.614,414,2.536,415,1.614,416,2.536,417,1.614,418,1.614,419,1.614,420,1.614,421,1.614,422,1.614,423,1.614,424,4.56,425,3.132,426,1.614,427,1.614,428,1.614,429,2.536,430,1.614,431,1.614,432,1.614,433,1.614,434,1.614,435,1.614,436,1.614,437,3.132,438,1.614,439,2.536,440,2.536,441,1.614,442,1.614,443,1.614,444,3.132,445,1.614,446,1.614,447,1.307,448,1.614,449,2.536,450,1.614,451,1.614,452,1.614,453,1.614,454,1.614,455,1.614,456,1.614,457,1.614,458,1.614,459,1.614,460,1.614,461,1.614,462,5.271,463,1.614,464,3.132,465,1.614,466,1.614,467,1.614,468,1.614,469,1.614,470,1.614,471,1.614,472,1.614,473,1.614,474,3.549,475,2.536,476,2.536,477,1.614,478,1.614,479,1.614,480,1.614,481,1.614,482,2.536,483,1.614,484,1.614,485,1.614,486,1.614,487,1.614,488,2.536,489,2.536,490,1.614,491,1.614,492,1.614,493,1.614,494,2.536,495,1.614,496,1.614,497,1.614,498,1.614,499,1.614,500,1.614,501,1.614,502,1.614,503,1.614,504,1.614,505,1.614,506,1.614,507,1.614,508,1.614,509,1.614,510,1.614,511,1.614,512,1.614,513,1.614,514,1.614,515,3.132,516,1.614,517,2.536,518,1.614,519,1.614,520,1.614,521,1.614,522,1.614,523,3.132,524,1.614,525,2.536,526,1.614,527,1.614,528,1.614,529,4.094,530,1.614,531,1.614,532,1.614,533,1.614,534,2.536,535,2.536,536,2.536,537,1.614,538,1.614,539,2.054,540,1.614,541,1.614,542,1.614,543,1.614,544,1.614,545,1.614,546,1.614,547,1.614,548,1.614,549,2.536,550,2.536,551,1.614,552,1.614,553,1.614,554,1.614,555,1.614,556,1.614,557,1.614,558,2.536,559,3.132,560,1.614,561,1.614,562,1.614,563,1.614,564,1.614,565,1.614,566,1.614,567,1.614,568,1.614,569,1.614,570,1.614,571,1.614,572,1.614,573,1.614,574,1.105,575,1.307]],["title/license.html",[372,1.947,373,1.646,574,1.646]],["body/license.html",[14,0.039,87,1.44,125,0.032,126,0.039,127,0.032,296,3.055,447,3.055,476,3.055,539,3.055,574,2.582,575,3.055,576,4.97,577,3.773,578,3.773,579,3.773,580,4.605,581,3.773,582,3.773,583,3.773,584,3.773,585,3.773,586,3.773,587,4.605,588,5.559,589,3.773,590,3.773,591,3.773,592,4.97,593,3.773,594,4.605,595,3.773,596,3.773,597,3.773,598,3.773,599,3.773,600,3.773,601,3.773,602,3.773,603,3.773,604,4.605,605,3.773,606,3.773,607,3.773,608,3.773,609,3.773,610,3.773,611,3.773,612,4.605,613,4.605,614,3.773,615,3.773,616,3.773,617,3.773,618,3.773,619,3.773,620,3.773,621,3.773,622,3.773,623,3.773,624,3.773,625,3.773,626,3.773,627,3.773,628,3.773,629,3.773,630,3.773,631,3.773,632,3.773,633,3.773,634,3.773,635,3.773,636,3.773,637,3.773,638,3.773,639,3.055,640,3.773,641,3.773]],["title/modules.html",[276,2.633]],["body/modules.html",[14,0.043,125,0.038,126,0.043,127,0.038,275,2.293,276,3.041,642,4.443,643,4.443,644,4.443]],["title/overview.html",[645,3.115]],["body/overview.html",[2,1.353,14,0.043,125,0.037,126,0.043,127,0.037,130,2.962,274,3.42,289,2.557,294,2.962,329,2.557,383,3.505,391,3.505,401,3.505,639,3.505,645,3.505,646,4.328,647,4.328,648,4.996,649,4.328,650,4.328]],["title/miscellaneous/typealiases.html",[348,0.851,651,3.418]],["body/miscellaneous/typealiases.html",[6,0.929,9,0.597,13,0.537,14,0.046,68,1.125,69,1.203,70,0.81,71,1.362,72,1.65,77,1.629,82,0.412,83,1.097,84,1.845,91,1.125,95,0.81,96,1.775,97,1.775,98,1.845,99,1.65,102,1.65,103,0.847,104,1.775,107,0.699,110,1.65,114,1.65,115,0.981,116,1.125,125,0.033,126,0.04,127,0.033,131,1.985,132,2.405,149,2.753,348,1.362,350,3.884,353,3.114,652,3.846]],["title/miscellaneous/variables.html",[348,0.851,653,2.768]],["body/miscellaneous/variables.html",[6,0.723,9,0.465,13,0.594,14,0.049,16,0.837,26,1.965,27,1.06,28,0.96,29,1.06,30,0.864,31,1.06,32,0.723,33,1.06,34,0.96,35,1.06,36,0.96,37,1.06,38,0.518,39,1.06,40,0.96,41,1.06,42,0.96,43,1.06,44,0.96,45,1.06,46,0.723,47,1.06,48,0.96,49,1.06,50,0.96,51,1.06,52,0.96,53,1.06,54,1.243,55,1.06,61,0.96,62,1.095,63,1.095,64,1.095,65,1.095,66,0.96,67,1.095,85,1.148,125,0.026,126,0.034,127,0.026,145,1.804,146,1.592,147,1.592,240,2.944,283,3.903,315,2.424,318,2.424,348,1.06,350,3.798,653,2.424,654,4.752,655,5.267,656,2.994,657,2.994,658,2.994,659,2.994,660,2.994,661,2.994,662,2.994,663,2.994,664,2.994,665,2.994,666,2.994,667,2.994]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":300,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":301,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":383,"title":{},"body":{"index.html":{},"overview.html":{}}}],["1/2",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":391,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.5.4",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["2018",{"_index":578,"title":{},"body":{"license.html":{}}}],["3",{"_index":420,"title":{},"body":{"index.html":{}}}],["3.1",{"_index":423,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":435,"title":{},"body":{"index.html":{}}}],["3.2",{"_index":443,"title":{},"body":{"index.html":{}}}],["3.3",{"_index":461,"title":{},"body":{"index.html":{}}}],["3.3.1",{"_index":463,"title":{},"body":{"index.html":{}}}],["3.3.1.1",{"_index":465,"title":{},"body":{"index.html":{}}}],["3.3.1.2",{"_index":467,"title":{},"body":{"index.html":{}}}],["3.3.1.3",{"_index":468,"title":{},"body":{"index.html":{}}}],["3.3.2",{"_index":469,"title":{},"body":{"index.html":{}}}],["3.3.3",{"_index":470,"title":{},"body":{"index.html":{}}}],["3.3.4",{"_index":471,"title":{},"body":{"index.html":{}}}],["3.4",{"_index":472,"title":{},"body":{"index.html":{}}}],["3.4.1",{"_index":477,"title":{},"body":{"index.html":{}}}],["3.4.1.1",{"_index":478,"title":{},"body":{"index.html":{}}}],["3.4.1.2",{"_index":491,"title":{},"body":{"index.html":{}}}],["3.4.1.3",{"_index":498,"title":{},"body":{"index.html":{}}}],["3.4.2",{"_index":499,"title":{},"body":{"index.html":{}}}],["3.4.3",{"_index":500,"title":{},"body":{"index.html":{}}}],["3.4.4",{"_index":501,"title":{},"body":{"index.html":{}}}],["4",{"_index":548,"title":{},"body":{"index.html":{}}}],["4.5",{"_index":502,"title":{},"body":{"index.html":{}}}],["4.5.1",{"_index":503,"title":{},"body":{"index.html":{}}}],["4.5.2",{"_index":505,"title":{},"body":{"index.html":{}}}],["4.5.2.1",{"_index":506,"title":{},"body":{"index.html":{}}}],["4.5.2.2",{"_index":507,"title":{},"body":{"index.html":{}}}],["4.5.2.3",{"_index":508,"title":{},"body":{"index.html":{}}}],["4.5.3",{"_index":509,"title":{},"body":{"index.html":{}}}],["4.5.4",{"_index":510,"title":{},"body":{"index.html":{}}}],["4.5.5",{"_index":511,"title":{},"body":{"index.html":{}}}],["4.6",{"_index":512,"title":{},"body":{"index.html":{}}}],["4.7",{"_index":513,"title":{},"body":{"index.html":{}}}],["4.8",{"_index":528,"title":{},"body":{"index.html":{}}}],["4.8.1",{"_index":533,"title":{},"body":{"index.html":{}}}],["4.8.2",{"_index":538,"title":{},"body":{"index.html":{}}}],["4.8.3",{"_index":541,"title":{},"body":{"index.html":{}}}],["4.8.4",{"_index":542,"title":{},"body":{"index.html":{}}}],["4.8.5",{"_index":545,"title":{},"body":{"index.html":{}}}],["5",{"_index":562,"title":{},"body":{"index.html":{}}}],["50",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":573,"title":{},"body":{"index.html":{}}}],["6.5.2",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":650,"title":{},"body":{"overview.html":{}}}],["8.2.3",{"_index":331,"title":{},"body":{"dependencies.html":{}}}],["_____________________________________________________________________________",{"_index":166,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers",{"_index":178,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers[key",{"_index":185,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["above",{"_index":611,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":111,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["accepts",{"_index":493,"title":{},"body":{"index.html":{}}}],["action",{"_index":635,"title":{},"body":{"license.html":{}}}],["add",{"_index":386,"title":{},"body":{"index.html":{}}}],["ahin",{"_index":565,"title":{},"body":{"index.html":{}}}],["ali",{"_index":564,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":652,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allguards",{"_index":243,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["allguards.reduce((prev",{"_index":246,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["and/or",{"_index":602,"title":{},"body":{"license.html":{}}}],["angular",{"_index":375,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":332,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":22,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["angular/compiler",{"_index":333,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":17,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":334,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":335,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["annotations",{"_index":378,"title":{},"body":{"index.html":{}}}],["aot",{"_index":549,"title":{},"body":{"index.html":{}}}],["api",{"_index":421,"title":{},"body":{"index.html":{}}}],["app",{"_index":411,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":394,"title":{},"body":{"index.html":{}}}],["append",{"_index":196,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["appmodule",{"_index":402,"title":{},"body":{"index.html":{}}}],["args",{"_index":86,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["args[bodyparamindex",{"_index":173,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["args[index",{"_index":198,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["arising",{"_index":638,"title":{},"body":{"license.html":{}}}],["array",{"_index":104,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["associated",{"_index":589,"title":{},"body":{"license.html":{}}}],["async",{"_index":161,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["authors",{"_index":629,"title":{},"body":{"license.html":{}}}],["available",{"_index":643,"title":{},"body":{"modules.html":{}}}],["await",{"_index":181,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base",{"_index":174,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base_handlers",{"_index":558,"title":{},"body":{"index.html":{}}}],["base_headers",{"_index":146,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base_url",{"_index":30,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_with_credentials",{"_index":147,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["basehandler",{"_index":559,"title":{},"body":{"index.html":{}}}],["baseheaders",{"_index":121,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["baseurl",{"_index":120,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["basic",{"_index":392,"title":{},"body":{"index.html":{}}}],["before",{"_index":473,"title":{},"body":{"index.html":{}}}],["best",{"_index":441,"title":{},"body":{"index.html":{}}}],["bodies",{"_index":36,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":168,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bodyparamindex",{"_index":169,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["bootstrap",{"_index":647,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":644,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["builder",{"_index":445,"title":{},"body":{"index.html":{}}}],["builder.ts",{"_index":132,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["builder.ts:11",{"_index":137,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builder.ts:13",{"_index":140,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builds",{"_index":552,"title":{},"body":{"index.html":{}}}],["c",{"_index":577,"title":{},"body":{"license.html":{}}}],["cache.service",{"_index":524,"title":{},"body":{"index.html":{}}}],["call",{"_index":515,"title":{},"body":{"index.html":{}}}],["called",{"_index":517,"title":{},"body":{"index.html":{}}}],["calling",{"_index":514,"title":{},"body":{"index.html":{}}}],["calls",{"_index":429,"title":{},"body":{"index.html":{}}}],["cansend",{"_index":250,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["cansend(req",{"_index":486,"title":{},"body":{"index.html":{}}}],["cansend(request",{"_index":93,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["case",{"_index":238,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch",{"_index":214,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["caution",{"_index":382,"title":{},"body":{"index.html":{}}}],["chainhandlers",{"_index":224,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["chainhandlers(handlers",{"_index":363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["charge",{"_index":584,"title":{},"body":{"license.html":{}}}],["check",{"_index":475,"title":{},"body":{"index.html":{}}}],["claim",{"_index":632,"title":{},"body":{"license.html":{}}}],["class",{"_index":82,"title":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["class/interface",{"_index":75,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["classes",{"_index":130,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"overview.html":{}}}],["classof",{"_index":84,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["client",{"_index":186,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["client(undefined",{"_index":365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client_guards",{"_index":34,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_handlers",{"_index":40,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_headers",{"_index":48,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_with_credentials",{"_index":52,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientconstructor",{"_index":1,"title":{"interfaces/ClientConstructor.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clienthandlers",{"_index":220,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientheaders",{"_index":187,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientinstance",{"_index":117,"title":{"interfaces/ClientInstance.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clientoptions",{"_index":119,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["code",{"_index":518,"title":{},"body":{"index.html":{}}}],["completely",{"_index":570,"title":{},"body":{"index.html":{}}}],["component",{"_index":409,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":610,"title":{},"body":{"license.html":{}}}],["config",{"_index":231,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["configure",{"_index":163,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["configured",{"_index":433,"title":{},"body":{"index.html":{}}}],["configures",{"_index":436,"title":{},"body":{"index.html":{}}}],["connection",{"_index":640,"title":{},"body":{"license.html":{}}}],["const",{"_index":24,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["construction",{"_index":522,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":11,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["constructor(injector",{"_index":553,"title":{},"body":{"index.html":{}}}],["constructor(private",{"_index":414,"title":{},"body":{"index.html":{}}}],["constructor(request",{"_index":135,"title":{},"body":{"classes/GuardForbid.html":{}}}],["context",{"_index":242,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["context)[next](request",{"_index":253,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next",{"_index":263,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next).cansend(request",{"_index":251,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next]).bind(context",{"_index":262,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next][error_handler",{"_index":261,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["contract",{"_index":636,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":563,"title":{},"body":{"index.html":{}}}],["cookies",{"_index":532,"title":{},"body":{"index.html":{}}}],["copies",{"_index":604,"title":{},"body":{"license.html":{}}}],["copy",{"_index":587,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":576,"title":{},"body":{"license.html":{}}}],["core",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":295,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":204,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["created",{"_index":519,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":199,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["credentials.decorator.ts",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":101,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["damages",{"_index":633,"title":{},"body":{"license.html":{}}}],["deal",{"_index":591,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":641,"title":{},"body":{"license.html":{}}}],["declaration",{"_index":464,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":401,"title":{},"body":{"index.html":{},"overview.html":{}}}],["declarative",{"_index":377,"title":{},"body":{"index.html":{}}}],["declare",{"_index":479,"title":{},"body":{"index.html":{}}}],["declared",{"_index":437,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":424,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":444,"title":{},"body":{"index.html":{}}}],["default",{"_index":240,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":88,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["defined",{"_index":136,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"index.html":{}}}],["defines",{"_index":530,"title":{},"body":{"index.html":{}}}],["defining",{"_index":434,"title":{},"body":{"index.html":{}}}],["delete",{"_index":63,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delete(path",{"_index":455,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":329,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":272,"title":{},"body":{"interfaces/RestGuard.html":{}}}],["descriptor",{"_index":152,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["descriptor.value",{"_index":160,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["determined",{"_index":462,"title":{},"body":{"index.html":{}}}],["developed",{"_index":547,"title":{},"body":{"index.html":{}}}],["development",{"_index":381,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":600,"title":{},"body":{"license.html":{}}}],["docs",{"_index":422,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":296,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":480,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":450,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":446,"title":{},"body":{"index.html":{}}}],["enum",{"_index":59,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["enumerations",{"_index":349,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":133,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["error_handler",{"_index":42,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorhandler",{"_index":305,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["errorhandlers",{"_index":504,"title":{},"body":{"index.html":{}}}],["especially",{"_index":536,"title":{},"body":{"index.html":{}}}],["etc",{"_index":555,"title":{},"body":{"index.html":{}}}],["event",{"_index":628,"title":{},"body":{"license.html":{}}}],["example",{"_index":393,"title":{},"body":{"index.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["exports",{"_index":294,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["express",{"_index":619,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["false",{"_index":213,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["files",{"_index":590,"title":{},"body":{"license.html":{}}}],["first",{"_index":494,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":624,"title":{},"body":{"license.html":{}}}],["following",{"_index":609,"title":{},"body":{"license.html":{}}}],["forbad",{"_index":155,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["forbidden",{"_index":516,"title":{},"body":{"index.html":{}}}],["forget",{"_index":481,"title":{},"body":{"index.html":{}}}],["fork",{"_index":568,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":279,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["forroot(undefined",{"_index":280,"title":{},"body":{"modules/RestModule.html":{}}}],["free",{"_index":583,"title":{},"body":{"license.html":{}}}],["full",{"_index":164,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["function",{"_index":83,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(this",{"_index":162,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["functionality",{"_index":428,"title":{},"body":{"index.html":{}}}],["functions",{"_index":351,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["functionsof",{"_index":77,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":607,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":452,"title":{},"body":{"index.html":{}}}],["getting",{"_index":372,"title":{"index.html":{},"license.html":{}},"body":{}}],["globalhandlers",{"_index":216,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["going",{"_index":448,"title":{},"body":{"index.html":{}}}],["granted",{"_index":582,"title":{},"body":{"license.html":{}}}],["graph",{"_index":642,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":91,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["guardforbid",{"_index":129,"title":{"classes/GuardForbid.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["guardforbid(request",{"_index":215,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardfunction",{"_index":96,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guardfunctions",{"_index":367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardfunctionsof",{"_index":97,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guards",{"_index":32,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["guards([posttodoguard",{"_index":488,"title":{},"body":{"index.html":{}}}],["guards(guardfunctions",{"_index":366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardsresult",{"_index":210,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardtype",{"_index":98,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handle",{"_index":106,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["handler",{"_index":105,"title":{"interfaces/Handler.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["handler(original",{"_index":268,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handler.decorator.ts",{"_index":304,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlerfunction",{"_index":99,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlerfunctionsof",{"_index":102,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":38,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["handlers(handlers",{"_index":368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers.reduce((prev",{"_index":259,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handlersof",{"_index":103,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["head",{"_index":65,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["head(path",{"_index":458,"title":{},"body":{"index.html":{}}}],["header",{"_index":177,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["header(name",{"_index":369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["header[key",{"_index":192,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headerinjector",{"_index":466,"title":{},"body":{"index.html":{}}}],["headerinjectorresponse",{"_index":110,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headerinjectortype",{"_index":114,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":46,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["headers(headers",{"_index":370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headers.append(key",{"_index":184,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headers[method](name",{"_index":197,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headersclientparam",{"_index":116,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersinjector",{"_index":112,"title":{"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["headersobject",{"_index":107,"title":{"interfaces/HeadersObject.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersparam",{"_index":115,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hello",{"_index":412,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":581,"title":{},"body":{"license.html":{}}}],["holders",{"_index":630,"title":{},"body":{"license.html":{}}}],["http",{"_index":56,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["http://localhost:3000",{"_index":400,"title":{},"body":{"index.html":{}}}],["http_client",{"_index":28,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpclient",{"_index":18,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpclientmodule",{"_index":287,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["httperrorresponse",{"_index":21,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpheaders",{"_index":142,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httprequest",{"_index":19,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["httprequest(method",{"_index":239,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpresponse",{"_index":20,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["identifier",{"_index":297,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":483,"title":{},"body":{"index.html":{}}}],["implied",{"_index":620,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["imports",{"_index":288,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["included",{"_index":614,"title":{},"body":{"license.html":{}}}],["including",{"_index":594,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":270,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["inject",{"_index":113,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["injectable",{"_index":89,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["injectable.handle.bind(injectable",{"_index":265,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectable.handle[error_handler",{"_index":264,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectiontoken('base_headers",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('base_with_credentials",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_base_url",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_handlers",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":16,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inserttodo(@body",{"_index":406,"title":{},"body":{"index.html":{}}}],["inside",{"_index":438,"title":{},"body":{"index.html":{}}}],["install",{"_index":389,"title":{},"body":{"index.html":{}}}],["installation",{"_index":384,"title":{},"body":{"index.html":{}}}],["instance",{"_index":179,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["instance.inject",{"_index":182,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["instanceof",{"_index":254,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["interface/class",{"_index":72,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["js",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["jsonp",{"_index":67,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["jsonp(path",{"_index":459,"title":{},"body":{"index.html":{}}}],["key",{"_index":108,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["keyof",{"_index":79,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["kind",{"_index":618,"title":{},"body":{"license.html":{}}}],["legend",{"_index":646,"title":{},"body":{"overview.html":{}}}],["liability",{"_index":634,"title":{},"body":{"license.html":{}}}],["liable",{"_index":631,"title":{},"body":{"license.html":{}}}],["license",{"_index":574,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":595,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":550,"title":{},"body":{"index.html":{}}}],["limited",{"_index":621,"title":{},"body":{"license.html":{}}}],["literal",{"_index":12,"title":{},"body":{"interfaces/ClientConstructor.html":{}}}],["make",{"_index":416,"title":{},"body":{"index.html":{}}}],["makes",{"_index":431,"title":{},"body":{"index.html":{}}}],["mark",{"_index":520,"title":{},"body":{"index.html":{}}}],["marked",{"_index":430,"title":{},"body":{"index.html":{}}}],["marks",{"_index":425,"title":{},"body":{"index.html":{}}}],["matching",{"_index":126,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":623,"title":{},"body":{"license.html":{}}}],["merge",{"_index":598,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":70,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["methodhandlers",{"_index":222,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodheaders",{"_index":189,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodname",{"_index":159,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":58,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["miscellaneous",{"_index":348,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":575,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":597,"title":{},"body":{"license.html":{}}}],["module",{"_index":274,"title":{"modules/RestModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":276,"title":{"modules.html":{}},"body":{"modules/RestModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":284,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["more",{"_index":379,"title":{},"body":{"index.html":{}}}],["multi",{"_index":292,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["name",{"_index":139,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":71,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["never}[keyof",{"_index":81,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["new",{"_index":85,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":218,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next(request",{"_index":252,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next.prototype",{"_index":249,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next[error_handler",{"_index":266,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ngmodule",{"_index":285,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["noninfringement",{"_index":627,"title":{},"body":{"license.html":{}}}],["notice",{"_index":612,"title":{},"body":{"license.html":{}}}],["now",{"_index":572,"title":{},"body":{"index.html":{}}}],["npm",{"_index":388,"title":{},"body":{"index.html":{}}}],["null",{"_index":171,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["number",{"_index":118,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["object",{"_index":8,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["object.entries((target.constructor[param_headers",{"_index":195,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(_headers",{"_index":183,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(header",{"_index":191,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["observable",{"_index":143,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["obtaining",{"_index":586,"title":{},"body":{"license.html":{}}}],["on_client_ready",{"_index":54,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["onclientready",{"_index":312,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onready",{"_index":439,"title":{},"body":{"index.html":{}}}],["option",{"_index":529,"title":{},"body":{"index.html":{}}}],["optional",{"_index":128,"title":{},"body":{"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":66,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options(path",{"_index":457,"title":{},"body":{"index.html":{}}}],["original",{"_index":100,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["otherservices",{"_index":554,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":447,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":639,"title":{},"body":{"license.html":{},"overview.html":{}}}],["outgoing",{"_index":531,"title":{},"body":{"index.html":{}}}],["overview",{"_index":645,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":78,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["package",{"_index":328,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":495,"title":{},"body":{"index.html":{}}}],["param_headers",{"_index":44,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":193,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["parameterdecorator",{"_index":362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":138,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":625,"title":{},"body":{"license.html":{}}}],["passed",{"_index":248,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["patch",{"_index":64,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["patch(path",{"_index":456,"title":{},"body":{"index.html":{}}}],["path",{"_index":157,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["permission",{"_index":580,"title":{},"body":{"license.html":{}}}],["permit",{"_index":605,"title":{},"body":{"license.html":{}}}],["person",{"_index":585,"title":{},"body":{"license.html":{}}}],["persons",{"_index":606,"title":{},"body":{"license.html":{}}}],["portions",{"_index":616,"title":{},"body":{"license.html":{}}}],["post",{"_index":61,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post('todos",{"_index":405,"title":{},"body":{"index.html":{}}}],["post(path",{"_index":453,"title":{},"body":{"index.html":{}}}],["posttodo(@body",{"_index":460,"title":{},"body":{"index.html":{}}}],["posttodo(todo",{"_index":418,"title":{},"body":{"index.html":{}}}],["posttodoguard",{"_index":482,"title":{},"body":{"index.html":{}}}],["posttodoguard(req",{"_index":496,"title":{},"body":{"index.html":{}}}],["posttodos(todo",{"_index":489,"title":{},"body":{"index.html":{}}}],["prev",{"_index":219,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev.then(passed",{"_index":247,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev[method](res",{"_index":267,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["private",{"_index":525,"title":{},"body":{"index.html":{}}}],["process",{"_index":208,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["projects/.../body.decorator.ts",{"_index":352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../client.decorator.ts",{"_index":354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../error",{"_index":355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../guards.decorator.ts",{"_index":356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../handlers.decorator.ts",{"_index":357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../header.decorator.ts",{"_index":358,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../headers.decorator.ts",{"_index":359,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../on",{"_index":360,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../request",{"_index":353,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../request.decorator.ts",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../tokens.ts",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":350,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../with",{"_index":361,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/body.decorator.ts",{"_index":299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/client.decorator.ts",{"_index":302,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/error",{"_index":303,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/guards.decorator.ts",{"_index":306,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/handlers.decorator.ts",{"_index":307,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/header.decorator.ts",{"_index":308,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/headers.decorator.ts",{"_index":309,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/on",{"_index":310,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/request",{"_index":131,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/rest/src/lib/request.decorator.ts",{"_index":315,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/rest.module.ts",{"_index":277,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["projects/rest/src/lib/rest.module.ts:29",{"_index":282,"title":{},"body":{"modules/RestModule.html":{}}}],["projects/rest/src/lib/tokens.ts",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts",{"_index":6,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts:51",{"_index":273,"title":{},"body":{"interfaces/RestGuard.html":{}}}],["projects/rest/src/lib/types.ts:65",{"_index":271,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["projects/rest/src/lib/types.ts:72",{"_index":269,"title":{},"body":{"classes/HeadersInjector.html":{}}}],["projects/rest/src/lib/with",{"_index":324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":95,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["promise.resolve(true",{"_index":256,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["promiselike",{"_index":260,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"interfaces/RequestConfig.html":{},"interfaces/RootConfiguration.html":{}}}],["propertydescriptor",{"_index":153,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":151,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["provide",{"_index":290,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["provided",{"_index":539,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":122,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["provider",{"_index":286,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["providers",{"_index":289,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":427,"title":{},"body":{"index.html":{}}}],["public",{"_index":134,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["publish",{"_index":599,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":626,"title":{},"body":{"license.html":{}}}],["put",{"_index":62,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["put(path",{"_index":454,"title":{},"body":{"index.html":{}}}],["ready.decorator.ts",{"_index":311,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refactored",{"_index":571,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":194,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["repository",{"_index":567,"title":{},"body":{"index.html":{}}}],["req.body.canbesent",{"_index":497,"title":{},"body":{"index.html":{}}}],["request",{"_index":57,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["requestbuilder",{"_index":314,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestbuilder(requestmethod.delete",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.get",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.head",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.jsonp",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.options",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.patch",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.post",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.put",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(type",{"_index":156,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["requestconfig",{"_index":226,"title":{"interfaces/RequestConfig.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["requestfactory",{"_index":227,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestfactory(method",{"_index":364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requestfactory(type",{"_index":205,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod",{"_index":60,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{}}}],["requestmethod.delete",{"_index":233,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.get",{"_index":232,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.head",{"_index":234,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.jsonp",{"_index":235,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.options",{"_index":236,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.patch",{"_index":230,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.post",{"_index":228,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.put",{"_index":229,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requests",{"_index":534,"title":{},"body":{"index.html":{}}}],["res",{"_index":258,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["reset",{"_index":649,"title":{},"body":{"overview.html":{}}}],["rest",{"_index":90,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rest_handlers",{"_index":145,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["restclient",{"_index":426,"title":{},"body":{"index.html":{}}}],["restguard",{"_index":92,"title":{"interfaces/RestGuard.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["restmodule",{"_index":275,"title":{"modules/RestModule.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"modules.html":{}}}],["restmodule.forroot",{"_index":557,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({baseurl",{"_index":399,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({withcredentials",{"_index":537,"title":{},"body":{"index.html":{}}}],["restor",{"_index":387,"title":{},"body":{"index.html":{}}}],["restpropertydecorator",{"_index":149,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":593,"title":{},"body":{"license.html":{}}}],["result",{"_index":125,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.topromise",{"_index":255,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["results",{"_index":127,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":158,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["returning",{"_index":451,"title":{},"body":{"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["right",{"_index":521,"title":{},"body":{"index.html":{}}}],["rights",{"_index":596,"title":{},"body":{"license.html":{}}}],["root",{"_index":123,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rootconfiguration",{"_index":281,"title":{"interfaces/RootConfiguration.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["run",{"_index":207,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["rxjs",{"_index":144,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"dependencies.html":{}}}],["save",{"_index":390,"title":{},"body":{"index.html":{}}}],["secret",{"_index":440,"title":{},"body":{"index.html":{}}}],["selector",{"_index":410,"title":{},"body":{"index.html":{}}}],["sell",{"_index":603,"title":{},"body":{"license.html":{}}}],["sent",{"_index":474,"title":{},"body":{"index.html":{}}}],["service",{"_index":432,"title":{},"body":{"index.html":{}}}],["services",{"_index":560,"title":{},"body":{"index.html":{}}}],["session",{"_index":484,"title":{},"body":{"index.html":{}}}],["sessionservice",{"_index":485,"title":{},"body":{"index.html":{}}}],["set",{"_index":176,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["shall",{"_index":613,"title":{},"body":{"license.html":{}}}],["shouldn't",{"_index":556,"title":{},"body":{"index.html":{}}}],["single",{"_index":492,"title":{},"body":{"index.html":{}}}],["software",{"_index":588,"title":{},"body":{"license.html":{}}}],["something",{"_index":417,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["source.then(res",{"_index":257,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["specified",{"_index":69,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":373,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["startguardcheck",{"_index":241,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["startguardcheck(target",{"_index":211,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["statements",{"_index":298,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":278,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["steven166/angular",{"_index":569,"title":{},"body":{"index.html":{}}}],["string",{"_index":109,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["subject",{"_index":608,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":601,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":615,"title":{},"body":{"license.html":{}}}],["super('a",{"_index":154,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["supports",{"_index":551,"title":{},"body":{"index.html":{}}}],["switch",{"_index":237,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["symbol",{"_index":26,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('base_url",{"_index":31,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('bodies",{"_index":37,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_guards",{"_index":35,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_handlers",{"_index":41,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_headers",{"_index":49,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_with_credentials",{"_index":53,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('error_handler",{"_index":43,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('guards",{"_index":33,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('handlers",{"_index":39,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('headers",{"_index":47,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('http_client",{"_index":29,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('injector",{"_index":27,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('on_client_ready",{"_index":55,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('param_headers",{"_index":45,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('with_credentials",{"_index":51,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":74,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["t[p",{"_index":80,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["table",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":150,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["target.constructor[bodies",{"_index":170,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][client_guards",{"_index":244,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][methodname",{"_index":245,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][client_handlers",{"_index":221,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][methodname",{"_index":223,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[headers",{"_index":188,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials",{"_index":201,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][client_with_credentials",{"_index":202,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][methodname",{"_index":203,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["template",{"_index":73,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["thalesrc",{"_index":579,"title":{},"body":{"license.html":{}}}],["thalesrc/angular",{"_index":374,"title":{},"body":{"index.html":{}}}],["this.client.inserttodo(todo",{"_index":419,"title":{},"body":{"index.html":{}}}],["this.client.todos().then(todos",{"_index":415,"title":{},"body":{"index.html":{}}}],["this.session.loggedin$.pipe(first()).topromise",{"_index":487,"title":{},"body":{"index.html":{}}}],["this.todocacheservice.cachetodos(todos",{"_index":527,"title":{},"body":{"index.html":{}}}],["this.todos",{"_index":526,"title":{},"body":{"index.html":{}}}],["this[base_url]}/${url",{"_index":206,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[header",{"_index":190,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[http_client].request(request).topromise",{"_index":225,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_headers",{"_index":175,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_with_credentials",{"_index":200,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(header",{"_index":180,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(rest_handlers)).reduce((prev",{"_index":217,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["throw",{"_index":212,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["todo",{"_index":407,"title":{},"body":{"index.html":{}}}],["todo.client",{"_index":396,"title":{},"body":{"index.html":{}}}],["todo.client.ts",{"_index":403,"title":{},"body":{"index.html":{}}}],["todo.component",{"_index":398,"title":{},"body":{"index.html":{}}}],["todo.component.ts",{"_index":408,"title":{},"body":{"index.html":{}}}],["todocacheservice",{"_index":523,"title":{},"body":{"index.html":{}}}],["todoclient",{"_index":395,"title":{},"body":{"index.html":{}}}],["todocomponent",{"_index":397,"title":{},"body":{"index.html":{}}}],["todomodule",{"_index":490,"title":{},"body":{"index.html":{}}}],["todos",{"_index":404,"title":{},"body":{"index.html":{}}}],["token",{"_index":540,"title":{},"body":{"index.html":{}}}],["tokens",{"_index":148,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["top",{"_index":543,"title":{},"body":{"index.html":{}}}],["topsecret",{"_index":561,"title":{},"body":{"index.html":{}}}],["tort",{"_index":637,"title":{},"body":{"license.html":{}}}],["true",{"_index":293,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["try",{"_index":209,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":651,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":172,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["types",{"_index":141,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["typescript",{"_index":376,"title":{},"body":{"index.html":{}}}],["u",{"_index":76,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["undefined",{"_index":167,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":380,"title":{},"body":{"index.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["unless",{"_index":535,"title":{},"body":{"index.html":{}}}],["url",{"_index":165,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":87,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":449,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":291,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["util",{"_index":442,"title":{},"body":{"index.html":{}}}],["value",{"_index":283,"title":{},"body":{"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":653,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":622,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":617,"title":{},"body":{"license.html":{}}}],["whether",{"_index":476,"title":{},"body":{"index.html":{},"license.html":{}}}],["with_credentials",{"_index":50,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["withcredentials",{"_index":124,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["withcredentials(true",{"_index":544,"title":{},"body":{"index.html":{}}}],["withcredentials(withcredentials",{"_index":371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withcredentialsparam",{"_index":546,"title":{},"body":{"index.html":{}}}],["without",{"_index":592,"title":{},"body":{"license.html":{}}}],["world",{"_index":413,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":385,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":648,"title":{},"body":{"overview.html":{}}}],["zçelik",{"_index":566,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ClientConstructor.html":{"url":"interfaces/ClientConstructor.html","title":"interface - ClientConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Object\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constructor\n                                    \n                                \n                                \n                                    \n                                        constructor:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientInstance.html":{"url":"interfaces/ClientInstance.html","title":"interface - ClientInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        BASE_URL\n                                \n                                \n                                        HTTP_CLIENT\n                                \n                                \n                                        INJECTOR\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        BASE_URL\n                                    \n                                \n                                \n                                    \n                                        BASE_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        HTTP_CLIENT\n                                    \n                                \n                                \n                                    \n                                        HTTP_CLIENT:         HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        INJECTOR\n                                    \n                                \n                                \n                                    \n                                        INJECTOR:         Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Injector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        guards\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        providedIn\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersClientParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersClientParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guards\n                                    \n                                \n                                \n                                    \n                                        guards:         Guard\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Guard\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providedIn\n                                    \n                                \n                                \n                                    \n                                        providedIn:     Type | \"root\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Type | \"root\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuardForbid.html":{"url":"classes/GuardForbid.html","title":"class - GuardForbid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuardForbid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: HttpRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/request-builder.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    HttpRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpRequest\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/rest/src/lib/request-builder.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS, CLIENT_WITH_CREDENTIALS } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure full url\n        // _____________________________________________________________________________\n        const url = path !== undefined ? path : methodName;\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${url}`, { body, headers, withCredentials });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        try {\n          const guardsResult = await startGuardCheck(target, methodName, request, this);\n          if (!guardsResult) { throw false; }\n\n        } catch (error) {\n          if (error === false) {\n            throw new GuardForbid(request);\n          }\n\n          throw error;\n        }\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          >>this[HTTP_CLIENT].request(request).toPromise()\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Handler.html":{"url":"interfaces/Handler.html","title":"interface - Handler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Handler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handle\n                                    \n                                \n                                \n                                    \n                                        handle:         HandlerFunction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlerFunction\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeadersInjector.html":{"url":"classes/HeadersInjector.html","title":"class - HeadersInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeadersInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                inject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            inject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inject()\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         HeaderInjectorResponse\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeadersObject.html":{"url":"interfaces/HeadersObject.html","title":"interface - HeadersObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeadersObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | []\n\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/types.ts:65\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestConfig.html":{"url":"interfaces/RequestConfig.html","title":"interface - RequestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        headers\n                                \n                                \n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         HttpHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpHeaders\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS, CLIENT_WITH_CREDENTIALS } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure full url\n        // _____________________________________________________________________________\n        const url = path !== undefined ? path : methodName;\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${url}`, { body, headers, withCredentials });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        try {\n          const guardsResult = await startGuardCheck(target, methodName, request, this);\n          if (!guardsResult) { throw false; }\n\n        } catch (error) {\n          if (error === false) {\n            throw new GuardForbid(request);\n          }\n\n          throw error;\n        }\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          >>this[HTTP_CLIENT].request(request).toPromise()\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestGuard.html":{"url":"interfaces/RestGuard.html","title":"interface - RestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n            \n                Description\n            \n            \n                Use to define an injectable as a rest guard\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canSend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canSend\n                        \n                        \n                    \n                \n            \n            \n                \ncanSend(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(undefined: RootConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/rest.module.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                                RootConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootConfiguration.html":{"url":"interfaces/RootConfiguration.html","title":"interface - RootConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RootConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/rest/src/lib/body.decorator.ts\n            \n            function\n            Body\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/client.decorator.ts\n            \n            function\n            Client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/error-handler.decorator.ts\n            \n            function\n            ErrorHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/guards.decorator.ts\n            \n            function\n            Guards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/handlers.decorator.ts\n            \n            function\n            Handlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/header.decorator.ts\n            \n            function\n            Header\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/headers.decorator.ts\n            \n            function\n            Headers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/on-client-ready.decorator.ts\n            \n            function\n            OnClientReady\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            class\n            GuardForbid\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            interface\n            RequestConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            chainHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestBuilder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            startGuardCheck\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Delete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Get\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Head\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Jsonp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Patch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Put\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/rest.module.ts\n            \n            interface\n            RootConfiguration\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            REST_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            class\n            HeadersInjector\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientConstructor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientInstance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientOptions\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            Handler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            HeadersObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            RestGuard\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BODIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ERROR_HANDLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HTTP_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            INJECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ON_CLIENT_READY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PARAM_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/with-credentials.decorator.ts\n            \n            function\n            WithCredentials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.3\n        \n            @angular/common : ~8.2.3\n        \n            @angular/compiler : ~8.2.3\n        \n            @angular/core : ~8.2.3\n        \n            @angular/forms : ~8.2.3\n        \n            @angular/platform-browser : ~8.2.3\n        \n            @angular/platform-browser-dynamic : ~8.2.3\n        \n            @angular/router : ~8.2.3\n        \n            core-js : ^2.5.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.5.2\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RequestMethod   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RequestMethod\n                    \n                \n                    \n                        \n                            Http Request Methods\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 JSONP\n                            \n                        \n                        \n                            \n                                Value : JSONP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Body   (projects/.../body.decorator.ts)\n                        \n                        \n                            chainHandlers   (projects/.../request-builder.ts)\n                        \n                        \n                            Client   (projects/.../client.decorator.ts)\n                        \n                        \n                            ErrorHandler   (projects/.../error-handler.decorator.ts)\n                        \n                        \n                            Guards   (projects/.../guards.decorator.ts)\n                        \n                        \n                            Handlers   (projects/.../handlers.decorator.ts)\n                        \n                        \n                            Header   (projects/.../header.decorator.ts)\n                        \n                        \n                            Headers   (projects/.../headers.decorator.ts)\n                        \n                        \n                            OnClientReady   (projects/.../on-client-ready.decorator.ts)\n                        \n                        \n                            requestBuilder   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            startGuardCheck   (projects/.../request-builder.ts)\n                        \n                        \n                            WithCredentials   (projects/.../with-credentials.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/body.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Body\n                        \n                        \n                    \n                \n            \n            \n                \nBody()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ParameterDecorator\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            chainHandlers\n                        \n                        \n                    \n                \n            \n            \n                \nchainHandlers(handlers, context, source)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestBuilder\n                        \n                        \n                    \n                \n            \n            \n                \nrequestBuilder(type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RestPropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startGuardCheck\n                        \n                        \n                    \n                \n            \n            \n                \nstartGuardCheck(target, methodName, request, context)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    methodName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/client.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Client\n                        \n                        \n                    \n                \n            \n            \n                \nClient(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/error-handler.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ErrorHandler\n                        \n                        \n                    \n                \n            \n            \n                \nErrorHandler()\n                \n            \n\n\n\n\n        \n    \n    projects/rest/src/lib/guards.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Guards\n                        \n                        \n                    \n                \n            \n            \n                \nGuards(guardFunctions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    guardFunctions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/handlers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Handlers\n                        \n                        \n                    \n                \n            \n            \n                \nHandlers(handlers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/header.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Header\n                        \n                        \n                    \n                \n            \n            \n                \nHeader(name, replace)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replace\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/headers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Headers\n                        \n                        \n                    \n                \n            \n            \n                \nHeaders(headers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/on-client-ready.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            OnClientReady\n                        \n                        \n                    \n                \n            \n            \n                \nOnClientReady()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/with-credentials.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithCredentials\n                        \n                        \n                    \n                \n            \n            \n                \nWithCredentials(withCredentials)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    withCredentials\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n@thalesrc/angular-rest\nAngular Rest Http Module with Typescript Declarative Annotations, Guards, Handlers and more\nThis package is under development. Use in caution!\n\n1. Installation\nyarn add @thalesrc/angular-restor\nnpm install @thalesrc/angular-rest --save\n2. Basic Example\n// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\nimport { TodoClient } from './todo.client';\nimport { TodoComponent } from './todo.component';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({baseUrl: 'http://localhost:3000'})\n  ],\n  providers: [\n    TodoClient\n  ],\n  declarations: [\n    TodoComponent\n  ]\n})\nexport class AppModule {}\n// todo.client.ts\n\nimport { HttpRequest } from '@angular/common/http';\nimport { Client, Get, Post, Body } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public insertTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n// todo.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-todo',\n  template: 'Hello World'\n})\nexport class TodoComponent {\n  constructor(private client: TodoClient) {\n    this.client.todos().then(todos => {\n      // Make something with todos\n    });\n  }\n\n  async postTodo(todo: Todo): Promise {\n    return await this.client.insertTodo(todo);\n  }\n}\n\n3. API Docs\n\n3.1. Client Decorator\n@Client() decorator marks a class as RestClient and provides functionality to make Http calls with its marked methods.\nThis decorator also marks the class as Injectable() and makes it to function as an Angular Service.\nIt can be configured by defining a ClientOptions object as a parameter\n3.1.1. ClientOptions\nA ClientOptions object configures base options for the rest methods declared inside a @Client() class\ninterface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  onReady?: FunctionsOf;\n}@Client({\n  baseUrl: 'http://localhost:3000',\n  baseHeaders: [{'Secret-Key': 'The best rest util is @thalesrc/angular-rest'}]\n  ...\n})\nexport class TodoClient {\n  ...\n}\n3.2. Request Method Decorators\nAll of these decorators marks a method in a @Client() as a request builder. path can be specified to define the endpoint path. Otherwise, the method name is going to be used as path.\nThe method return type should be defined as Promise and function should be empty but only returning null. Decorators will handle all the rest.\n\n@Get(path?: string)\n@Post(path?: string)\n@Put(path?: string)\n@Delete(path?: string)\n@Patch(path?: string)\n@Options(path?: string)\n@Head(path?: string)\n@Jsonp(path?: string)\n\nExample:\n@Client()\nexport class TodoClient {\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n3.3. Headers\nTo be determined\n3.3.1. Header Declaration Methods\nTo be determined\n3.3.1.1 HeaderInjector\nTo be determined\n3.3.1.2 HeadersObject\nTo be determined\n3.3.1.3 Headers as Client Method\nTo be determined\n3.3.2. Base Headers\nTo be determined\n3.3.3. Client Headers\nTo be determined\n3.3.4. Parameter Headers\nTo be determined\n\n3.4. Guards\nGuards run just before a request has been sent to check whether request should be sent or not\n3.4.1. Guard Declaration Methods\nGuards can be a function, a method of a client or an injectable of RestGuard\n3.4.1.1 RestGuard\nDefine an injectable as a rest guard and declare them as a guard (Base Guard, Client Guard, Method Guard) to check a request can be sent or not.\nDon't forget to provide them in a module\nExample:\n@Injectable()\nexport class PostTodoGuard implements RestGuard {\n constructor(private session: SessionService) {}\n\n async canSend(req: HttpRequest): Promise {\n   return await this.session.loggedIn$.pipe(first()).toPromise()\n }\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([PostTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}\n\n@NgModule({\n providers: [\n   TodoClient,\n   PostTodoGuard\n ]\n})\nexport class TodoModule {}3.4.1.2. Guard Function\nA single function can be a rest guard if it accepts first param as HttpRequest and returns whether boolean or Promise\nExample:\nfunction postTodoGuard(req: HttpRequest): boolean {\n  return req.body.canBeSent;\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([postTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}3.4.1.3. Guard Method\nTo be determined\n3.4.2. Base Guards\nTo be determined\n3.4.3. Client Guards\nTo be determined\n3.4.4. Method Guards\nTo be determined\n\n4.5. Handlers\nTo be determined\n4.5.1 ErrorHandlers\nTo be determined\n4.5.2 Handler Declaration Methods\nTo be determined\n4.5.2.1 Handler\nTo be determined\n4.5.2.2 Handler Function\nTo be determined\n4.5.2.3 Handler Method\nTo be determined\n4.5.3 Base Handlers\nTo be determined\n4.5.4 Client Handlers\nTo be determined\n4.5.5 Method Handlers\nTo be determined\n\n4.6. RestModule\nTo be determined\n\n4.7 OnClientReady Decorator\nIn client constructor functions, calling a rest call is forbidden. Because the client dependencies have not been set yet when the constructor function called.\nTo run some code when client instance created, @OnClientReady() decorator can be used. It will mark a method of a client to be called right after construction.\nExample:\nimport { Client, OnClientReady } from '@thalesrc/angular-rest';\nimport { TodoCacheService } from './todo-cache.service';\n\n@Client()\nexport class TodoClient {\n  constructor(\n    private todoCacheService: TodoCacheService\n  ) {}\n\n  @OnClientReady()\n  private onReady() {\n    const todos = await this.todos();\n\n    this.todoCacheService.cacheTodos(todos);\n  }\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n}\n4.8 WithCredentials Option\nDefines whether a request should be sent with outgoing credentials (cookies). Default true\n4.8.1. As Module Config\nIt can be set in module config as base option. That would configure for all requests unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({withCredentials: false})\n    ...\n  ],\n})\nexport class AppModule {}4.8.2. As Provider\nIt can be provided with the BASE_WITH_CREDENTIALS token as base option. That would also configure for all requests like As Module Config unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_WITH_CREDENTIALS } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule\n    ...\n  ],\n  providers: [\n    {provide: BASE_WITH_CREDENTIALS, useValue: false},\n    ...\n  ]\n})\nexport class AppModule {}4.8.3. As Client Config\nIt can be set in @Client() decorator as an option. That would configure withCredentials option for all the calls in that client.\nExample:\nimport { Client } from '@thalesrc/angular-rest';\n\n@Client({\n  withCredentials: true\n})\nexport class TodoClient {\n  ...\n}4.8.4. WithCredentials Decorator\nIt can be set by @WithCredentials() decorator on top a rest call. That would configure withCredentials option for only that call.\nExample:\nimport { Client, WithCredentials } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n  @Get()\n  @WithCredentials(true)\n  public todos(): Promise {\n    return null;\n  }\n}4.8.5. WithCredentialsParam Decorator\nto be developed\n\n4. Aot Limitations\nThis package supports aot builds, however there are some limitations.\n\nThe Injector should have been defined as the first parameter for every @Client constructor.\n\nimport { Injector } from '@angular/core';\n\n@Client()\nexport class TodoClient {\n  constructor(injector: Injector, otherServices: Etc) {\n\n  }\n}\nBase handlers and base headers shouldn't be defined in RestModule.forRoot static method. All of these should be provided in module providers\n\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_HEADERS, BASE_HANDLERS } from '@thalesrc/angular-rest';\n\nimport { BaseHeaders, BaseHandler } from './services';\n\n@NgModule({\n  imports: [RestModule],\n  providers: [\n    BaseHeaders,\n    BaseHandler,\n    {provide: BASE_HEADERS, useValue: [BaseHeaders, {'Secret-Key': 'topsecret'}], multi: true},\n    {provide: BASE_HANDLERS, useValue: [BaseHandler], multi: true},\n  ]\n})\nexport class AppModule {}\n5. Contributors\nAli Şahin Özçelik\nThis repository is started as a fork of steven166/angular-rest-client and completely refactored now\n\n6. License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Thalesrc\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassOf   (projects/.../types.ts)\n                        \n                        \n                            FunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            Guard   (projects/.../types.ts)\n                        \n                        \n                            GuardFunction   (projects/.../types.ts)\n                        \n                        \n                            GuardFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            GuardType   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunction   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            HandlersOf   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorResponse   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorType   (projects/.../types.ts)\n                        \n                        \n                            HeadersClientParam   (projects/.../types.ts)\n                        \n                        \n                            HeadersParam   (projects/.../types.ts)\n                        \n                        \n                            RestPropertyDecorator   (projects/.../request-builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    ClassOf\n                \n            \n            \n                \n                    Returns a class-function type of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FunctionsOf\n                \n            \n            \n                \n                    Returns specified type of method names of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Guard\n                \n            \n            \n                \n                        GuardType[] | GuardType\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunctionsOf\n                \n            \n            \n                \n                        FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardType\n                \n            \n            \n                \n                            GuardFunctionsOf | GuardFunction | ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunctionsOf\n                \n            \n            \n                \n                            FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlersOf\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorResponse\n                \n            \n            \n                \n                            HeadersObject | Promise\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorType\n                \n            \n            \n                \n                            ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersClientParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n    \n        \n            \n                \n                    \n                    RestPropertyDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_HEADERS   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_URL   (projects/.../types.ts)\n                        \n                        \n                            BASE_URL   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_WITH_CREDENTIALS   (projects/.../tokens.ts)\n                        \n                        \n                            BODIES   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_GUARDS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                        \n                            Delete   (projects/.../request.decorator.ts)\n                        \n                        \n                            ERROR_HANDLER   (projects/.../types.ts)\n                        \n                        \n                            Get   (projects/.../request.decorator.ts)\n                        \n                        \n                            GUARDS   (projects/.../types.ts)\n                        \n                        \n                            HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            Head   (projects/.../request.decorator.ts)\n                        \n                        \n                            HEADERS   (projects/.../types.ts)\n                        \n                        \n                            HTTP_CLIENT   (projects/.../types.ts)\n                        \n                        \n                            INJECTOR   (projects/.../types.ts)\n                        \n                        \n                            Jsonp   (projects/.../request.decorator.ts)\n                        \n                        \n                            ON_CLIENT_READY   (projects/.../types.ts)\n                        \n                        \n                            Options   (projects/.../request.decorator.ts)\n                        \n                        \n                            PARAM_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            Patch   (projects/.../request.decorator.ts)\n                        \n                        \n                            Post   (projects/.../request.decorator.ts)\n                        \n                        \n                            Put   (projects/.../request.decorator.ts)\n                        \n                        \n                            REST_HANDLERS   (projects/.../tokens.ts)\n                        \n                        \n                            WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/tokens.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REST_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_HANDLERS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BODIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BODIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_HANDLER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ERROR_HANDLER')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HTTP_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HTTP_CLIENT')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INJECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('INJECTOR')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLIENT_READY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ON_CLIENT_READY')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PARAM_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PARAM_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/request.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Delete\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.DELETE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.GET)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Head\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.HEAD)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Jsonp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.JSONP)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Options\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.OPTIONS)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PATCH)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Post\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.POST)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PUT)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
