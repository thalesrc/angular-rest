var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/ClientConstructor.html",[0,0.024,1,0.689]],["body/interfaces/ClientConstructor.html",[0,0.04,1,0.81,2,0.732,3,0.565,4,0.493,5,0.493,6,0.565,7,1.225,8,0.923,9,0.363,10,1.343,11,1.178,12,3.353,13,0.592,14,0.05,15,0.706,16,0.9,17,0.565,18,1.343,19,0.946,20,1.048,21,1.343,22,0.493,23,1.193,24,1.5,25,2.183,26,1.929,27,0.829,28,0.81,29,0.829,30,0.61,31,0.829,32,0.712,33,0.829,34,0.81,35,0.829,36,0.81,37,0.829,38,0.81,39,0.829,40,0.81,41,0.829,42,0.511,43,0.829,44,0.81,45,0.829,46,0.565,47,0.829,48,0.81,49,0.829,50,0.61,51,0.829,52,0.81,53,0.829,54,0.81,55,0.829,56,0.81,57,0.829,58,1.048,59,0.829,60,1.048,61,0.829,62,0.732,63,0.706,64,0.645,65,0.938,66,0.645,67,0.81,68,0.81,69,0.923,70,0.81,71,0.923,72,0.81,73,0.923,74,0.81,75,0.645,76,0.706,77,0.829,78,1.187,79,1.187,80,1.338,81,0.938,82,1.343,83,1.387,84,1.343,85,0.938,86,0.938,87,0.938,88,0.359,89,0.493,90,1.387,91,0.825,92,1.225,93,0.732,94,0.829,95,0.645,96,0.645,97,0.946,98,0.645,99,0.938,100,0.992,101,0.9,102,1.515,103,1.187,104,1.387,105,1.387,106,0.732,107,0.938,108,0.829,109,0.778,110,1.603,111,0.706,112,0.645,113,0.61,114,1.277,115,1.147,116,1.387,117,1.343,118,0.426,119,0.938,120,0.829,121,0.493,122,1.033,123,0.565,124,1.338,125,0.645,126,0.645,127,0.493,128,0.829,129,0.829,130,0.363,131,0.02,132,0.029,133,0.02]],["title/interfaces/ClientInstance.html",[0,0.024,123,0.689]],["body/interfaces/ClientInstance.html",[0,0.04,1,0.56,2,0.725,3,0.56,4,0.488,5,0.488,6,0.56,7,1.041,8,0.638,9,0.36,10,1.334,11,0.638,13,0.591,14,0.05,15,0.701,16,1.061,17,0.56,18,1.707,19,0.941,20,1.041,21,1.334,22,0.488,23,1.192,24,1.498,25,2.18,26,1.926,27,0.821,28,1.09,29,0.821,30,0.82,31,0.821,32,0.709,33,0.821,34,0.804,35,0.821,36,0.804,37,0.821,38,0.804,39,0.821,40,0.804,41,0.821,42,0.508,43,0.821,44,0.804,45,0.821,46,0.56,47,0.821,48,0.804,49,0.821,50,0.605,51,0.821,52,0.804,53,0.821,54,0.804,55,0.821,56,0.804,57,0.821,58,1.041,59,0.821,60,1.041,61,0.821,62,0.725,63,0.701,64,0.638,65,0.929,66,0.638,67,0.804,68,0.804,69,0.917,70,0.804,71,0.917,72,0.804,73,0.917,74,0.804,75,0.638,76,0.701,77,0.821,78,1.179,79,1.179,80,1.332,81,0.929,82,1.334,83,1.38,84,1.334,85,0.929,86,0.929,87,0.929,88,0.357,89,0.488,90,1.38,91,0.82,92,1.218,93,0.725,94,0.821,95,0.638,96,0.638,97,0.941,98,0.638,99,0.929,100,0.988,101,0.896,102,1.508,103,1.179,104,1.38,105,1.38,106,0.725,107,0.929,108,0.821,109,0.774,110,1.597,111,0.701,112,0.638,113,0.605,114,1.275,115,1.154,116,1.38,117,1.334,118,0.421,119,0.929,120,0.821,121,0.488,122,1.029,123,0.804,124,1.332,125,0.638,126,0.638,127,0.488,128,0.821,129,0.821,130,0.36,131,0.02,132,0.029,133,0.02]],["title/interfaces/ClientOptions.html",[0,0.024,125,0.786]],["body/interfaces/ClientOptions.html",[0,0.04,1,0.54,2,0.7,3,0.54,4,0.471,5,0.471,6,0.54,7,1.015,8,0.616,9,0.347,10,1.301,11,0.616,13,0.597,14,0.05,15,0.683,16,0.882,17,0.54,18,1.301,19,0.923,20,1.015,21,1.301,22,0.471,23,1.189,24,1.491,25,2.17,26,1.917,27,0.792,28,0.784,29,0.792,30,0.59,31,0.792,32,0.844,33,0.792,34,0.784,35,0.792,36,0.784,37,0.792,38,0.784,39,0.792,40,0.784,41,0.792,42,0.605,43,0.792,44,0.784,45,0.792,46,0.54,47,0.792,48,0.784,49,0.792,50,0.59,51,0.792,52,0.784,53,0.792,54,0.784,55,0.792,56,0.784,57,0.792,58,1.015,59,0.792,60,1.015,61,0.792,62,0.7,63,0.683,64,0.616,65,0.897,66,0.616,67,0.784,68,0.784,69,0.894,70,0.784,71,0.894,72,0.784,73,0.894,74,0.784,75,0.616,76,0.683,77,0.792,78,1.149,79,1.149,80,1.31,81,0.897,82,1.301,83,1.353,84,1.301,85,0.897,86,0.897,87,0.897,88,0.348,89,0.471,90,1.353,91,0.804,92,1.194,93,0.7,94,0.792,95,0.616,96,0.616,97,1.075,98,0.616,99,0.897,100,1.032,101,0.882,102,1.484,103,1.149,104,1.353,105,1.353,106,0.7,107,0.897,108,0.792,109,0.844,110,1.575,111,0.683,112,0.616,113,0.59,114,1.267,115,1.149,116,1.353,117,1.301,118,0.407,119,0.897,120,0.792,121,0.471,122,1.121,123,0.54,124,1.31,125,0.894,126,1.154,127,0.882,128,1.484,129,1.353,130,0.65,131,0.019,132,0.028,133,0.019,134,2.36]],["title/classes/GuardForbid.html",[88,0.306,135,1.685]],["body/classes/GuardForbid.html",[0,0.016,1,0.824,3,0.447,4,0.718,5,0.389,7,0.881,8,0.51,9,0.592,10,1.129,11,0.776,13,0.366,14,0.05,15,0.803,16,0.389,19,1.147,20,0.881,22,0.389,23,0.389,24,1.473,28,0.447,30,0.336,32,0.336,34,0.447,36,0.447,38,0.447,40,0.681,42,0.445,44,0.447,46,0.447,48,0.447,50,0.908,52,0.681,54,0.447,56,0.447,63,1.02,66,0.94,76,1.02,80,0.881,88,0.198,89,1.064,91,0.864,92,0.579,95,0.51,96,0.94,97,0.681,100,0.593,101,0.718,106,1.067,109,0.747,111,0.803,112,0.51,113,0.512,114,0.681,115,1.02,118,0.621,121,0.593,122,0.824,123,0.922,124,0.579,127,0.593,130,0.638,131,0.041,132,0.024,133,0.016,134,0.84,135,1.665,136,1.266,137,1.762,138,0.955,139,3.504,140,1.762,141,1.85,142,1.279,143,1.85,144,1.093,145,1.279,146,1.85,147,1.093,148,2.764,149,2.764,150,2.282,151,1.266,152,0.84,153,0.741,154,0.741,155,1.093,156,2.017,157,2.336,158,1.498,159,2.764,160,2.612,161,1.498,162,1.498,163,1.266,164,1.97,165,2.543,166,3.252,167,1.498,168,1.929,169,1.498,170,2.612,171,2.336,172,3.847,173,2.336,174,2.336,175,1.498,176,1.498,177,2.764,178,2.394,179,2.282,180,1.498,181,1.266,182,3.755,183,1.498,184,1.762,185,1.498,186,1.498,187,1.266,188,1.498,189,2.255,190,2.394,191,2.282,192,1.929,193,2.282,194,2.811,195,2.282,196,1.498,197,2.282,198,1.498,199,0.955,200,2.282,201,2.282,202,2.282,203,1.498,204,1.498,205,1.498,206,1.093,207,1.665,208,1.498,209,2.282,210,1.498,211,1.266,212,1.498,213,1.498,214,2.282,215,2.282,216,1.498,217,1.498,218,1.498,219,2.282,220,1.266,221,1.498,222,1.498,223,1.266,224,1.498,225,3.09,226,2.336,227,1.498,228,1.498,229,2.282,230,1.498,231,3.643,232,1.498,233,2.282,234,1.498,235,2.282,236,1.498,237,1.665,238,1.498,239,1.498,240,2.255,241,2.017,242,2.282,243,2.282,244,2.282,245,2.427,246,1.665,247,1.498,248,1.498,249,1.498,250,1.498,251,1.498,252,1.498,253,2.764,254,2.282,255,0.955,256,1.093,257,1.929,258,1.498,259,1.498,260,1.498,261,1.498,262,1.498,263,1.498,264,3.09,265,1.266,266,1.498,267,1.498,268,1.498,269,1.498,270,1.498,271,1.498,272,1.498,273,2.282,274,1.498,275,1.498,276,3.09,277,1.498,278,1.498,279,1.498,280,1.498,281,1.498,282,1.498,283,1.498,284,1.498]],["title/interfaces/Handler.html",[0,0.024,111,0.6]],["body/interfaces/Handler.html",[0,0.04,1,0.568,2,0.735,3,0.568,4,0.495,5,0.495,6,0.568,7,1.051,8,0.647,9,0.365,10,1.347,11,0.647,13,0.588,14,0.05,15,0.708,16,0.902,17,0.568,18,1.347,19,0.948,20,1.051,21,1.347,22,0.495,23,1.193,24,1.501,25,2.184,26,1.93,27,0.832,28,0.812,29,0.832,30,0.611,31,0.832,32,0.714,33,0.832,34,0.812,35,0.832,36,0.812,37,0.832,38,0.812,39,0.832,40,0.812,41,0.832,42,0.512,43,0.832,44,0.812,45,0.832,46,0.568,47,0.832,48,0.812,49,0.832,50,0.611,51,0.832,52,0.812,53,0.832,54,0.812,55,0.832,56,0.812,57,0.832,58,1.051,59,0.832,60,1.051,61,0.832,62,0.735,63,0.708,64,0.647,65,0.942,66,0.647,67,0.812,68,0.812,69,0.926,70,0.812,71,0.926,72,0.812,73,0.926,74,0.812,75,0.647,76,0.708,77,0.832,78,1.191,79,1.191,80,1.34,81,0.942,82,1.347,83,1.39,84,1.347,85,0.942,86,0.942,87,0.942,88,0.36,89,0.495,90,1.39,91,0.826,92,1.228,93,0.735,94,0.832,95,0.647,96,0.647,97,0.948,98,0.647,99,0.942,100,0.993,101,0.902,102,1.518,103,1.191,104,1.39,105,1.606,106,0.735,107,0.942,108,0.832,109,0.779,110,1.606,111,0.826,112,1.18,113,0.611,114,1.278,115,1.147,116,1.39,117,1.347,118,0.427,119,0.942,120,0.832,121,0.495,122,1.035,123,0.568,124,1.34,125,0.647,126,0.647,127,0.495,128,0.832,129,0.832,130,0.365,131,0.02,132,0.029,133,0.02]],["title/classes/HeadersInjector.html",[88,0.306,118,0.519]],["body/classes/HeadersInjector.html",[0,0.04,1,0.566,3,0.566,4,0.493,5,0.493,6,0.566,7,1.049,8,0.645,9,0.364,11,0.645,13,0.586,14,0.05,15,0.706,16,0.901,17,0.566,18,1.344,19,0.947,20,1.049,21,1.344,22,0.493,23,1.193,24,1.5,25,2.183,26,1.929,27,0.83,28,0.81,29,0.83,30,0.61,31,0.83,32,0.713,33,0.83,34,0.81,35,0.83,36,0.81,37,0.83,38,0.81,39,0.83,40,0.81,41,0.83,42,0.511,43,0.83,44,0.81,45,0.83,46,0.566,47,0.83,48,0.81,49,0.83,50,0.61,51,0.83,52,0.81,53,0.83,54,0.81,55,0.83,56,0.81,57,0.83,58,1.049,59,0.83,60,1.049,61,0.83,62,0.733,63,0.706,64,1.08,65,0.939,66,0.645,67,0.81,68,0.81,69,0.924,70,0.81,71,0.924,72,0.81,73,0.924,74,0.947,75,0.645,76,0.706,77,0.83,78,1.188,79,1.188,80,1.338,81,0.939,82,1.344,83,1.388,84,1.344,85,0.939,86,0.939,87,0.939,88,0.359,89,0.493,90,1.388,91,0.825,92,1.226,93,0.733,94,0.83,95,0.645,96,0.645,97,0.947,98,0.645,99,0.939,100,0.992,101,0.901,102,1.516,103,1.188,104,1.388,105,1.388,106,0.733,107,0.939,108,0.83,109,0.778,110,1.604,111,0.706,112,0.645,113,0.61,114,1.278,115,1.147,116,1.516,117,1.715,118,0.61,119,1.715,120,0.83,121,0.493,122,1.034,123,0.566,124,1.338,125,0.645,126,0.645,127,0.493,128,0.83,129,0.83,130,0.364,131,0.02,132,0.029,133,0.02,136,1.604,142,1.064,285,2.343]],["title/interfaces/HeadersObject.html",[0,0.024,113,0.519]],["body/interfaces/HeadersObject.html",[0,0.04,1,0.569,2,0.736,3,0.569,4,0.496,5,0.496,6,0.569,7,1.053,8,0.648,11,0.648,13,0.586,14,0.05,15,0.709,16,0.903,17,0.569,18,1.349,19,0.949,20,1.053,21,1.349,22,0.496,23,1.194,24,1.501,25,2.184,26,1.93,27,0.834,28,0.813,29,0.834,30,0.612,31,0.834,32,0.715,33,0.834,34,0.813,35,0.834,36,0.813,37,0.834,38,0.813,39,0.834,40,0.813,41,0.834,42,0.513,43,0.834,44,0.813,45,0.834,46,0.569,47,0.834,48,0.813,49,0.834,50,0.612,51,0.834,52,0.813,53,0.834,54,0.813,55,0.834,56,0.813,57,0.834,58,1.053,59,0.834,60,1.053,61,0.834,62,0.736,63,0.709,64,0.648,65,0.943,66,0.648,67,0.813,68,0.813,69,0.927,70,0.813,71,0.927,72,0.813,73,0.927,74,0.813,75,0.648,76,0.709,77,0.834,78,1.192,79,1.192,80,1.341,81,0.943,82,1.349,83,1.392,84,1.349,85,0.943,86,0.943,87,0.943,88,0.361,89,0.496,90,1.392,91,0.827,92,1.229,93,0.736,94,0.834,95,0.648,96,0.648,97,0.949,98,0.648,99,0.943,100,0.994,101,0.903,102,1.519,103,1.192,104,1.392,105,1.392,106,0.736,107,0.943,108,0.834,109,0.78,110,1.607,111,0.709,112,0.648,113,0.715,114,1.288,115,1.156,116,1.392,117,1.349,118,0.428,119,0.943,120,0.834,121,0.496,122,1.036,123,0.569,124,1.341,125,0.648,126,0.648,127,0.496,128,0.834,129,0.834,130,0.365,131,0.02,132,0.029,133,0.02,142,1.069,286,2.354,287,2.354]],["title/interfaces/RequestConfig.html",[0,0.024,240,1.685]],["body/interfaces/RequestConfig.html",[0,0.016,1,0.826,2,0.58,3,0.448,4,0.72,5,0.391,7,0.58,8,0.511,9,0.593,10,1.132,11,0.511,13,0.409,14,0.05,15,0.805,16,0.391,19,1.046,20,0.883,22,0.391,23,0.391,24,1.474,28,0.448,30,0.337,32,0.337,34,0.448,36,0.448,38,0.448,40,0.682,42,0.446,44,0.448,46,0.448,48,0.448,50,0.938,52,0.682,54,0.448,56,0.448,63,0.948,66,0.942,76,1.021,80,0.883,88,0.199,89,1.065,91,0.866,92,0.58,95,0.511,96,0.942,97,0.682,100,0.805,101,0.72,106,1.069,109,0.748,111,0.805,112,0.511,113,0.514,114,0.682,115,1.021,118,0.622,121,0.595,122,0.826,123,0.923,124,0.58,127,0.595,130,0.721,131,0.042,132,0.024,133,0.016,135,1.097,137,0.958,138,0.958,139,3.33,140,0.958,145,0.843,147,1.097,148,3.33,149,3.33,150,2.287,151,1.27,152,0.843,153,0.744,154,0.744,155,1.097,156,2.021,157,2.341,158,1.503,159,2.769,160,2.616,161,1.503,162,1.503,163,1.27,164,1.973,165,2.545,166,3.255,167,1.503,168,1.933,169,1.503,170,2.616,171,2.341,172,3.85,173,2.341,174,2.341,175,1.503,176,1.503,177,2.769,178,2.396,179,2.287,180,1.503,181,1.27,182,3.759,183,1.503,184,1.765,185,1.503,186,1.503,187,1.27,188,1.503,189,2.258,190,2.396,191,2.287,192,1.933,193,2.287,194,2.815,195,2.287,196,1.503,197,2.287,198,1.503,199,0.958,200,2.287,201,2.287,202,2.287,203,1.503,204,1.503,205,1.503,206,1.097,207,1.669,208,1.503,209,2.287,210,1.503,211,1.27,212,1.503,213,1.503,214,2.287,215,2.287,216,1.503,217,1.503,218,1.503,219,3.33,220,1.27,221,1.503,222,1.503,223,1.27,224,1.503,225,3.095,226,2.341,227,1.503,228,1.503,229,2.287,230,1.503,231,3.647,232,1.503,233,2.287,234,1.503,235,2.287,236,1.503,237,1.669,238,1.503,239,1.503,240,2.43,241,2.021,242,2.287,243,2.287,244,2.287,245,2.43,246,1.669,247,1.503,248,1.503,249,1.503,250,1.503,251,1.503,252,1.503,253,2.769,254,2.287,255,0.958,256,1.097,257,1.933,258,1.503,259,1.503,260,1.503,261,1.503,262,1.503,263,1.503,264,3.095,265,1.27,266,1.503,267,1.503,268,1.503,269,1.503,270,1.503,271,1.503,272,1.503,273,2.287,274,1.503,275,1.503,276,3.095,277,1.503,278,1.503,279,1.503,280,1.503,281,1.503,282,1.503,283,1.503,284,1.503]],["title/interfaces/RestGuard.html",[0,0.024,98,0.786]],["body/interfaces/RestGuard.html",[0,0.04,1,0.558,2,0.723,3,0.558,4,0.486,5,0.486,6,0.558,7,1.039,8,0.637,9,0.359,11,0.637,13,0.587,14,0.05,15,0.699,16,0.895,17,0.558,18,1.331,19,1.088,20,1.039,21,1.331,22,0.486,23,1.192,24,1.498,25,2.179,26,1.926,27,0.818,28,0.803,29,0.818,30,0.604,31,0.818,32,0.707,33,0.818,34,0.803,35,0.818,36,0.803,37,0.818,38,0.803,39,0.818,40,0.803,41,0.818,42,0.507,43,0.818,44,0.803,45,0.818,46,0.558,47,0.818,48,0.803,49,0.818,50,0.604,51,0.818,52,0.803,53,0.818,54,0.803,55,0.818,56,0.803,57,0.818,58,1.039,59,0.818,60,1.039,61,0.818,62,0.723,63,0.819,64,1.071,65,0.926,66,0.637,67,0.803,68,0.803,69,0.915,70,0.803,71,0.915,72,0.803,73,0.915,74,0.94,75,0.637,76,0.699,77,0.818,78,1.177,79,1.177,80,1.33,81,0.926,82,1.331,83,1.377,84,1.331,85,0.926,86,0.926,87,0.926,88,0.356,89,0.486,90,1.377,91,0.819,92,1.216,93,1.039,94,1.177,95,0.915,96,0.915,97,1.027,98,0.915,99,1.331,100,1.017,101,0.948,102,1.506,103,1.177,104,1.377,105,1.377,106,0.723,107,0.926,108,0.818,109,0.773,110,1.595,111,0.699,112,0.637,113,0.604,114,1.275,115,1.145,116,1.377,117,1.331,118,0.42,119,0.926,120,0.818,121,0.486,122,1.027,123,0.558,124,1.33,125,0.637,126,0.637,127,0.486,128,0.818,129,0.818,130,0.359,131,0.02,132,0.028,133,0.02,134,1.049,142,1.049,144,1.366,145,1.049,265,2.274,288,1.871,289,2.311]],["title/modules/RestModule.html",[290,1.952,291,1.472]],["body/modules/RestModule.html",[0,0.03,3,0.843,4,0.735,5,0.735,13,0.374,14,0.05,15,1.06,17,0.843,22,0.735,23,0.735,30,0.873,42,0.626,64,0.961,74,0.843,88,0.374,100,0.735,109,0.798,115,0.735,118,0.635,121,0.924,126,1.322,127,1.01,130,0.745,131,0.03,132,0.038,133,0.03,134,1.585,140,1.802,142,1.585,144,2.063,145,1.585,147,2.063,152,2.179,153,1.923,154,1.923,155,2.063,165,1.802,255,1.802,291,2.478,292,2.389,293,2.389,294,3.004,295,3.554,296,3.491,297,2.976,298,3.491,299,2.389,300,3.887,301,3.286,302,2.389,303,3.887,304,2.389,305,2.593,306,3.722,307,3.722,308,3.447,309,3.626,310,2.389]],["title/interfaces/RootConfiguration.html",[0,0.024,297,1.685]],["body/interfaces/RootConfiguration.html",[0,0.029,2,1.061,3,0.819,4,0.714,5,0.714,9,0.527,10,1.727,13,0.534,14,0.05,15,1.049,17,0.819,22,0.714,23,0.714,30,0.861,42,0.686,88,0.363,100,0.997,109,0.906,115,0.997,118,0.617,121,1.049,126,1.448,127,1.107,130,0.816,131,0.029,132,0.037,133,0.029,134,2.455,140,1.751,147,2.004,152,2.151,153,1.898,154,1.898,155,2.004,165,1.751,291,2.225,293,2.322,294,2.322,295,2.747,297,2.799,300,3.49,301,3.242,302,2.322,303,3.836,304,2.322,305,2.547,306,3.701,307,3.701,308,3.411,309,3.599,310,2.322]],["title/coverage.html",[311,3.115]],["body/coverage.html",[0,0.044,1,0.641,5,0.559,6,1.36,13,0.284,14,0.05,16,0.559,28,0.641,30,0.666,32,0.666,34,0.641,36,0.641,38,0.641,40,0.641,42,0.478,44,0.641,46,0.641,48,0.641,50,0.666,52,0.641,54,0.641,56,0.641,58,0.83,60,0.83,67,0.641,68,0.641,69,0.731,70,0.641,71,0.731,72,0.641,73,0.731,88,0.392,89,1.164,91,0.559,98,0.731,111,0.559,113,0.483,118,0.483,123,0.641,125,0.731,130,0.412,131,0.023,132,0.031,133,0.023,135,1.569,137,2.645,138,2.645,152,1.205,153,1.064,154,1.064,164,1.37,178,1.37,184,1.37,190,1.37,199,1.891,237,1.569,240,1.569,241,2.479,256,1.569,293,1.817,297,1.569,311,2.15,312,2.15,313,2.655,314,2.655,315,2.15,316,5.779,317,5.758,318,2.15,319,2.15,320,2.15,321,2.15,322,2.15,323,2.15,324,2.15,325,2.15,326,2.15,327,2.15,328,2.15,329,2.15,330,2.15,331,1.817,332,2.15,333,3.663,334,3.663,335,2.15,336,2.655,337,3.663,338,2.15,339,4.149,340,5.676,341,2.655,342,3.662,343,4.194,344,2.655,345,2.655,346,2.655,347,2.15,348,2.15,349,2.655,350,2.655]],["title/dependencies.html",[351,1.947,352,2.02]],["body/dependencies.html",[14,0.049,17,1.006,131,0.036,132,0.042,133,0.036,151,2.851,352,2.461,353,4.165,354,5.615,355,4.165,356,4.165,357,4.165,358,4.886,359,4.886,360,4.165,361,4.165,362,4.165,363,4.165,364,4.165,365,4.165,366,4.165,367,4.165,368,4.165,369,4.165,370,4.165]],["title/miscellaneous/enumerations.html",[371,0.851,372,2.768]],["body/miscellaneous/enumerations.html",[6,1.01,9,0.649,14,0.049,62,1.307,63,0.88,64,1.151,66,1.348,67,1.183,68,1.183,69,1.348,70,1.183,71,1.348,72,1.183,73,1.348,131,0.036,132,0.042,133,0.036,299,3.845,371,1.48,372,3.385,373,2.861]],["title/miscellaneous/functions.html",[371,0.851,374,2.34]],["body/miscellaneous/functions.html",[4,0.834,9,0.463,13,0.319,14,0.049,19,1.075,32,0.721,42,0.619,50,0.81,63,0.937,74,1.345,75,0.821,76,0.937,93,0.932,101,0.834,114,1.146,130,0.691,131,0.026,132,0.034,133,0.026,134,2.518,137,1.539,138,2.675,144,3.277,145,2.536,156,1.762,157,2.041,160,3.381,163,2.041,164,2.449,166,2.713,173,2.041,178,2.298,184,2.449,189,1.762,190,2.046,199,2.449,206,2.342,207,2.631,223,2.041,237,2.342,241,3.001,245,3.062,246,2.804,256,2.342,257,3.247,288,3.21,315,2.415,318,2.415,319,2.415,320,3.21,321,3.605,322,2.415,323,2.415,324,2.415,325,2.415,326,2.415,327,3.21,328,3.21,329,2.415,330,3.21,331,3.047,332,2.415,335,2.415,338,3.21,347,2.415,348,3.21,371,1.056,374,2.041,375,2.982,376,4.112,377,2.982,378,2.982,379,2.982,380,2.982,381,2.982,382,2.982,383,2.982,384,2.982,385,2.982,386,2.982,387,2.982,388,4.744,389,2.982,390,4.452,391,2.982,392,2.982,393,2.982,394,2.982,395,2.982,396,2.982,397,2.982,398,2.415,399,2.982,400,2.982,401,2.415,402,2.982,403,2.982,404,2.415,405,2.982]],["title/index.html",[9,0.373,406,1.947,407,1.646]],["body/index.html",[0,0.013,8,0.841,11,0.957,13,0.264,14,0.05,15,1.084,16,0.643,17,0.973,19,0.839,22,0.327,23,1.091,24,0.678,32,0.796,42,0.55,50,0.732,62,0.769,63,0.848,64,1.162,67,0.594,68,0.375,70,0.375,72,0.375,74,0.375,75,0.678,76,1.023,79,0.55,88,0.564,89,0.921,91,0.327,94,0.871,95,0.957,96,1.427,97,1.115,98,0.841,100,0.518,101,1.076,109,0.282,111,0.731,112,0.428,113,0.282,114,0.738,115,0.991,122,0.375,125,0.957,126,0.678,127,0.797,128,0.55,129,0.55,130,0.655,131,0.013,132,0.021,133,0.013,140,2.541,142,1.387,145,0.705,153,0.986,154,1.224,164,1.954,165,2.639,168,2.888,170,2.378,171,1.063,174,1.063,178,1.954,181,3.278,184,0.802,187,3.084,189,2.053,190,0.802,192,1.684,194,2.756,199,2.835,206,2.585,207,0.918,211,1.063,220,1.684,226,1.684,245,0.918,246,2.053,255,0.802,290,2.756,291,2.178,294,1.063,301,3.084,302,1.063,304,2.378,305,2.237,306,2.378,307,2.091,308,1.684,309,2.378,331,2.378,351,1.258,352,0.918,374,1.063,398,1.258,401,1.258,404,3.986,407,1.063,408,4.789,409,2.46,410,1.553,411,1.553,412,1.553,413,1.553,414,1.258,415,1.553,416,1.553,417,1.553,418,1.553,419,1.553,420,1.553,421,1.553,422,1.258,423,1.553,424,4.708,425,1.553,426,5.072,427,1.553,428,3.054,429,1.553,430,1.553,431,2.46,432,1.258,433,3.474,434,1.553,435,4.027,436,3.786,437,1.553,438,4.978,439,1.553,440,3.474,441,1.553,442,1.553,443,1.553,444,1.553,445,3.474,446,1.553,447,2.46,448,1.553,449,3.054,450,1.553,451,1.553,452,1.553,453,1.553,454,1.553,455,3.054,456,1.553,457,1.553,458,1.553,459,2.46,460,1.553,461,1.553,462,1.553,463,1.553,464,1.553,465,1.553,466,1.553,467,3.054,468,1.553,469,2.46,470,1.553,471,1.553,472,1.553,473,3.054,474,1.553,475,1.258,476,1.553,477,3.474,478,1.553,479,1.553,480,1.553,481,1.553,482,1.553,483,1.553,484,1.553,485,1.553,486,1.553,487,1.553,488,2.46,489,2.46,490,3.054,491,1.553,492,3.054,493,2.46,494,1.553,495,2.46,496,3.054,497,1.553,498,1.553,499,2.46,500,2.46,501,1.553,502,1.553,503,1.553,504,1.553,505,1.553,506,1.553,507,1.553,508,1.553,509,1.553,510,2.46,511,1.553,512,1.553,513,5.266,514,1.553,515,1.553,516,3.054,517,1.553,518,1.553,519,1.553,520,1.553,521,1.553,522,1.553,523,1.553,524,1.553,525,1.553,526,3.474,527,2.46,528,2.473,529,1.553,530,1.553,531,1.553,532,1.553,533,1.553,534,2.46,535,1.553,536,1.553,537,1.553,538,1.553,539,1.553,540,2.46,541,2.46,542,1.553,543,1.553,544,1.553,545,1.553,546,2.46,547,1.553,548,1.553,549,1.553,550,1.553,551,1.553,552,1.553,553,1.553,554,1.553,555,1.553,556,1.553,557,1.553,558,1.553,559,1.553,560,1.553,561,1.553,562,1.553,563,1.553,564,1.553,565,1.553,566,3.054,567,1.553,568,2.46,569,1.553,570,1.553,571,1.553,572,1.553,573,3.054,574,1.553,575,2.46,576,1.553,577,1.553,578,1.553,579,1.553,580,4.027,581,1.553,582,1.553,583,1.553,584,1.553,585,2.46,586,2.46,587,1.553,588,1.553,589,1.992,590,1.553,591,1.553,592,1.553,593,1.553,594,1.553,595,1.553,596,1.553,597,1.553,598,2.46,599,2.46,600,1.553,601,1.553,602,1.553,603,1.553,604,1.553,605,1.553,606,2.46,607,3.054,608,1.553,609,1.553,610,1.553,611,1.553,612,1.553,613,1.553,614,1.553,615,1.553,616,1.553,617,1.553,618,1.553,619,1.553,620,1.553,621,1.553,622,1.063,623,1.258]],["title/license.html",[406,1.947,407,1.646,622,1.646]],["body/license.html",[14,0.04,93,1.454,131,0.033,132,0.04,133,0.033,312,3.103,475,3.103,528,3.103,589,3.103,622,2.623,623,3.103,624,5.004,625,3.832,626,3.832,627,3.832,628,4.649,629,3.832,630,3.832,631,3.832,632,3.832,633,3.832,634,3.832,635,4.649,636,5.573,637,3.832,638,3.832,639,3.832,640,5.004,641,3.832,642,4.649,643,3.832,644,3.832,645,3.832,646,3.832,647,3.832,648,3.832,649,3.832,650,3.832,651,3.832,652,4.649,653,3.832,654,3.832,655,3.832,656,3.832,657,3.832,658,3.832,659,3.832,660,4.649,661,4.649,662,3.832,663,3.832,664,3.832,665,3.832,666,3.832,667,3.832,668,3.832,669,3.832,670,3.832,671,3.832,672,3.832,673,3.832,674,3.832,675,3.832,676,3.832,677,3.832,678,3.832,679,3.832,680,3.832,681,3.832,682,3.832,683,3.832,684,3.832,685,3.832,686,3.832,687,3.103,688,3.832,689,3.832]],["title/modules.html",[292,2.633]],["body/modules.html",[14,0.043,131,0.038,132,0.043,133,0.038,291,2.298,292,3.047,690,4.452,691,4.452,692,4.452]],["title/overview.html",[693,3.115]],["body/overview.html",[2,1.359,14,0.043,131,0.037,132,0.043,133,0.037,136,2.975,290,3.428,305,2.569,310,2.975,352,2.569,414,3.52,422,3.52,432,3.52,687,3.52,693,3.52,694,4.347,695,4.347,696,5.009,697,4.347,698,4.347]],["title/miscellaneous/typealiases.html",[371,0.851,699,3.418]],["body/miscellaneous/typealiases.html",[6,0.942,9,0.605,13,0.54,14,0.047,74,1.135,75,1.074,76,0.821,77,1.381,78,1.664,83,1.854,88,0.418,89,1.102,90,1.854,97,1.135,101,0.821,102,1.786,103,1.786,104,1.854,105,1.664,108,1.664,109,0.854,110,1.786,113,0.709,116,1.664,120,1.664,121,0.989,122,1.135,131,0.033,132,0.04,133,0.033,137,2.013,138,2.426,156,2.777,371,1.381,373,3.89,376,3.159,700,3.9]],["title/miscellaneous/variables.html",[371,0.851,701,2.768]],["body/miscellaneous/variables.html",[6,0.718,9,0.462,13,0.6,14,0.05,16,0.833,26,1.983,27,1.053,28,0.956,29,1.053,30,0.862,31,1.053,32,0.72,33,1.053,34,0.956,35,1.053,36,0.956,37,1.053,38,0.956,39,1.053,40,0.956,41,1.053,42,0.516,43,1.053,44,0.956,45,1.053,46,0.956,47,1.053,48,0.956,49,1.053,50,0.72,51,1.053,52,0.956,53,1.053,54,0.956,55,1.053,56,0.956,57,1.053,58,1.237,59,1.053,60,1.237,61,1.053,67,0.956,68,0.956,69,1.09,70,0.956,71,1.09,72,0.956,73,1.09,91,0.998,131,0.025,132,0.034,133,0.025,152,1.796,153,1.586,154,1.586,255,2.953,299,3.915,339,2.409,342,2.409,371,1.053,373,3.834,701,2.409,702,4.74,703,5.26,704,2.975,705,2.975,706,2.975,707,2.975,708,2.975,709,2.975,710,2.975,711,2.975,712,2.975,713,2.975,714,2.975,715,2.975]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":414,"title":{},"body":{"index.html":{},"overview.html":{}}}],["1/1",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":422,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.5.4",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["2018",{"_index":626,"title":{},"body":{"license.html":{}}}],["3",{"_index":451,"title":{},"body":{"index.html":{}}}],["3.1",{"_index":454,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":465,"title":{},"body":{"index.html":{}}}],["3.10",{"_index":579,"title":{},"body":{"index.html":{}}}],["3.10.1",{"_index":584,"title":{},"body":{"index.html":{}}}],["3.10.2",{"_index":588,"title":{},"body":{"index.html":{}}}],["3.10.3",{"_index":590,"title":{},"body":{"index.html":{}}}],["3.10.4",{"_index":591,"title":{},"body":{"index.html":{}}}],["3.10.5",{"_index":594,"title":{},"body":{"index.html":{}}}],["3.2",{"_index":472,"title":{},"body":{"index.html":{}}}],["3.3",{"_index":489,"title":{},"body":{"index.html":{}}}],["3.4",{"_index":512,"title":{},"body":{"index.html":{}}}],["3.5",{"_index":514,"title":{},"body":{"index.html":{}}}],["3.5.1",{"_index":515,"title":{},"body":{"index.html":{}}}],["3.5.1.1",{"_index":517,"title":{},"body":{"index.html":{}}}],["3.5.1.2",{"_index":519,"title":{},"body":{"index.html":{}}}],["3.5.1.3",{"_index":520,"title":{},"body":{"index.html":{}}}],["3.5.2",{"_index":521,"title":{},"body":{"index.html":{}}}],["3.5.3",{"_index":522,"title":{},"body":{"index.html":{}}}],["3.5.4",{"_index":523,"title":{},"body":{"index.html":{}}}],["3.6",{"_index":524,"title":{},"body":{"index.html":{}}}],["3.6.1",{"_index":529,"title":{},"body":{"index.html":{}}}],["3.6.1.1",{"_index":530,"title":{},"body":{"index.html":{}}}],["3.6.1.2",{"_index":543,"title":{},"body":{"index.html":{}}}],["3.6.1.3",{"_index":549,"title":{},"body":{"index.html":{}}}],["3.6.2",{"_index":550,"title":{},"body":{"index.html":{}}}],["3.6.3",{"_index":551,"title":{},"body":{"index.html":{}}}],["3.6.4",{"_index":552,"title":{},"body":{"index.html":{}}}],["3.7",{"_index":553,"title":{},"body":{"index.html":{}}}],["3.7.1",{"_index":554,"title":{},"body":{"index.html":{}}}],["3.7.2",{"_index":556,"title":{},"body":{"index.html":{}}}],["3.7.2.1",{"_index":557,"title":{},"body":{"index.html":{}}}],["3.7.2.2",{"_index":558,"title":{},"body":{"index.html":{}}}],["3.7.2.3",{"_index":559,"title":{},"body":{"index.html":{}}}],["3.7.3",{"_index":560,"title":{},"body":{"index.html":{}}}],["3.7.4",{"_index":561,"title":{},"body":{"index.html":{}}}],["3.7.5",{"_index":562,"title":{},"body":{"index.html":{}}}],["3.8",{"_index":563,"title":{},"body":{"index.html":{}}}],["3.9",{"_index":564,"title":{},"body":{"index.html":{}}}],["4",{"_index":597,"title":{},"body":{"index.html":{}}}],["5",{"_index":610,"title":{},"body":{"index.html":{}}}],["50",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":621,"title":{},"body":{"index.html":{}}}],["6.5.2",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":698,"title":{},"body":{"overview.html":{}}}],["8.2.3",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["_____________________________________________________________________________",{"_index":172,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers",{"_index":191,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers[key",{"_index":198,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["above",{"_index":659,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":117,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["accepts",{"_index":545,"title":{},"body":{"index.html":{}}}],["acomponent",{"_index":500,"title":{},"body":{"index.html":{}}}],["action",{"_index":683,"title":{},"body":{"license.html":{}}}],["add",{"_index":417,"title":{},"body":{"index.html":{}}}],["ahin",{"_index":613,"title":{},"body":{"index.html":{}}}],["ali",{"_index":612,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":700,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allguards",{"_index":258,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["allguards.reduce((prev",{"_index":261,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["and/or",{"_index":650,"title":{},"body":{"license.html":{}}}],["angular",{"_index":409,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":22,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["angular/compiler",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":17,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["annotations",{"_index":412,"title":{},"body":{"index.html":{}}}],["aot",{"_index":598,"title":{},"body":{"index.html":{}}}],["api",{"_index":452,"title":{},"body":{"index.html":{}}}],["app",{"_index":442,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":425,"title":{},"body":{"index.html":{}}}],["append",{"_index":209,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["appmodule",{"_index":433,"title":{},"body":{"index.html":{}}}],["args",{"_index":92,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["args[bodyparamindex",{"_index":183,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["args[index",{"_index":177,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["arising",{"_index":686,"title":{},"body":{"license.html":{}}}],["array",{"_index":110,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["associated",{"_index":637,"title":{},"body":{"license.html":{}}}],["async",{"_index":168,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["authors",{"_index":677,"title":{},"body":{"license.html":{}}}],["available",{"_index":691,"title":{},"body":{"modules.html":{}}}],["await",{"_index":194,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base",{"_index":187,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base_handlers",{"_index":606,"title":{},"body":{"index.html":{}}}],["base_headers",{"_index":153,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base_url",{"_index":30,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_with_credentials",{"_index":154,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["basehandler",{"_index":607,"title":{},"body":{"index.html":{}}}],["baseheaders",{"_index":127,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["baseurl",{"_index":126,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["basic",{"_index":423,"title":{},"body":{"index.html":{}}}],["before",{"_index":525,"title":{},"body":{"index.html":{}}}],["best",{"_index":470,"title":{},"body":{"index.html":{}}}],["blob",{"_index":503,"title":{},"body":{"index.html":{}}}],["bodies",{"_index":36,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":178,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bodyparamindex",{"_index":179,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["boolean",{"_index":100,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["bootstrap",{"_index":695,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":692,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["builder",{"_index":474,"title":{},"body":{"index.html":{}}}],["builder.ts",{"_index":138,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["builder.ts:12",{"_index":143,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builder.ts:14",{"_index":146,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builds",{"_index":601,"title":{},"body":{"index.html":{}}}],["c",{"_index":625,"title":{},"body":{"license.html":{}}}],["cache.service",{"_index":574,"title":{},"body":{"index.html":{}}}],["call",{"_index":566,"title":{},"body":{"index.html":{}}}],["called",{"_index":568,"title":{},"body":{"index.html":{}}}],["calling",{"_index":565,"title":{},"body":{"index.html":{}}}],["calls",{"_index":459,"title":{},"body":{"index.html":{}}}],["cansend",{"_index":265,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["cansend(req",{"_index":538,"title":{},"body":{"index.html":{}}}],["cansend(request",{"_index":99,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["case",{"_index":253,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch",{"_index":276,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch(error",{"_index":227,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["chainhandlers",{"_index":237,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["chainhandlers(handlers",{"_index":389,"title":{},"body":{"miscellaneous/functions.html":{}}}],["charge",{"_index":632,"title":{},"body":{"license.html":{}}}],["check",{"_index":527,"title":{},"body":{"index.html":{}}}],["claim",{"_index":680,"title":{},"body":{"license.html":{}}}],["class",{"_index":88,"title":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["class/interface",{"_index":81,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["classes",{"_index":136,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"overview.html":{}}}],["classof",{"_index":90,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["client",{"_index":199,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["client(undefined",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client_guards",{"_index":34,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_handlers",{"_index":44,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_headers",{"_index":52,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_with_credentials",{"_index":56,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientconstructor",{"_index":1,"title":{"interfaces/ClientConstructor.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clienthandlers",{"_index":233,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientheaders",{"_index":200,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientinstance",{"_index":123,"title":{"interfaces/ClientInstance.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clientoptions",{"_index":125,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["code",{"_index":569,"title":{},"body":{"index.html":{}}}],["completely",{"_index":618,"title":{},"body":{"index.html":{}}}],["component",{"_index":440,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":658,"title":{},"body":{"license.html":{}}}],["config",{"_index":246,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["configure",{"_index":170,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["configured",{"_index":463,"title":{},"body":{"index.html":{}}}],["configures",{"_index":466,"title":{},"body":{"index.html":{}}}],["connection",{"_index":688,"title":{},"body":{"license.html":{}}}],["const",{"_index":24,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["construction",{"_index":572,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":11,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["constructor(injector",{"_index":602,"title":{},"body":{"index.html":{}}}],["constructor(private",{"_index":445,"title":{},"body":{"index.html":{}}}],["constructor(request",{"_index":141,"title":{},"body":{"classes/GuardForbid.html":{}}}],["context",{"_index":257,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["context)[next](request",{"_index":268,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next",{"_index":279,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next).cansend(request",{"_index":266,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next]).bind(context",{"_index":278,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next][error_handler",{"_index":277,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["contract",{"_index":684,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":611,"title":{},"body":{"index.html":{}}}],["cookies",{"_index":583,"title":{},"body":{"index.html":{}}}],["copies",{"_index":652,"title":{},"body":{"license.html":{}}}],["copy",{"_index":635,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":624,"title":{},"body":{"license.html":{}}}],["core",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":311,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":216,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["created",{"_index":570,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":211,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["credentials.decorator.ts",{"_index":348,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":107,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["damages",{"_index":681,"title":{},"body":{"license.html":{}}}],["data",{"_index":499,"title":{},"body":{"index.html":{}}}],["data.append('image",{"_index":504,"title":{},"body":{"index.html":{}}}],["deal",{"_index":639,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":689,"title":{},"body":{"license.html":{}}}],["declaration",{"_index":516,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":432,"title":{},"body":{"index.html":{},"overview.html":{}}}],["declarative",{"_index":411,"title":{},"body":{"index.html":{}}}],["declare",{"_index":531,"title":{},"body":{"index.html":{}}}],["declared",{"_index":467,"title":{},"body":{"index.html":{}}}],["decorated",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["decorator",{"_index":404,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["decorators",{"_index":473,"title":{},"body":{"index.html":{}}}],["default",{"_index":255,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":94,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["defined",{"_index":142,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"index.html":{}}}],["defines",{"_index":581,"title":{},"body":{"index.html":{}}}],["defining",{"_index":464,"title":{},"body":{"index.html":{}}}],["delete",{"_index":69,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delete(path",{"_index":483,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":352,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":288,"title":{},"body":{"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{}}}],["descriptor",{"_index":159,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["descriptor.value",{"_index":167,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["determined",{"_index":513,"title":{},"body":{"index.html":{}}}],["developed",{"_index":596,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":648,"title":{},"body":{"license.html":{}}}],["docs",{"_index":453,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":312,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":532,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":478,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":171,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["endpoint.replace",{"_index":176,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["enum",{"_index":65,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["enumerations",{"_index":372,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":139,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["error_handler",{"_index":46,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorhandler",{"_index":321,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["errorhandlers",{"_index":555,"title":{},"body":{"index.html":{}}}],["especially",{"_index":586,"title":{},"body":{"index.html":{}}}],["etc",{"_index":495,"title":{},"body":{"index.html":{}}}],["event",{"_index":676,"title":{},"body":{"license.html":{}}}],["example",{"_index":424,"title":{},"body":{"index.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["exports",{"_index":310,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["express",{"_index":667,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["false",{"_index":226,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["files",{"_index":638,"title":{},"body":{"license.html":{}}}],["fill",{"_index":491,"title":{},"body":{"index.html":{}}}],["first",{"_index":546,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":672,"title":{},"body":{"license.html":{}}}],["following",{"_index":657,"title":{},"body":{"license.html":{}}}],["forbad",{"_index":162,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["forbidden",{"_index":567,"title":{},"body":{"index.html":{}}}],["forget",{"_index":533,"title":{},"body":{"index.html":{}}}],["fork",{"_index":616,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":492,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":295,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["forroot(undefined",{"_index":296,"title":{},"body":{"modules/RestModule.html":{}}}],["free",{"_index":631,"title":{},"body":{"license.html":{}}}],["function",{"_index":89,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(this",{"_index":169,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["functionality",{"_index":458,"title":{},"body":{"index.html":{}}}],["functions",{"_index":374,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["functionsof",{"_index":83,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":655,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":480,"title":{},"body":{"index.html":{}}}],["getting",{"_index":406,"title":{"index.html":{},"license.html":{}},"body":{}}],["globalhandlers",{"_index":229,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["going",{"_index":476,"title":{},"body":{"index.html":{}}}],["granted",{"_index":630,"title":{},"body":{"license.html":{}}}],["graph",{"_index":690,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":97,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["guardforbid",{"_index":135,"title":{"classes/GuardForbid.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["guardforbid(request",{"_index":228,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardfunction",{"_index":102,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guardfunctions",{"_index":393,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardfunctionsof",{"_index":103,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guards",{"_index":32,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["guards([posttodoguard",{"_index":540,"title":{},"body":{"index.html":{}}}],["guards(guardfunctions",{"_index":392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardspromise",{"_index":222,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardspromise.then",{"_index":238,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardtype",{"_index":104,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handle",{"_index":112,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["handler",{"_index":111,"title":{"interfaces/Handler.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["handler(original",{"_index":284,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handler.decorator.ts",{"_index":320,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlerfunction",{"_index":105,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlerfunctionsof",{"_index":108,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":42,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["handlers(handlers",{"_index":394,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers.reduce((prev",{"_index":274,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handlersof",{"_index":109,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["head",{"_index":71,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["head(path",{"_index":486,"title":{},"body":{"index.html":{}}}],["header",{"_index":190,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["header(name",{"_index":395,"title":{},"body":{"miscellaneous/functions.html":{}}}],["header[key",{"_index":205,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headerinjector",{"_index":518,"title":{},"body":{"index.html":{}}}],["headerinjectorresponse",{"_index":116,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headerinjectortype",{"_index":120,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":50,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["headers(headers",{"_index":396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headers.append(key",{"_index":197,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headers[method](name",{"_index":210,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headersclientparam",{"_index":122,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersinjector",{"_index":118,"title":{"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["headersobject",{"_index":113,"title":{"interfaces/HeadersObject.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersparam",{"_index":121,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hello",{"_index":443,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":629,"title":{},"body":{"license.html":{}}}],["holders",{"_index":678,"title":{},"body":{"license.html":{}}}],["http",{"_index":62,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["http://localhost:3000",{"_index":431,"title":{},"body":{"index.html":{}}}],["http_client",{"_index":28,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpclient",{"_index":18,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpclientmodule",{"_index":303,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["httperrorresponse",{"_index":21,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpheaders",{"_index":148,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpparams",{"_index":149,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httprequest",{"_index":19,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["httprequest(method",{"_index":254,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpresponse",{"_index":20,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["id",{"_index":509,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":493,"title":{},"body":{"index.html":{}}}],["implements",{"_index":535,"title":{},"body":{"index.html":{}}}],["implied",{"_index":668,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["imports",{"_index":304,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["included",{"_index":662,"title":{},"body":{"license.html":{}}}],["including",{"_index":642,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":286,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["inject",{"_index":119,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["injectable",{"_index":95,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["injectable.handle.bind(injectable",{"_index":281,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectable.handle[error_handler",{"_index":280,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injections",{"_index":60,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('base_headers",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('base_with_credentials",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_base_url",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_handlers",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":16,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injecttoken",{"_index":328,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["injecttoken(token",{"_index":397,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inserttodo(@body",{"_index":437,"title":{},"body":{"index.html":{}}}],["inside",{"_index":468,"title":{},"body":{"index.html":{}}}],["install",{"_index":420,"title":{},"body":{"index.html":{}}}],["installation",{"_index":415,"title":{},"body":{"index.html":{}}}],["instance",{"_index":192,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["instance.inject",{"_index":195,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["instanceof",{"_index":269,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["interface/class",{"_index":78,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["js",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["jsonp",{"_index":73,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["jsonp(path",{"_index":487,"title":{},"body":{"index.html":{}}}],["key",{"_index":114,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["keyof",{"_index":85,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["kind",{"_index":666,"title":{},"body":{"license.html":{}}}],["legend",{"_index":694,"title":{},"body":{"overview.html":{}}}],["liability",{"_index":682,"title":{},"body":{"license.html":{}}}],["liable",{"_index":679,"title":{},"body":{"license.html":{}}}],["license",{"_index":622,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":643,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":599,"title":{},"body":{"index.html":{}}}],["limited",{"_index":669,"title":{},"body":{"license.html":{}}}],["literal",{"_index":12,"title":{},"body":{"interfaces/ClientConstructor.html":{}}}],["make",{"_index":447,"title":{},"body":{"index.html":{}}}],["makes",{"_index":461,"title":{},"body":{"index.html":{}}}],["mark",{"_index":490,"title":{},"body":{"index.html":{}}}],["marked",{"_index":460,"title":{},"body":{"index.html":{}}}],["marks",{"_index":455,"title":{},"body":{"index.html":{}}}],["matching",{"_index":132,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":671,"title":{},"body":{"license.html":{}}}],["merge",{"_index":646,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":76,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["methodhandlers",{"_index":235,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodheaders",{"_index":202,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodname",{"_index":166,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":64,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["miscellaneous",{"_index":371,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":623,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":645,"title":{},"body":{"license.html":{}}}],["module",{"_index":290,"title":{"modules/RestModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":292,"title":{"modules.html":{}},"body":{"modules/RestModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":300,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["more",{"_index":413,"title":{},"body":{"index.html":{}}}],["multi",{"_index":308,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["name",{"_index":145,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":77,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["never}[keyof",{"_index":87,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["new",{"_index":91,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":231,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next(request",{"_index":267,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next.prototype",{"_index":264,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next[error_handler",{"_index":282,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ngmodule",{"_index":301,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["noninfringement",{"_index":675,"title":{},"body":{"license.html":{}}}],["notice",{"_index":660,"title":{},"body":{"license.html":{}}}],["now",{"_index":620,"title":{},"body":{"index.html":{}}}],["npm",{"_index":419,"title":{},"body":{"index.html":{}}}],["null",{"_index":181,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["number",{"_index":124,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["object",{"_index":8,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["object.entries((target.constructor[param_headers",{"_index":208,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries((target.constructor[paths",{"_index":175,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries((target.constructor[queries",{"_index":185,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(_headers",{"_index":196,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(header",{"_index":204,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["observable",{"_index":150,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["obtaining",{"_index":634,"title":{},"body":{"license.html":{}}}],["on_client_ready",{"_index":58,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["onclientready",{"_index":331,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onready",{"_index":576,"title":{},"body":{"index.html":{}}}],["option",{"_index":580,"title":{},"body":{"index.html":{}}}],["optional",{"_index":134,"title":{},"body":{"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":72,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options(path",{"_index":485,"title":{},"body":{"index.html":{}}}],["original",{"_index":106,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["otherservices",{"_index":603,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":475,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":687,"title":{},"body":{"license.html":{},"overview.html":{}}}],["outgoing",{"_index":582,"title":{},"body":{"index.html":{}}}],["overview",{"_index":693,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":84,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["package",{"_index":351,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":174,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["param_headers",{"_index":48,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":206,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parameterdecorator",{"_index":388,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":144,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":219,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["particular",{"_index":673,"title":{},"body":{"license.html":{}}}],["passed",{"_index":263,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["patch",{"_index":70,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["patch('todos/:id",{"_index":506,"title":{},"body":{"index.html":{}}}],["patch(path",{"_index":484,"title":{},"body":{"index.html":{}}}],["patchtodo(@body",{"_index":507,"title":{},"body":{"index.html":{}}}],["path",{"_index":164,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["path('id",{"_index":508,"title":{},"body":{"index.html":{}}}],["path(key",{"_index":400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paths",{"_index":38,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":628,"title":{},"body":{"license.html":{}}}],["permit",{"_index":653,"title":{},"body":{"license.html":{}}}],["person",{"_index":633,"title":{},"body":{"license.html":{}}}],["persons",{"_index":654,"title":{},"body":{"license.html":{}}}],["placeholder",{"_index":402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portions",{"_index":664,"title":{},"body":{"license.html":{}}}],["post",{"_index":67,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post('image",{"_index":497,"title":{},"body":{"index.html":{}}}],["post('todos",{"_index":436,"title":{},"body":{"index.html":{}}}],["post(path",{"_index":481,"title":{},"body":{"index.html":{}}}],["posttodo(@body",{"_index":488,"title":{},"body":{"index.html":{}}}],["posttodo(todo",{"_index":449,"title":{},"body":{"index.html":{}}}],["posttodoguard",{"_index":534,"title":{},"body":{"index.html":{}}}],["posttodoguard(req",{"_index":547,"title":{},"body":{"index.html":{}}}],["posttodos(todo",{"_index":541,"title":{},"body":{"index.html":{}}}],["prev",{"_index":232,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev.then(passed",{"_index":262,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev[method](res",{"_index":283,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["private",{"_index":575,"title":{},"body":{"index.html":{}}}],["process",{"_index":221,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["projects/.../body.decorator.ts",{"_index":375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../client.decorator.ts",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../error",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../guards.decorator.ts",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../handlers.decorator.ts",{"_index":380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../header.decorator.ts",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../headers.decorator.ts",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../inject",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../on",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../path.decorator.ts",{"_index":385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../query.decorator.ts",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../request",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../request.decorator.ts",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../tokens.ts",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":373,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../with",{"_index":387,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/body.decorator.ts",{"_index":315,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/client.decorator.ts",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/error",{"_index":319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/guards.decorator.ts",{"_index":322,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/handlers.decorator.ts",{"_index":323,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/header.decorator.ts",{"_index":324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/headers.decorator.ts",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/inject",{"_index":326,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/on",{"_index":329,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/path.decorator.ts",{"_index":332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/query.decorator.ts",{"_index":335,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/request",{"_index":137,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/rest/src/lib/request.decorator.ts",{"_index":339,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/rest.module.ts",{"_index":293,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["projects/rest/src/lib/rest.module.ts:29",{"_index":298,"title":{},"body":{"modules/RestModule.html":{}}}],["projects/rest/src/lib/tokens.ts",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts",{"_index":6,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts:54",{"_index":289,"title":{},"body":{"interfaces/RestGuard.html":{}}}],["projects/rest/src/lib/types.ts:68",{"_index":287,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["projects/rest/src/lib/types.ts:75",{"_index":285,"title":{},"body":{"classes/HeadersInjector.html":{}}}],["projects/rest/src/lib/with",{"_index":347,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":101,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["promise.resolve(true",{"_index":271,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["promiselike",{"_index":275,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"interfaces/RequestConfig.html":{},"interfaces/RootConfiguration.html":{}}}],["propertydecorator",{"_index":399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertydescriptor",{"_index":160,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":158,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["provide",{"_index":306,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["provided",{"_index":589,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":128,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["provider",{"_index":302,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["providers",{"_index":305,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":457,"title":{},"body":{"index.html":{}}}],["public",{"_index":140,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["publish",{"_index":647,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":674,"title":{},"body":{"license.html":{}}}],["put",{"_index":68,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["put(path",{"_index":482,"title":{},"body":{"index.html":{}}}],["queries",{"_index":40,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":184,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["query(key",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["query.append(param",{"_index":186,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ready.decorator.ts",{"_index":330,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refactored",{"_index":619,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":207,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["repository",{"_index":615,"title":{},"body":{"index.html":{}}}],["req.body.canbesent",{"_index":548,"title":{},"body":{"index.html":{}}}],["request",{"_index":63,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["requestbuilder",{"_index":338,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestbuilder(requestmethod.delete",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.get",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.head",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.jsonp",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.options",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.patch",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.post",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.put",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(type",{"_index":163,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["requestconfig",{"_index":240,"title":{"interfaces/RequestConfig.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["requestfactory",{"_index":241,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestfactory(method",{"_index":390,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requestfactory(type",{"_index":217,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod",{"_index":66,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{}}}],["requestmethod.delete",{"_index":248,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.get",{"_index":247,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.head",{"_index":249,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.jsonp",{"_index":250,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.options",{"_index":251,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.patch",{"_index":244,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.post",{"_index":242,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.put",{"_index":243,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requests",{"_index":496,"title":{},"body":{"index.html":{}}}],["res",{"_index":273,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["reset",{"_index":697,"title":{},"body":{"overview.html":{}}}],["rest",{"_index":96,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rest_handlers",{"_index":152,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["restclient",{"_index":456,"title":{},"body":{"index.html":{}}}],["restguard",{"_index":98,"title":{"interfaces/RestGuard.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["restmodule",{"_index":291,"title":{"modules/RestModule.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"modules.html":{}}}],["restmodule.forroot",{"_index":605,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({baseurl",{"_index":430,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({withcredentials",{"_index":587,"title":{},"body":{"index.html":{}}}],["restor",{"_index":418,"title":{},"body":{"index.html":{}}}],["restpropertydecorator",{"_index":156,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":641,"title":{},"body":{"license.html":{}}}],["result",{"_index":131,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.topromise",{"_index":270,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["results",{"_index":133,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["returning",{"_index":479,"title":{},"body":{"index.html":{}}}],["returns",{"_index":74,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["right",{"_index":571,"title":{},"body":{"index.html":{}}}],["rights",{"_index":644,"title":{},"body":{"license.html":{}}}],["root",{"_index":129,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rootconfiguration",{"_index":297,"title":{"interfaces/RootConfiguration.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["run",{"_index":220,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["rxjs",{"_index":151,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"dependencies.html":{}}}],["save",{"_index":421,"title":{},"body":{"index.html":{}}}],["secret",{"_index":469,"title":{},"body":{"index.html":{}}}],["selector",{"_index":441,"title":{},"body":{"index.html":{}}}],["sell",{"_index":651,"title":{},"body":{"license.html":{}}}],["sent",{"_index":526,"title":{},"body":{"index.html":{}}}],["service",{"_index":462,"title":{},"body":{"index.html":{}}}],["services",{"_index":608,"title":{},"body":{"index.html":{}}}],["session",{"_index":536,"title":{},"body":{"index.html":{}}}],["sessionservice",{"_index":537,"title":{},"body":{"index.html":{}}}],["set",{"_index":189,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["shall",{"_index":661,"title":{},"body":{"license.html":{}}}],["shouldn't",{"_index":604,"title":{},"body":{"index.html":{}}}],["single",{"_index":544,"title":{},"body":{"index.html":{}}}],["software",{"_index":636,"title":{},"body":{"license.html":{}}}],["something",{"_index":448,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["source.then(res",{"_index":272,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["specified",{"_index":75,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":407,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["startguardcheck",{"_index":256,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["startguardcheck(target",{"_index":223,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["statements",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":294,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["steven166/angular",{"_index":617,"title":{},"body":{"index.html":{}}}],["string",{"_index":115,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["subject",{"_index":656,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":649,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":663,"title":{},"body":{"license.html":{}}}],["super('a",{"_index":161,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["supports",{"_index":600,"title":{},"body":{"index.html":{}}}],["switch",{"_index":252,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["symbol",{"_index":26,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('base_url",{"_index":31,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('bodies",{"_index":37,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_guards",{"_index":35,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_handlers",{"_index":45,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_headers",{"_index":53,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_with_credentials",{"_index":57,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('error_handler",{"_index":47,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('guards",{"_index":33,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('handlers",{"_index":43,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('headers",{"_index":51,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('http_client",{"_index":29,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('injections",{"_index":61,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('injector",{"_index":27,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('on_client_ready",{"_index":59,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('param_headers",{"_index":49,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('paths",{"_index":39,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('queries",{"_index":41,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('with_credentials",{"_index":55,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":80,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["t[p",{"_index":86,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["table",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":157,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["target.constructor[bodies",{"_index":180,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][client_guards",{"_index":259,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][methodname",{"_index":260,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][client_handlers",{"_index":234,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][methodname",{"_index":236,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[headers",{"_index":201,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials",{"_index":213,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][client_with_credentials",{"_index":214,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][methodname",{"_index":215,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["template",{"_index":79,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["thalesrc",{"_index":627,"title":{},"body":{"license.html":{}}}],["thalesrc/angular",{"_index":408,"title":{},"body":{"index.html":{}}}],["then(result",{"_index":224,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this.client.inserttodo(todo",{"_index":450,"title":{},"body":{"index.html":{}}}],["this.client.patchtodo(todo",{"_index":511,"title":{},"body":{"index.html":{}}}],["this.client.posttodo(todo",{"_index":501,"title":{},"body":{"index.html":{}}}],["this.client.todos().then(todos",{"_index":446,"title":{},"body":{"index.html":{}}}],["this.client.uploadimage(data",{"_index":505,"title":{},"body":{"index.html":{}}}],["this.session.loggedin$.pipe(first()).topromise",{"_index":539,"title":{},"body":{"index.html":{}}}],["this.todocacheservice.cachetodos(todos",{"_index":578,"title":{},"body":{"index.html":{}}}],["this.todos",{"_index":577,"title":{},"body":{"index.html":{}}}],["this[base_url]}/${endpoint",{"_index":218,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[header",{"_index":203,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[http_client].request(request).topromise",{"_index":239,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_headers",{"_index":188,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_with_credentials",{"_index":212,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(header",{"_index":193,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(rest_handlers)).reduce((prev",{"_index":230,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["throw",{"_index":225,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["todo",{"_index":438,"title":{},"body":{"index.html":{}}}],["todo.client",{"_index":427,"title":{},"body":{"index.html":{}}}],["todo.client.ts",{"_index":434,"title":{},"body":{"index.html":{}}}],["todo.component",{"_index":429,"title":{},"body":{"index.html":{}}}],["todo.component.ts",{"_index":439,"title":{},"body":{"index.html":{}}}],["todocacheservice",{"_index":573,"title":{},"body":{"index.html":{}}}],["todoclient",{"_index":426,"title":{},"body":{"index.html":{}}}],["todocomponent",{"_index":428,"title":{},"body":{"index.html":{}}}],["todoid",{"_index":510,"title":{},"body":{"index.html":{}}}],["todomodule",{"_index":542,"title":{},"body":{"index.html":{}}}],["todos",{"_index":435,"title":{},"body":{"index.html":{}}}],["token",{"_index":398,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["token.decorator.ts",{"_index":327,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tokens",{"_index":155,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["top",{"_index":592,"title":{},"body":{"index.html":{}}}],["topsecret",{"_index":609,"title":{},"body":{"index.html":{}}}],["tort",{"_index":685,"title":{},"body":{"license.html":{}}}],["true",{"_index":309,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":699,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":182,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["types",{"_index":147,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["typescript",{"_index":410,"title":{},"body":{"index.html":{}}}],["u",{"_index":82,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["undefined",{"_index":173,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["unless",{"_index":585,"title":{},"body":{"index.html":{}}}],["uploadimage(@body",{"_index":498,"title":{},"body":{"index.html":{}}}],["uploadimage(image",{"_index":502,"title":{},"body":{"index.html":{}}}],["uploads",{"_index":494,"title":{},"body":{"index.html":{}}}],["url",{"_index":245,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["use",{"_index":93,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["used",{"_index":477,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":307,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["util",{"_index":471,"title":{},"body":{"index.html":{}}}],["value",{"_index":299,"title":{},"body":{"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":701,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":670,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":665,"title":{},"body":{"license.html":{}}}],["whether",{"_index":528,"title":{},"body":{"index.html":{},"license.html":{}}}],["with_credentials",{"_index":54,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["withcredentials",{"_index":130,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["withcredentials(true",{"_index":593,"title":{},"body":{"index.html":{}}}],["withcredentials(withcredentials",{"_index":405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withcredentialsparam",{"_index":595,"title":{},"body":{"index.html":{}}}],["without",{"_index":640,"title":{},"body":{"license.html":{}}}],["world",{"_index":444,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":416,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":696,"title":{},"body":{"overview.html":{}}}],["zçelik",{"_index":614,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ClientConstructor.html":{"url":"interfaces/ClientConstructor.html","title":"interface - ClientConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Object\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constructor\n                                    \n                                \n                                \n                                    \n                                        constructor:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientInstance.html":{"url":"interfaces/ClientInstance.html","title":"interface - ClientInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        BASE_URL\n                                \n                                \n                                        HTTP_CLIENT\n                                \n                                \n                                        INJECTOR\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        BASE_URL\n                                    \n                                \n                                \n                                    \n                                        BASE_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        HTTP_CLIENT\n                                    \n                                \n                                \n                                    \n                                        HTTP_CLIENT:         HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        INJECTOR\n                                    \n                                \n                                \n                                    \n                                        INJECTOR:         Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Injector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        guards\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        providedIn\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersClientParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersClientParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guards\n                                    \n                                \n                                \n                                    \n                                        guards:         Guard\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Guard\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providedIn\n                                    \n                                \n                                \n                                    \n                                        providedIn:     Type | \"root\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Type | \"root\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuardForbid.html":{"url":"classes/GuardForbid.html","title":"class - GuardForbid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuardForbid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: HttpRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/request-builder.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    HttpRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpRequest\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/rest/src/lib/request-builder.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS,\n          CLIENT_WITH_CREDENTIALS, PATHS, QUERIES } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Queries\n        // _____________________________________________________________________________\n        let query = new HttpParams();\n\n        for (const [param, index] of Object.entries((target.constructor[QUERIES] || {})[methodName] || {})) {\n          query = query.append(param, args[index]);\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials, params: query });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n  params: HttpParams;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Handler.html":{"url":"interfaces/Handler.html","title":"interface - Handler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Handler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handle\n                                    \n                                \n                                \n                                    \n                                        handle:         HandlerFunction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlerFunction\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeadersInjector.html":{"url":"classes/HeadersInjector.html","title":"class - HeadersInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeadersInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                inject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            inject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inject()\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         HeaderInjectorResponse\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeadersObject.html":{"url":"interfaces/HeadersObject.html","title":"interface - HeadersObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeadersObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | []\n\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/types.ts:68\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestConfig.html":{"url":"interfaces/RequestConfig.html","title":"interface - RequestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        headers\n                                \n                                \n                                        params\n                                \n                                \n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         HttpHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpHeaders\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                    \n                                \n                                \n                                    \n                                        params:         HttpParams\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpParams\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS,\n          CLIENT_WITH_CREDENTIALS, PATHS, QUERIES } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Queries\n        // _____________________________________________________________________________\n        let query = new HttpParams();\n\n        for (const [param, index] of Object.entries((target.constructor[QUERIES] || {})[methodName] || {})) {\n          query = query.append(param, args[index]);\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials, params: query });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n  params: HttpParams;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestGuard.html":{"url":"interfaces/RestGuard.html","title":"interface - RestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n            \n                Description\n            \n            \n                Use to define an injectable as a rest guard\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canSend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canSend\n                        \n                        \n                    \n                \n            \n            \n                \ncanSend(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\nexport const INJECTIONS: unique symbol = Symbol('INJECTIONS');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n    [INJECTIONS]: {\n      [key: string]: any;\n    }\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(undefined: RootConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/rest.module.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                                RootConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootConfiguration.html":{"url":"interfaces/RootConfiguration.html","title":"interface - RootConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RootConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/rest/src/lib/body.decorator.ts\n            \n            function\n            Body\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/client.decorator.ts\n            \n            function\n            Client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/error-handler.decorator.ts\n            \n            function\n            ErrorHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/guards.decorator.ts\n            \n            function\n            Guards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/handlers.decorator.ts\n            \n            function\n            Handlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/header.decorator.ts\n            \n            function\n            Header\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/headers.decorator.ts\n            \n            function\n            Headers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/inject-token.decorator.ts\n            \n            function\n            InjectToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/on-client-ready.decorator.ts\n            \n            function\n            OnClientReady\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/path.decorator.ts\n            \n            function\n            Path\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/query.decorator.ts\n            \n            function\n            Query\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            class\n            GuardForbid\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            interface\n            RequestConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            chainHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestBuilder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            startGuardCheck\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Delete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Get\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Head\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Jsonp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Patch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Put\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/rest.module.ts\n            \n            interface\n            RootConfiguration\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            REST_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            class\n            HeadersInjector\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientConstructor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientInstance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientOptions\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            Handler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            HeadersObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            RestGuard\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BODIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ERROR_HANDLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HTTP_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            INJECTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            INJECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ON_CLIENT_READY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PARAM_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PATHS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            QUERIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/with-credentials.decorator.ts\n            \n            function\n            WithCredentials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.3\n        \n            @angular/common : ~8.2.3\n        \n            @angular/compiler : ~8.2.3\n        \n            @angular/core : ~8.2.3\n        \n            @angular/forms : ~8.2.3\n        \n            @angular/platform-browser : ~8.2.3\n        \n            @angular/platform-browser-dynamic : ~8.2.3\n        \n            @angular/router : ~8.2.3\n        \n            core-js : ^2.5.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.5.2\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RequestMethod   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RequestMethod\n                    \n                \n                    \n                        \n                            Http Request Methods\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 JSONP\n                            \n                        \n                        \n                            \n                                Value : JSONP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Body   (projects/.../body.decorator.ts)\n                        \n                        \n                            chainHandlers   (projects/.../request-builder.ts)\n                        \n                        \n                            Client   (projects/.../client.decorator.ts)\n                        \n                        \n                            ErrorHandler   (projects/.../error-handler.decorator.ts)\n                        \n                        \n                            Guards   (projects/.../guards.decorator.ts)\n                        \n                        \n                            Handlers   (projects/.../handlers.decorator.ts)\n                        \n                        \n                            Header   (projects/.../header.decorator.ts)\n                        \n                        \n                            Headers   (projects/.../headers.decorator.ts)\n                        \n                        \n                            InjectToken   (projects/.../inject-token.decorator.ts)\n                        \n                        \n                            OnClientReady   (projects/.../on-client-ready.decorator.ts)\n                        \n                        \n                            Path   (projects/.../path.decorator.ts)\n                        \n                        \n                            Query   (projects/.../query.decorator.ts)\n                        \n                        \n                            requestBuilder   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            startGuardCheck   (projects/.../request-builder.ts)\n                        \n                        \n                            WithCredentials   (projects/.../with-credentials.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/body.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Body\n                        \n                        \n                    \n                \n            \n            \n                \nBody()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ParameterDecorator\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            chainHandlers\n                        \n                        \n                    \n                \n            \n            \n                \nchainHandlers(handlers, context, source)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestBuilder\n                        \n                        \n                    \n                \n            \n            \n                \nrequestBuilder(type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RestPropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startGuardCheck\n                        \n                        \n                    \n                \n            \n            \n                \nstartGuardCheck(target, methodName, request, context)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    methodName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/client.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Client\n                        \n                        \n                    \n                \n            \n            \n                \nClient(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/error-handler.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ErrorHandler\n                        \n                        \n                    \n                \n            \n            \n                \nErrorHandler()\n                \n            \n\n\n\n\n        \n    \n    projects/rest/src/lib/guards.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Guards\n                        \n                        \n                    \n                \n            \n            \n                \nGuards(guardFunctions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    guardFunctions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/handlers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Handlers\n                        \n                        \n                    \n                \n            \n            \n                \nHandlers(handlers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/header.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Header\n                        \n                        \n                    \n                \n            \n            \n                \nHeader(name, replace)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replace\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/headers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Headers\n                        \n                        \n                    \n                \n            \n            \n                \nHeaders(headers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/inject-token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            InjectToken\n                        \n                        \n                    \n                \n            \n            \n                \nInjectToken(token)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/on-client-ready.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            OnClientReady\n                        \n                        \n                    \n                \n            \n            \n                \nOnClientReady()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/path.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Path\n                        \n                        \n                    \n                \n            \n            \n                \nPath(key)\n                \n            \n\n\n\n\n            \n                \n                    A parameter decorated with Path will replace the specified key in the url\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path placeholder key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/query.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Query\n                        \n                        \n                    \n                \n            \n            \n                \nQuery(key)\n                \n            \n\n\n\n\n            \n                \n                    Use this decorator to set a query parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request query name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/with-credentials.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithCredentials\n                        \n                        \n                    \n                \n            \n            \n                \nWithCredentials(withCredentials)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    withCredentials\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n@thalesrc/angular-rest\nAngular Rest Http Module with Typescript Declarative Annotations, Guards, Handlers and more\n\n1. Installation\nyarn add @thalesrc/angular-restor\nnpm install @thalesrc/angular-rest --save\n2. Basic Example\n// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\nimport { TodoClient } from './todo.client';\nimport { TodoComponent } from './todo.component';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({baseUrl: 'http://localhost:3000'})\n  ],\n  providers: [\n    TodoClient\n  ],\n  declarations: [\n    TodoComponent\n  ]\n})\nexport class AppModule {}\n// todo.client.ts\n\nimport { HttpRequest } from '@angular/common/http';\nimport { Client, Get, Post, Body } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public insertTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n// todo.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-todo',\n  template: 'Hello World'\n})\nexport class TodoComponent {\n  constructor(private client: TodoClient) {\n    this.client.todos().then(todos => {\n      // Make something with todos\n    });\n  }\n\n  async postTodo(todo: Todo): Promise {\n    return await this.client.insertTodo(todo);\n  }\n}\n\n3. API Docs\n\n3.1. Client Decorator\n@Client() decorator marks a class as RestClient and provides functionality to make Http calls with its marked methods.\nThis decorator also marks the class as Injectable() and makes it to function as an Angular Service.\nIt can be configured by defining a ClientOptions object as a parameter\n3.1.1. ClientOptions\nA ClientOptions object configures base options for the rest methods declared inside a @Client() class\ninterface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n}@Client({\n  baseUrl: 'http://localhost:3000',\n  baseHeaders: [{'Secret-Key': 'The best rest util is @thalesrc/angular-rest'}]\n  ...\n})\nexport class TodoClient {\n  ...\n}\n3.2. Request Method Decorators\nAll of these decorators marks a method in a @Client() as a request builder. path can be specified to define the endpoint path. Otherwise, the method name is going to be used as path.\nThe method return type should be defined as Promise and function should be empty but only returning null. Decorators will handle all the rest.\n\n@Get(path?: string)\n@Post(path?: string)\n@Put(path?: string)\n@Delete(path?: string)\n@Patch(path?: string)\n@Options(path?: string)\n@Head(path?: string)\n@Jsonp(path?: string)\n\nExample:\n@Client()\nexport class TodoClient {\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n3.3. Body Parameter Decorator\nMark a parameter with @Body() decorator to fill body object with it.\nA FormData instance can be used for image uploads etc.\nBody decorator can be used in only POST, PUT, PATCH requests\nExample:\n@Client()\nexport class TodoClient {\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n\n  @Post('image')\n  public uploadImage(@Body() data: FormData): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo): Promise {\n    return await this.client.postTodo(todo);\n  }\n\n  public async uploadImage(image: Blob): Promise {\n    const data = new FormData();\n    data.append('image', image);\n\n    return await this.client.uploadImage(data);\n  }\n}\n3.3. Path Parameter Decorator\nMark a parameter decorated with Path to replace the specified key in the url\nExample:\n@Client()\nexport class TodoClient {\n  @Patch('todos/:id')\n  public patchTodo(@Body() todo: Todo, @Path('id') id: string): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo, todoId: string): Promise {\n    return await this.client.patchTodo(todo, todoId);\n  }\n}\n3.4. Query Parameter Decorator\nto be determined\n\n3.5. Headers\nTo be determined\n3.5.1. Header Declaration Methods\nTo be determined\n3.5.1.1 HeaderInjector\nTo be determined\n3.5.1.2 HeadersObject\nTo be determined\n3.5.1.3 Headers as Client Method\nTo be determined\n3.5.2. Base Headers\nTo be determined\n3.5.3. Client Headers\nTo be determined\n3.5.4. Parameter Headers\nTo be determined\n\n3.6. Guards\nGuards run just before a request has been sent to check whether request should be sent or not\n3.6.1. Guard Declaration Methods\nGuards can be a function, a method of a client or an injectable of RestGuard\n3.6.1.1 RestGuard\nDefine an injectable as a rest guard and declare them as a guard (Base Guard, Client Guard, Method Guard) to check a request can be sent or not.\nDon't forget to provide them in a module\nExample:\n@Injectable()\nexport class PostTodoGuard implements RestGuard {\n constructor(private session: SessionService) {}\n\n async canSend(req: HttpRequest): Promise {\n   return await this.session.loggedIn$.pipe(first()).toPromise()\n }\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([PostTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}\n\n@NgModule({\n providers: [\n   TodoClient,\n   PostTodoGuard\n ]\n})\nexport class TodoModule {}3.6.1.2. Guard Function\nA single function can be a rest guard if it accepts first param as HttpRequest and returns whether boolean or Promise\nExample:\nfunction postTodoGuard(req: HttpRequest): boolean {\n  return req.body.canBeSent;\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([postTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}3.6.1.3. Guard Method\nTo be determined\n3.6.2. Base Guards\nTo be determined\n3.6.3. Client Guards\nTo be determined\n3.6.4. Method Guards\nTo be determined\n\n3.7. Handlers\nTo be determined\n3.7.1 ErrorHandlers\nTo be determined\n3.7.2 Handler Declaration Methods\nTo be determined\n3.7.2.1 Handler\nTo be determined\n3.7.2.2 Handler Function\nTo be determined\n3.7.2.3 Handler Method\nTo be determined\n3.7.3 Base Handlers\nTo be determined\n3.7.4 Client Handlers\nTo be determined\n3.7.5 Method Handlers\nTo be determined\n\n3.8. RestModule\nTo be determined\n\n3.9. OnClientReady Decorator\nIn client constructor functions, calling a rest call is forbidden. Because the client dependencies have not been set yet when the constructor function called.\nTo run some code when client instance created, @OnClientReady() decorator can be used. It will mark a method of a client to be called right after construction.\nExample:\nimport { Client, OnClientReady } from '@thalesrc/angular-rest';\nimport { TodoCacheService } from './todo-cache.service';\n\n@Client()\nexport class TodoClient {\n  constructor(\n    private todoCacheService: TodoCacheService\n  ) {}\n\n  @OnClientReady()\n  private onReady() {\n    const todos = await this.todos();\n\n    this.todoCacheService.cacheTodos(todos);\n  }\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n}\n3.10. WithCredentials Option\nDefines whether a request should be sent with outgoing credentials (cookies). Default true\n3.10.1. As Module Config\nIt can be set in module config as base option. That would configure for all requests unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({withCredentials: false})\n    ...\n  ],\n})\nexport class AppModule {}3.10.2. As Provider\nIt can be provided with the BASE_WITH_CREDENTIALS token as base option. That would also configure for all requests like As Module Config unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_WITH_CREDENTIALS } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule\n    ...\n  ],\n  providers: [\n    {provide: BASE_WITH_CREDENTIALS, useValue: false},\n    ...\n  ]\n})\nexport class AppModule {}3.10.3. As Client Config\nIt can be set in @Client() decorator as an option. That would configure withCredentials option for all the calls in that client.\nExample:\nimport { Client } from '@thalesrc/angular-rest';\n\n@Client({\n  withCredentials: true\n})\nexport class TodoClient {\n  ...\n}3.10.4. WithCredentials Decorator\nIt can be set by @WithCredentials() decorator on top a rest call. That would configure withCredentials option for only that call.\nExample:\nimport { Client, WithCredentials } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n  @Get()\n  @WithCredentials(true)\n  public todos(): Promise {\n    return null;\n  }\n}3.10.5. WithCredentialsParam Decorator\nto be developed\n\n4. Aot Limitations\nThis package supports aot builds, however there are some limitations.\n\nThe Injector should have been defined as the first parameter for every @Client constructor.\n\nimport { Injector } from '@angular/core';\n\n@Client()\nexport class TodoClient {\n  constructor(injector: Injector, otherServices: Etc) {\n\n  }\n}\nBase handlers and base headers shouldn't be defined in RestModule.forRoot static method. All of these should be provided in module providers\n\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_HEADERS, BASE_HANDLERS } from '@thalesrc/angular-rest';\n\nimport { BaseHeaders, BaseHandler } from './services';\n\n@NgModule({\n  imports: [RestModule],\n  providers: [\n    BaseHeaders,\n    BaseHandler,\n    {provide: BASE_HEADERS, useValue: [BaseHeaders, {'Secret-Key': 'topsecret'}], multi: true},\n    {provide: BASE_HANDLERS, useValue: [BaseHandler], multi: true},\n  ]\n})\nexport class AppModule {}\n5. Contributors\nAli Şahin Özçelik\nThis repository is started as a fork of steven166/angular-rest-client and completely refactored now\n\n6. License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Thalesrc\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassOf   (projects/.../types.ts)\n                        \n                        \n                            FunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            Guard   (projects/.../types.ts)\n                        \n                        \n                            GuardFunction   (projects/.../types.ts)\n                        \n                        \n                            GuardFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            GuardType   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunction   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            HandlersOf   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorResponse   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorType   (projects/.../types.ts)\n                        \n                        \n                            HeadersClientParam   (projects/.../types.ts)\n                        \n                        \n                            HeadersParam   (projects/.../types.ts)\n                        \n                        \n                            RestPropertyDecorator   (projects/.../request-builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    ClassOf\n                \n            \n            \n                \n                    Returns a class-function type of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FunctionsOf\n                \n            \n            \n                \n                    Returns specified type of method names of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Guard\n                \n            \n            \n                \n                        GuardType[] | GuardType\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunctionsOf\n                \n            \n            \n                \n                        FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardType\n                \n            \n            \n                \n                            GuardFunctionsOf | GuardFunction | ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunctionsOf\n                \n            \n            \n                \n                            FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlersOf\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorResponse\n                \n            \n            \n                \n                            HeadersObject | Promise\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorType\n                \n            \n            \n                \n                            ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersClientParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n    \n        \n            \n                \n                    \n                    RestPropertyDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_HEADERS   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_URL   (projects/.../types.ts)\n                        \n                        \n                            BASE_URL   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_WITH_CREDENTIALS   (projects/.../tokens.ts)\n                        \n                        \n                            BODIES   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_GUARDS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                        \n                            Delete   (projects/.../request.decorator.ts)\n                        \n                        \n                            ERROR_HANDLER   (projects/.../types.ts)\n                        \n                        \n                            Get   (projects/.../request.decorator.ts)\n                        \n                        \n                            GUARDS   (projects/.../types.ts)\n                        \n                        \n                            HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            Head   (projects/.../request.decorator.ts)\n                        \n                        \n                            HEADERS   (projects/.../types.ts)\n                        \n                        \n                            HTTP_CLIENT   (projects/.../types.ts)\n                        \n                        \n                            INJECTIONS   (projects/.../types.ts)\n                        \n                        \n                            INJECTOR   (projects/.../types.ts)\n                        \n                        \n                            Jsonp   (projects/.../request.decorator.ts)\n                        \n                        \n                            ON_CLIENT_READY   (projects/.../types.ts)\n                        \n                        \n                            Options   (projects/.../request.decorator.ts)\n                        \n                        \n                            PARAM_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            Patch   (projects/.../request.decorator.ts)\n                        \n                        \n                            PATHS   (projects/.../types.ts)\n                        \n                        \n                            Post   (projects/.../request.decorator.ts)\n                        \n                        \n                            Put   (projects/.../request.decorator.ts)\n                        \n                        \n                            QUERIES   (projects/.../types.ts)\n                        \n                        \n                            REST_HANDLERS   (projects/.../tokens.ts)\n                        \n                        \n                            WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/tokens.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REST_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_HANDLERS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BODIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BODIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_HANDLER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ERROR_HANDLER')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HTTP_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HTTP_CLIENT')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INJECTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('INJECTIONS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INJECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('INJECTOR')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLIENT_READY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ON_CLIENT_READY')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PARAM_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PARAM_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PATHS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PATHS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            QUERIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('QUERIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/request.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Delete\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.DELETE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.GET)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Head\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.HEAD)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Jsonp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.JSONP)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Options\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.OPTIONS)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PATCH)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Post\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.POST)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PUT)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
