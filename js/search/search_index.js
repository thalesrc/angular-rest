var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/ClientConstructor.html",[0,0.024,1,0.689]],["body/interfaces/ClientConstructor.html",[0,0.04,1,0.812,2,0.735,3,0.568,4,0.495,5,0.495,6,0.568,7,1.228,8,0.926,9,0.365,10,1.347,11,1.18,12,3.363,13,0.592,14,0.05,15,0.708,16,0.902,17,0.568,18,1.347,19,0.948,20,1.051,21,1.347,22,0.495,23,1.192,24,1.494,25,2.174,26,1.921,27,0.832,28,0.812,29,0.832,30,0.611,31,0.832,32,0.714,33,0.832,34,0.812,35,0.832,36,0.812,37,0.832,38,0.812,39,0.832,40,0.812,41,0.832,42,0.512,43,0.832,44,0.812,45,0.832,46,0.568,47,0.832,48,0.812,49,0.832,50,0.611,51,0.832,52,0.812,53,0.832,54,0.812,55,0.832,56,0.812,57,0.832,58,1.051,59,0.832,60,0.735,61,0.708,62,0.647,63,0.942,64,0.647,65,0.812,66,0.812,67,0.926,68,0.812,69,0.926,70,0.812,71,0.926,72,0.812,73,0.647,74,0.708,75,0.832,76,1.191,77,1.191,78,1.34,79,0.942,80,1.347,81,1.39,82,1.347,83,0.942,84,0.942,85,0.942,86,0.36,87,0.495,88,1.39,89,0.827,90,1.228,91,0.735,92,0.832,93,0.647,94,0.647,95,0.948,96,0.647,97,0.942,98,0.993,99,0.902,100,1.518,101,1.191,102,1.39,103,1.39,104,0.735,105,0.942,106,0.832,107,0.779,108,1.606,109,0.708,110,0.647,111,0.611,112,1.267,113,1.142,114,1.39,115,1.347,116,0.427,117,0.942,118,0.832,119,0.495,120,1.035,121,0.568,122,1.34,123,0.647,124,0.647,125,0.495,126,0.832,127,0.832,128,0.365,129,0.02,130,0.029,131,0.02]],["title/interfaces/ClientInstance.html",[0,0.024,121,0.689]],["body/interfaces/ClientInstance.html",[0,0.04,1,0.562,2,0.728,3,0.562,4,0.49,5,0.49,6,0.562,7,1.044,8,0.641,9,0.361,10,1.338,11,0.641,13,0.592,14,0.05,15,0.703,16,1.062,17,0.562,18,1.71,19,0.943,20,1.044,21,1.338,22,0.49,23,1.191,24,1.492,25,2.171,26,1.918,27,0.824,28,1.091,29,0.824,30,0.821,31,0.824,32,0.71,33,0.824,34,0.806,35,0.824,36,0.806,37,0.824,38,0.806,39,0.824,40,0.806,41,0.824,42,0.509,43,0.824,44,0.806,45,0.824,46,0.562,47,0.824,48,0.806,49,0.824,50,0.607,51,0.824,52,0.806,53,0.824,54,0.806,55,0.824,56,0.806,57,0.824,58,1.044,59,0.824,60,0.728,61,0.703,62,0.641,63,0.932,64,0.641,65,0.806,66,0.806,67,0.92,68,0.806,69,0.92,70,0.806,71,0.92,72,0.806,73,0.641,74,0.703,75,0.824,76,1.182,77,1.182,78,1.334,79,0.932,80,1.338,81,1.383,82,1.338,83,0.932,84,0.932,85,0.932,86,0.358,87,0.49,88,1.383,89,0.822,90,1.221,91,0.728,92,0.824,93,0.641,94,0.641,95,0.943,96,0.641,97,0.932,98,0.99,99,0.898,100,1.511,101,1.182,102,1.383,103,1.383,104,0.728,105,0.932,106,0.824,107,0.776,108,1.6,109,0.703,110,0.641,111,0.607,112,1.265,113,1.15,114,1.383,115,1.338,116,0.423,117,0.932,118,0.824,119,0.49,120,1.031,121,0.806,122,1.334,123,0.641,124,0.641,125,0.49,126,0.824,127,0.824,128,0.361,129,0.02,130,0.029,131,0.02]],["title/interfaces/ClientOptions.html",[0,0.024,123,0.786]],["body/interfaces/ClientOptions.html",[0,0.04,1,0.542,2,0.702,3,0.542,4,0.473,5,0.473,6,0.542,7,1.017,8,0.618,9,0.348,10,1.304,11,0.618,13,0.597,14,0.05,15,0.685,16,0.883,17,0.542,18,1.304,19,0.924,20,1.017,21,1.304,22,0.473,23,1.188,24,1.485,25,2.16,26,1.909,27,0.795,28,0.786,29,0.795,30,0.592,31,0.795,32,0.845,33,0.795,34,0.786,35,0.795,36,0.786,37,0.795,38,0.786,39,0.795,40,0.786,41,0.795,42,0.606,43,0.795,44,0.786,45,0.795,46,0.542,47,0.795,48,0.786,49,0.795,50,0.592,51,0.795,52,0.786,53,0.795,54,0.786,55,0.795,56,0.786,57,0.795,58,1.017,59,0.795,60,0.702,61,0.685,62,0.618,63,0.899,64,0.618,65,0.786,66,0.786,67,0.896,68,0.786,69,0.896,70,0.786,71,0.896,72,0.786,73,0.618,74,0.685,75,0.795,76,1.152,77,1.152,78,1.312,79,0.899,80,1.304,81,1.355,82,1.304,83,0.899,84,0.899,85,0.899,86,0.349,87,0.473,88,1.355,89,0.805,90,1.197,91,0.702,92,0.795,93,0.618,94,0.618,95,1.076,96,0.618,97,0.899,98,1.033,99,0.883,100,1.486,101,1.152,102,1.355,103,1.355,104,0.702,105,0.899,106,0.795,107,0.845,108,1.577,109,0.685,110,0.618,111,0.592,112,1.256,113,1.145,114,1.355,115,1.304,116,0.408,117,0.899,118,0.795,119,0.473,120,1.122,121,0.542,122,1.312,123,0.896,124,1.156,125,0.883,126,1.486,127,1.355,128,0.651,129,0.019,130,0.028,131,0.019,132,2.361]],["title/classes/GuardForbid.html",[86,0.306,133,1.685]],["body/classes/GuardForbid.html",[0,0.016,1,0.82,3,0.443,4,0.714,5,0.386,7,0.875,8,0.505,9,0.589,10,1.121,11,0.77,13,0.363,14,0.05,15,0.799,16,0.386,19,1.144,20,0.875,22,0.386,23,0.386,24,1.471,28,0.443,30,0.333,32,0.333,34,0.443,36,0.443,38,0.443,40,0.676,42,0.442,44,0.443,46,0.443,48,0.443,50,0.906,52,0.676,54,0.443,56,0.443,61,1.017,64,0.934,74,1.017,78,0.875,86,0.196,87,1.062,89,0.861,90,0.573,93,0.505,94,0.934,95,0.676,98,0.589,99,0.714,104,1.061,107,0.744,109,0.799,110,0.505,111,0.509,112,0.676,113,1.017,116,0.617,119,0.589,120,0.82,121,0.917,122,0.573,125,0.589,128,0.635,129,0.041,130,0.024,131,0.016,132,0.832,133,1.653,134,1.254,135,1.751,136,0.946,137,3.491,138,1.751,139,1.833,140,1.27,141,1.833,142,1.083,143,1.27,144,1.833,145,1.083,146,2.748,147,2.748,148,2.265,149,1.254,150,0.832,151,0.734,152,0.734,153,1.083,154,2.005,155,2.322,156,1.484,157,2.748,158,2.599,159,1.484,160,1.484,161,1.254,162,1.96,163,2.537,164,3.243,165,1.484,166,1.915,167,1.484,168,2.599,169,2.322,170,3.836,171,2.322,172,2.322,173,1.484,174,1.484,175,2.748,176,2.386,177,2.265,178,1.484,179,1.254,180,3.744,181,1.484,182,1.751,183,1.484,184,1.484,185,1.254,186,1.484,187,2.244,188,2.386,189,2.265,190,1.915,191,2.265,192,2.799,193,2.265,194,1.484,195,2.265,196,1.484,197,0.946,198,2.265,199,2.265,200,2.265,201,1.484,202,1.484,203,1.484,204,1.083,205,1.653,206,1.484,207,2.265,208,1.484,209,1.254,210,1.484,211,1.484,212,2.265,213,2.265,214,1.484,215,1.484,216,1.484,217,2.265,218,1.254,219,1.484,220,1.484,221,1.254,222,1.484,223,3.075,224,2.322,225,1.484,226,1.484,227,2.265,228,1.484,229,3.631,230,1.484,231,2.265,232,1.484,233,2.265,234,1.484,235,1.653,236,1.484,237,1.484,238,2.244,239,2.005,240,2.265,241,2.265,242,2.265,243,2.416,244,1.653,245,1.484,246,1.484,247,1.484,248,1.484,249,1.484,250,1.484,251,2.748,252,2.265,253,0.946,254,1.083,255,1.915,256,1.484,257,1.484,258,1.484,259,1.484,260,1.484,261,1.484,262,3.075,263,1.254,264,1.484,265,1.484,266,1.484,267,1.484,268,1.484,269,1.484,270,1.484,271,2.265,272,1.484,273,1.484,274,3.075,275,1.484,276,1.484,277,1.484,278,1.484,279,1.484,280,1.484,281,1.484,282,1.484]],["title/interfaces/Handler.html",[0,0.024,109,0.6]],["body/interfaces/Handler.html",[0,0.04,1,0.57,2,0.738,3,0.57,4,0.497,5,0.497,6,0.57,7,1.054,8,0.65,9,0.366,10,1.351,11,0.65,13,0.589,14,0.05,15,0.71,16,0.904,17,0.57,18,1.351,19,0.951,20,1.054,21,1.351,22,0.497,23,1.192,24,1.495,25,2.175,26,1.922,27,0.835,28,0.815,29,0.835,30,0.613,31,0.835,32,0.716,33,0.835,34,0.815,35,0.835,36,0.815,37,0.835,38,0.815,39,0.835,40,0.815,41,0.835,42,0.513,43,0.835,44,0.815,45,0.835,46,0.57,47,0.835,48,0.815,49,0.835,50,0.613,51,0.835,52,0.815,53,0.835,54,0.815,55,0.835,56,0.815,57,0.835,58,1.054,59,0.835,60,0.738,61,0.71,62,0.65,63,0.945,64,0.65,65,0.815,66,0.815,67,0.929,68,0.815,69,0.929,70,0.815,71,0.929,72,0.815,73,0.65,74,0.71,75,0.835,76,1.194,77,1.194,78,1.343,79,0.945,80,1.351,81,1.393,82,1.351,83,0.945,84,0.945,85,0.945,86,0.361,87,0.497,88,1.393,89,0.828,90,1.231,91,0.738,92,0.835,93,0.65,94,0.65,95,0.951,96,0.65,97,0.945,98,0.994,99,0.904,100,1.52,101,1.194,102,1.393,103,1.608,104,0.738,105,0.945,106,0.835,107,0.781,108,1.608,109,0.828,110,1.183,111,0.613,112,1.268,113,1.143,114,1.393,115,1.351,116,0.429,117,0.945,118,0.835,119,0.497,120,1.037,121,0.57,122,1.343,123,0.65,124,0.65,125,0.497,126,0.835,127,0.835,128,0.366,129,0.02,130,0.029,131,0.02]],["title/classes/HeadersInjector.html",[86,0.306,116,0.519]],["body/classes/HeadersInjector.html",[0,0.04,1,0.568,3,0.568,4,0.495,5,0.495,6,0.568,7,1.052,8,0.648,9,0.365,11,0.648,13,0.586,14,0.05,15,0.708,16,0.903,17,0.568,18,1.348,19,0.949,20,1.052,21,1.348,22,0.495,23,1.192,24,1.494,25,2.174,26,1.921,27,0.833,28,0.813,29,0.833,30,0.612,31,0.833,32,0.714,33,0.833,34,0.813,35,0.833,36,0.813,37,0.833,38,0.813,39,0.833,40,0.813,41,0.833,42,0.512,43,0.833,44,0.813,45,0.833,46,0.568,47,0.833,48,0.813,49,0.833,50,0.612,51,0.833,52,0.813,53,0.833,54,0.813,55,0.833,56,0.813,57,0.833,58,1.052,59,0.833,60,0.736,61,0.708,62,1.082,63,0.943,64,0.648,65,0.813,66,0.813,67,0.927,68,0.813,69,0.927,70,0.813,71,0.927,72,0.949,73,0.648,74,0.708,75,0.833,76,1.192,77,1.192,78,1.341,79,0.943,80,1.348,81,1.391,82,1.348,83,0.943,84,0.943,85,0.943,86,0.36,87,0.495,88,1.391,89,0.827,90,1.228,91,0.736,92,0.833,93,0.648,94,0.648,95,0.949,96,0.648,97,0.943,98,0.993,99,0.903,100,1.518,101,1.192,102,1.391,103,1.391,104,0.736,105,0.943,106,0.833,107,0.78,108,1.606,109,0.708,110,0.648,111,0.612,112,1.267,113,1.142,114,1.518,115,1.718,116,0.612,117,1.718,118,0.833,119,0.495,120,1.036,121,0.568,122,1.341,123,0.648,124,0.648,125,0.495,126,0.833,127,0.833,128,0.365,129,0.02,130,0.029,131,0.02,134,1.61,140,1.068,283,2.352]],["title/interfaces/HeadersObject.html",[0,0.024,111,0.519]],["body/interfaces/HeadersObject.html",[0,0.04,1,0.571,2,0.739,3,0.571,4,0.498,5,0.498,6,0.571,7,1.056,8,0.651,11,0.651,13,0.587,14,0.05,15,0.711,16,0.905,17,0.571,18,1.353,19,0.952,20,1.056,21,1.353,22,0.498,23,1.193,24,1.495,25,2.176,26,1.923,27,0.837,28,0.816,29,0.837,30,0.614,31,0.837,32,0.716,33,0.837,34,0.816,35,0.837,36,0.816,37,0.837,38,0.816,39,0.837,40,0.816,41,0.837,42,0.514,43,0.837,44,0.816,45,0.837,46,0.571,47,0.837,48,0.816,49,0.837,50,0.614,51,0.837,52,0.816,53,0.837,54,0.816,55,0.837,56,0.816,57,0.837,58,1.056,59,0.837,60,0.739,61,0.711,62,0.651,63,0.947,64,0.651,65,0.816,66,0.816,67,0.93,68,0.816,69,0.93,70,0.816,71,0.93,72,0.816,73,0.651,74,0.711,75,0.837,76,1.196,77,1.196,78,1.344,79,0.947,80,1.353,81,1.395,82,1.353,83,0.947,84,0.947,85,0.947,86,0.362,87,0.498,88,1.395,89,0.829,90,1.232,91,0.739,92,0.837,93,0.651,94,0.651,95,0.952,96,0.651,97,0.947,98,0.995,99,0.905,100,1.522,101,1.196,102,1.395,103,1.395,104,0.739,105,0.947,106,0.837,107,0.781,108,1.61,109,0.711,110,0.651,111,0.716,112,1.28,113,1.153,114,1.395,115,1.353,116,0.43,117,0.947,118,0.837,119,0.498,120,1.038,121,0.571,122,1.344,123,0.651,124,0.651,125,0.498,126,0.837,127,0.837,128,0.367,129,0.02,130,0.029,131,0.02,140,1.073,284,2.364,285,2.364]],["title/interfaces/RequestConfig.html",[0,0.024,238,1.685]],["body/interfaces/RequestConfig.html",[0,0.016,1,0.821,2,0.575,3,0.444,4,0.716,5,0.387,7,0.575,8,0.506,9,0.59,10,1.124,11,0.506,13,0.407,14,0.05,15,0.801,16,0.387,19,1.042,20,0.877,22,0.387,23,0.387,24,1.472,28,0.444,30,0.334,32,0.334,34,0.444,36,0.444,38,0.444,40,0.677,42,0.443,44,0.444,46,0.444,48,0.444,50,0.936,52,0.677,54,0.444,56,0.444,61,0.945,64,0.936,74,1.018,78,0.877,86,0.197,87,1.063,89,0.862,90,0.575,93,0.506,94,0.936,95,0.677,98,0.801,99,0.716,104,1.063,107,0.745,109,0.801,110,0.506,111,0.51,112,0.677,113,1.018,116,0.618,119,0.59,120,0.821,121,0.919,122,0.575,125,0.59,128,0.718,129,0.041,130,0.024,131,0.016,133,1.086,135,0.949,136,0.949,137,3.316,138,0.949,143,0.835,145,1.086,146,3.316,147,3.316,148,2.271,149,1.258,150,0.835,151,0.737,152,0.737,153,1.086,154,2.009,155,2.327,156,1.489,157,2.753,158,2.603,159,1.489,160,1.489,161,1.258,162,1.963,163,2.539,164,3.246,165,1.489,166,1.919,167,1.489,168,2.603,169,2.327,170,3.84,171,2.327,172,2.327,173,1.489,174,1.489,175,2.753,176,2.389,177,2.271,178,1.489,179,1.258,180,3.747,181,1.489,182,1.755,183,1.489,184,1.489,185,1.258,186,1.489,187,2.247,188,2.389,189,2.271,190,1.919,191,2.271,192,2.803,193,2.271,194,1.489,195,2.271,196,1.489,197,0.949,198,2.271,199,2.271,200,2.271,201,1.489,202,1.489,203,1.489,204,1.086,205,1.657,206,1.489,207,2.271,208,1.489,209,1.258,210,1.489,211,1.489,212,2.271,213,2.271,214,1.489,215,1.489,216,1.489,217,3.316,218,1.258,219,1.489,220,1.489,221,1.258,222,1.489,223,3.08,224,2.327,225,1.489,226,1.489,227,2.271,228,1.489,229,3.635,230,1.489,231,2.271,232,1.489,233,2.271,234,1.489,235,1.657,236,1.489,237,1.489,238,2.42,239,2.009,240,2.271,241,2.271,242,2.271,243,2.42,244,1.657,245,1.489,246,1.489,247,1.489,248,1.489,249,1.489,250,1.489,251,2.753,252,2.271,253,0.949,254,1.086,255,1.919,256,1.489,257,1.489,258,1.489,259,1.489,260,1.489,261,1.489,262,3.08,263,1.258,264,1.489,265,1.489,266,1.489,267,1.489,268,1.489,269,1.489,270,1.489,271,2.271,272,1.489,273,1.489,274,3.08,275,1.489,276,1.489,277,1.489,278,1.489,279,1.489,280,1.489,281,1.489,282,1.489]],["title/interfaces/RestGuard.html",[0,0.024,96,0.786]],["body/interfaces/RestGuard.html",[0,0.04,1,0.56,2,0.725,3,0.56,4,0.488,5,0.488,6,0.56,7,1.042,8,0.639,9,0.36,11,0.639,13,0.587,14,0.05,15,0.701,16,0.897,17,0.56,18,1.335,19,1.09,20,1.042,21,1.335,22,0.488,23,1.191,24,1.492,25,2.17,26,1.918,27,0.821,28,0.805,29,0.821,30,0.606,31,0.821,32,0.709,33,0.821,34,0.805,35,0.821,36,0.805,37,0.821,38,0.805,39,0.821,40,0.805,41,0.821,42,0.508,43,0.821,44,0.805,45,0.821,46,0.56,47,0.821,48,0.805,49,0.821,50,0.606,51,0.821,52,0.805,53,0.821,54,0.805,55,0.821,56,0.805,57,0.821,58,1.042,59,0.821,60,0.725,61,0.821,62,1.074,63,0.93,64,0.639,65,0.805,66,0.805,67,0.918,68,0.805,69,0.918,70,0.805,71,0.918,72,0.942,73,0.639,74,0.701,75,0.821,76,1.18,77,1.18,78,1.332,79,0.93,80,1.335,81,1.38,82,1.335,83,0.93,84,0.93,85,0.93,86,0.357,87,0.488,88,1.38,89,0.821,90,1.219,91,1.042,92,1.18,93,0.918,94,0.918,95,1.029,96,0.918,97,1.335,98,1.019,99,0.95,100,1.509,101,1.18,102,1.38,103,1.38,104,0.725,105,0.93,106,0.821,107,0.775,108,1.598,109,0.701,110,0.639,111,0.606,112,1.264,113,1.14,114,1.38,115,1.335,116,0.422,117,0.93,118,0.821,119,0.488,120,1.029,121,0.56,122,1.332,123,0.639,124,0.639,125,0.488,126,0.821,127,0.821,128,0.36,129,0.02,130,0.029,131,0.02,132,1.053,140,1.053,142,1.371,143,1.053,263,2.28,286,1.879,287,2.32]],["title/modules/RestModule.html",[288,1.952,289,1.472]],["body/modules/RestModule.html",[0,0.03,3,0.84,4,0.732,5,0.732,13,0.373,14,0.05,15,1.059,17,0.84,22,0.732,23,0.732,30,0.871,42,0.625,62,0.958,72,0.84,86,0.373,98,0.732,107,0.796,113,0.732,116,0.632,119,0.922,124,1.32,125,1.009,128,0.744,129,0.03,130,0.037,131,0.03,132,1.579,138,1.795,140,1.579,142,2.055,143,1.579,145,2.055,150,2.176,151,1.92,152,1.92,153,2.055,163,1.795,253,1.795,289,2.474,290,2.381,291,2.381,292,2.997,293,3.546,294,3.478,295,2.972,296,3.478,297,2.381,298,3.88,299,3.28,300,2.381,301,3.88,302,2.381,303,2.587,304,3.719,305,3.719,306,3.443,307,3.622,308,2.381]],["title/interfaces/RootConfiguration.html",[0,0.024,295,1.685]],["body/interfaces/RootConfiguration.html",[0,0.029,2,1.056,3,0.816,4,0.711,5,0.711,9,0.524,10,1.722,13,0.533,14,0.05,15,1.048,17,0.816,22,0.711,23,0.711,30,0.86,42,0.685,86,0.362,98,0.995,107,0.905,113,0.995,116,0.614,119,1.048,124,1.447,125,1.106,128,0.815,129,0.029,130,0.037,131,0.029,132,2.453,138,1.744,145,1.996,150,2.146,151,1.894,152,1.894,153,1.996,163,1.744,289,2.219,291,2.312,292,2.312,293,2.735,295,2.794,298,3.481,299,3.236,300,2.312,301,3.829,302,2.312,303,2.54,304,3.698,305,3.698,306,3.406,307,3.595,308,2.312]],["title/coverage.html",[309,3.115]],["body/coverage.html",[0,0.044,1,0.646,5,0.563,6,1.359,13,0.287,14,0.05,16,0.563,28,0.646,30,0.67,32,0.67,34,0.646,36,0.646,38,0.646,40,0.646,42,0.48,44,0.646,46,0.646,48,0.646,50,0.67,52,0.646,54,0.646,56,0.646,58,0.837,65,0.646,66,0.646,67,0.737,68,0.646,69,0.737,70,0.646,71,0.737,86,0.395,87,1.161,89,0.563,96,0.737,109,0.563,111,0.487,116,0.487,121,0.646,123,0.737,128,0.415,129,0.023,130,0.032,131,0.023,133,1.581,135,2.65,136,2.65,150,1.215,151,1.072,152,1.072,162,1.381,176,1.381,182,1.381,188,1.381,197,1.901,235,1.581,238,1.581,239,2.489,254,1.581,291,1.832,295,1.581,309,2.167,310,2.167,311,2.676,312,2.676,313,2.167,314,5.777,315,5.754,316,2.167,317,2.167,318,2.167,319,2.167,320,2.167,321,2.167,322,2.167,323,2.167,324,2.167,325,2.167,326,1.832,327,2.167,328,3.683,329,3.683,330,2.167,331,2.676,332,3.683,333,2.167,334,4.157,335,5.672,336,2.676,337,3.675,338,4.212,339,2.676,340,2.676,341,2.676,342,2.167,343,2.167,344,2.676,345,2.676]],["title/dependencies.html",[346,1.947,347,2.02]],["body/dependencies.html",[14,0.049,17,1.005,129,0.036,130,0.042,131,0.036,149,2.847,347,2.458,348,4.16,349,5.613,350,4.16,351,4.16,352,4.16,353,4.882,354,4.882,355,4.16,356,4.16,357,4.16,358,4.16,359,4.16,360,4.16,361,4.16,362,4.16,363,4.16,364,4.16,365,4.16]],["title/miscellaneous/enumerations.html",[366,0.851,367,2.768]],["body/miscellaneous/enumerations.html",[6,1.008,9,0.648,14,0.049,60,1.305,61,0.879,62,1.15,64,1.347,65,1.182,66,1.182,67,1.347,68,1.182,69,1.347,70,1.182,71,1.347,129,0.036,130,0.042,131,0.036,297,3.845,366,1.478,367,3.38,368,2.857]],["title/miscellaneous/functions.html",[366,0.851,369,2.34]],["body/miscellaneous/functions.html",[4,0.842,9,0.469,13,0.324,14,0.049,19,1.083,32,0.727,42,0.622,50,0.815,61,0.943,72,1.342,73,0.832,74,0.943,91,0.945,99,0.842,112,1.152,128,0.696,129,0.026,130,0.034,131,0.026,132,2.511,135,1.56,136,2.684,142,3.268,143,2.531,154,1.786,155,2.069,158,3.396,161,2.069,162,2.462,164,2.737,171,2.069,176,2.314,182,2.462,187,1.786,188,2.064,197,2.462,204,2.363,205,2.648,221,2.069,235,2.363,239,3.012,243,3.072,244,2.819,254,2.363,255,3.265,286,3.238,313,2.448,316,2.448,317,2.448,318,3.238,319,3.629,320,2.448,321,2.448,322,2.448,323,2.448,324,2.448,325,3.238,326,3.068,327,2.448,330,2.448,333,3.238,342,2.448,343,3.238,366,1.07,369,2.069,370,3.023,371,4.128,372,3.023,373,3.023,374,3.023,375,3.023,376,3.023,377,3.023,378,3.023,379,3.023,380,3.023,381,3.023,382,4.77,383,3.023,384,4.482,385,3.023,386,3.023,387,3.023,388,3.023,389,3.023,390,3.023,391,3.023,392,2.448,393,3.023,394,3.023,395,2.448,396,3.023]],["title/index.html",[9,0.373,397,1.947,398,1.646]],["body/index.html",[0,0.013,8,0.835,11,0.951,13,0.261,14,0.05,15,1.082,16,0.638,17,0.968,19,0.834,22,0.324,23,1.089,24,0.672,32,0.793,42,0.548,50,0.729,60,0.763,61,0.844,62,1.157,65,0.589,66,0.371,68,0.371,70,0.371,72,0.371,73,0.672,74,1.02,77,0.544,86,0.563,87,0.918,89,0.324,92,0.864,93,0.951,94,1.425,95,1.111,96,0.835,98,0.514,99,1.074,107,0.28,109,0.727,110,0.423,111,0.28,112,0.733,113,0.988,120,0.371,123,0.951,124,0.672,125,0.793,126,0.544,127,0.544,128,0.652,129,0.013,130,0.021,131,0.013,138,2.535,140,1.377,143,0.698,151,0.978,152,1.215,162,1.944,163,2.634,166,2.876,168,2.364,169,1.052,172,1.052,176,1.944,179,3.269,182,0.793,185,3.073,187,2.041,188,0.793,190,1.67,192,2.744,197,2.832,204,2.576,205,0.908,209,1.052,218,1.67,224,1.67,243,0.908,244,2.041,253,0.793,288,2.744,289,2.169,292,1.052,299,3.073,300,1.052,302,2.364,303,2.226,304,2.364,305,2.076,306,1.67,307,2.364,326,2.364,346,1.245,347,0.908,369,1.052,392,1.245,395,3.977,398,1.052,399,4.776,400,2.44,401,1.537,402,1.537,403,1.537,404,1.537,405,1.245,406,1.537,407,1.537,408,1.537,409,1.537,410,1.537,411,1.537,412,1.537,413,1.245,414,1.537,415,4.695,416,1.537,417,5.062,418,1.537,419,3.033,420,1.537,421,1.537,422,2.44,423,1.245,424,3.453,425,1.537,426,4.008,427,3.766,428,1.537,429,4.967,430,1.537,431,3.453,432,1.537,433,1.537,434,1.537,435,1.537,436,3.453,437,1.537,438,2.44,439,1.537,440,3.033,441,1.537,442,1.537,443,1.537,444,1.537,445,1.537,446,3.033,447,1.537,448,1.537,449,1.537,450,2.44,451,1.537,452,1.537,453,1.537,454,1.537,455,1.537,456,1.537,457,1.537,458,3.033,459,1.537,460,2.44,461,1.537,462,1.537,463,1.537,464,3.033,465,1.537,466,1.245,467,1.537,468,3.453,469,1.537,470,1.537,471,1.537,472,1.537,473,1.537,474,1.537,475,1.537,476,1.537,477,1.537,478,1.537,479,2.44,480,2.44,481,3.033,482,1.537,483,3.033,484,2.44,485,1.537,486,2.44,487,3.033,488,1.537,489,1.537,490,2.44,491,2.44,492,1.537,493,1.537,494,1.537,495,1.537,496,1.537,497,1.537,498,1.537,499,1.537,500,1.537,501,2.44,502,1.537,503,1.537,504,5.258,505,1.537,506,1.537,507,3.033,508,1.537,509,1.537,510,1.537,511,1.537,512,1.537,513,1.537,514,1.537,515,1.537,516,1.537,517,3.453,518,2.44,519,2.456,520,1.537,521,1.537,522,1.537,523,1.537,524,1.537,525,2.44,526,1.537,527,1.537,528,1.537,529,1.537,530,1.537,531,2.44,532,2.44,533,1.537,534,1.537,535,1.537,536,1.537,537,2.44,538,1.537,539,1.537,540,1.537,541,1.537,542,1.537,543,1.537,544,1.537,545,1.537,546,1.537,547,1.537,548,1.537,549,1.537,550,1.537,551,1.537,552,1.537,553,1.537,554,1.537,555,1.537,556,1.537,557,3.033,558,1.537,559,2.44,560,1.537,561,1.537,562,1.537,563,1.537,564,3.033,565,1.537,566,2.44,567,1.537,568,1.537,569,1.537,570,1.537,571,4.008,572,1.537,573,1.537,574,1.537,575,1.537,576,2.44,577,2.44,578,1.537,579,1.537,580,1.976,581,1.537,582,1.537,583,1.537,584,1.537,585,1.537,586,1.537,587,1.537,588,1.537,589,1.537,590,2.44,591,2.44,592,1.537,593,1.537,594,1.537,595,1.537,596,1.537,597,1.537,598,2.44,599,3.033,600,1.537,601,1.537,602,1.537,603,1.537,604,1.537,605,1.537,606,1.537,607,1.537,608,1.537,609,1.537,610,1.537,611,1.537,612,1.537,613,1.537,614,1.052,615,1.245]],["title/license.html",[397,1.947,398,1.646,614,1.646]],["body/license.html",[14,0.04,91,1.451,129,0.033,130,0.04,131,0.033,310,3.095,466,3.095,519,3.095,580,3.095,614,2.616,615,3.095,616,4.999,617,3.822,618,3.822,619,3.822,620,4.641,621,3.822,622,3.822,623,3.822,624,3.822,625,3.822,626,3.822,627,4.641,628,5.57,629,3.822,630,3.822,631,3.822,632,4.999,633,3.822,634,4.641,635,3.822,636,3.822,637,3.822,638,3.822,639,3.822,640,3.822,641,3.822,642,3.822,643,3.822,644,4.641,645,3.822,646,3.822,647,3.822,648,3.822,649,3.822,650,3.822,651,3.822,652,4.641,653,4.641,654,3.822,655,3.822,656,3.822,657,3.822,658,3.822,659,3.822,660,3.822,661,3.822,662,3.822,663,3.822,664,3.822,665,3.822,666,3.822,667,3.822,668,3.822,669,3.822,670,3.822,671,3.822,672,3.822,673,3.822,674,3.822,675,3.822,676,3.822,677,3.822,678,3.822,679,3.095,680,3.822,681,3.822]],["title/modules.html",[290,2.633]],["body/modules.html",[14,0.043,129,0.038,130,0.043,131,0.038,289,2.297,290,3.046,682,4.45,683,4.45,684,4.45]],["title/overview.html",[685,3.115]],["body/overview.html",[2,1.358,14,0.043,129,0.037,130,0.043,131,0.037,134,2.973,288,3.427,303,2.567,308,2.973,347,2.567,405,3.517,413,3.517,423,3.517,679,3.517,685,3.517,686,4.344,687,4.344,688,5.007,689,4.344,690,4.344]],["title/miscellaneous/typealiases.html",[366,0.851,691,3.418]],["body/miscellaneous/typealiases.html",[6,0.94,9,0.604,13,0.54,14,0.047,72,1.133,73,1.072,74,0.819,75,1.378,76,1.662,81,1.852,86,0.417,87,1.101,88,1.852,95,1.133,99,0.819,100,1.784,101,1.784,102,1.852,103,1.662,106,1.662,107,0.853,108,1.784,111,0.708,114,1.662,118,1.662,119,0.988,120,1.133,129,0.033,130,0.04,131,0.033,135,2.009,136,2.422,154,2.773,366,1.378,368,3.889,371,3.151,692,3.891]],["title/miscellaneous/variables.html",[366,0.851,693,2.768]],["body/miscellaneous/variables.html",[6,0.724,9,0.465,13,0.599,14,0.05,16,0.837,26,1.979,27,1.061,28,0.96,29,1.061,30,0.864,31,1.061,32,0.723,33,1.061,34,0.96,35,1.061,36,0.96,37,1.061,38,0.96,39,1.061,40,0.96,41,1.061,42,0.518,43,1.061,44,0.96,45,1.061,46,0.96,47,1.061,48,0.96,49,1.061,50,0.723,51,1.061,52,0.96,53,1.061,54,0.96,55,1.061,56,0.96,57,1.061,58,1.243,59,1.061,65,0.96,66,0.96,67,1.095,68,0.96,69,1.095,70,0.96,71,1.095,89,1,129,0.026,130,0.034,131,0.026,150,1.805,151,1.593,152,1.593,253,2.951,297,3.913,334,2.426,337,2.426,366,1.061,368,3.825,693,2.426,694,4.753,695,5.268,696,2.996,697,2.996,698,2.996,699,2.996,700,2.996,701,2.996,702,2.996,703,2.996,704,2.996,705,2.996,706,2.996,707,2.996]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":405,"title":{},"body":{"index.html":{},"overview.html":{}}}],["1/1",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":413,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.5.4",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["2018",{"_index":618,"title":{},"body":{"license.html":{}}}],["3",{"_index":442,"title":{},"body":{"index.html":{}}}],["3.1",{"_index":445,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":456,"title":{},"body":{"index.html":{}}}],["3.10",{"_index":570,"title":{},"body":{"index.html":{}}}],["3.10.1",{"_index":575,"title":{},"body":{"index.html":{}}}],["3.10.2",{"_index":579,"title":{},"body":{"index.html":{}}}],["3.10.3",{"_index":582,"title":{},"body":{"index.html":{}}}],["3.10.4",{"_index":583,"title":{},"body":{"index.html":{}}}],["3.10.5",{"_index":586,"title":{},"body":{"index.html":{}}}],["3.2",{"_index":463,"title":{},"body":{"index.html":{}}}],["3.3",{"_index":480,"title":{},"body":{"index.html":{}}}],["3.4",{"_index":503,"title":{},"body":{"index.html":{}}}],["3.5",{"_index":505,"title":{},"body":{"index.html":{}}}],["3.5.1",{"_index":506,"title":{},"body":{"index.html":{}}}],["3.5.1.1",{"_index":508,"title":{},"body":{"index.html":{}}}],["3.5.1.2",{"_index":510,"title":{},"body":{"index.html":{}}}],["3.5.1.3",{"_index":511,"title":{},"body":{"index.html":{}}}],["3.5.2",{"_index":512,"title":{},"body":{"index.html":{}}}],["3.5.3",{"_index":513,"title":{},"body":{"index.html":{}}}],["3.5.4",{"_index":514,"title":{},"body":{"index.html":{}}}],["3.6",{"_index":515,"title":{},"body":{"index.html":{}}}],["3.6.1",{"_index":520,"title":{},"body":{"index.html":{}}}],["3.6.1.1",{"_index":521,"title":{},"body":{"index.html":{}}}],["3.6.1.2",{"_index":534,"title":{},"body":{"index.html":{}}}],["3.6.1.3",{"_index":540,"title":{},"body":{"index.html":{}}}],["3.6.2",{"_index":541,"title":{},"body":{"index.html":{}}}],["3.6.3",{"_index":542,"title":{},"body":{"index.html":{}}}],["3.6.4",{"_index":543,"title":{},"body":{"index.html":{}}}],["3.7",{"_index":544,"title":{},"body":{"index.html":{}}}],["3.7.1",{"_index":545,"title":{},"body":{"index.html":{}}}],["3.7.2",{"_index":547,"title":{},"body":{"index.html":{}}}],["3.7.2.1",{"_index":548,"title":{},"body":{"index.html":{}}}],["3.7.2.2",{"_index":549,"title":{},"body":{"index.html":{}}}],["3.7.2.3",{"_index":550,"title":{},"body":{"index.html":{}}}],["3.7.3",{"_index":551,"title":{},"body":{"index.html":{}}}],["3.7.4",{"_index":552,"title":{},"body":{"index.html":{}}}],["3.7.5",{"_index":553,"title":{},"body":{"index.html":{}}}],["3.8",{"_index":554,"title":{},"body":{"index.html":{}}}],["3.9",{"_index":555,"title":{},"body":{"index.html":{}}}],["4",{"_index":589,"title":{},"body":{"index.html":{}}}],["5",{"_index":602,"title":{},"body":{"index.html":{}}}],["50",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":613,"title":{},"body":{"index.html":{}}}],["6.5.2",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":690,"title":{},"body":{"overview.html":{}}}],["8.2.3",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["_____________________________________________________________________________",{"_index":170,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers",{"_index":189,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["_headers[key",{"_index":196,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["above",{"_index":651,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":115,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["accepts",{"_index":536,"title":{},"body":{"index.html":{}}}],["acomponent",{"_index":491,"title":{},"body":{"index.html":{}}}],["action",{"_index":675,"title":{},"body":{"license.html":{}}}],["add",{"_index":408,"title":{},"body":{"index.html":{}}}],["ahin",{"_index":605,"title":{},"body":{"index.html":{}}}],["ali",{"_index":604,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allguards",{"_index":256,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["allguards.reduce((prev",{"_index":259,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["and/or",{"_index":642,"title":{},"body":{"license.html":{}}}],["angular",{"_index":400,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":22,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["angular/compiler",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":17,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["annotations",{"_index":403,"title":{},"body":{"index.html":{}}}],["aot",{"_index":590,"title":{},"body":{"index.html":{}}}],["api",{"_index":443,"title":{},"body":{"index.html":{}}}],["app",{"_index":433,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":416,"title":{},"body":{"index.html":{}}}],["append",{"_index":207,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["appmodule",{"_index":424,"title":{},"body":{"index.html":{}}}],["args",{"_index":90,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["args[bodyparamindex",{"_index":181,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["args[index",{"_index":175,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["arising",{"_index":678,"title":{},"body":{"license.html":{}}}],["array",{"_index":108,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["associated",{"_index":629,"title":{},"body":{"license.html":{}}}],["async",{"_index":166,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["authors",{"_index":669,"title":{},"body":{"license.html":{}}}],["available",{"_index":683,"title":{},"body":{"modules.html":{}}}],["await",{"_index":192,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base",{"_index":185,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["base_handlers",{"_index":598,"title":{},"body":{"index.html":{}}}],["base_headers",{"_index":151,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base_url",{"_index":30,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_with_credentials",{"_index":152,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["basehandler",{"_index":599,"title":{},"body":{"index.html":{}}}],["baseheaders",{"_index":125,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["baseurl",{"_index":124,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["basic",{"_index":414,"title":{},"body":{"index.html":{}}}],["before",{"_index":516,"title":{},"body":{"index.html":{}}}],["best",{"_index":461,"title":{},"body":{"index.html":{}}}],["blob",{"_index":494,"title":{},"body":{"index.html":{}}}],["bodies",{"_index":36,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":176,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bodyparamindex",{"_index":177,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["boolean",{"_index":98,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["bootstrap",{"_index":687,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":684,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["builder",{"_index":465,"title":{},"body":{"index.html":{}}}],["builder.ts",{"_index":136,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["builder.ts:12",{"_index":141,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builder.ts:14",{"_index":144,"title":{},"body":{"classes/GuardForbid.html":{}}}],["builds",{"_index":593,"title":{},"body":{"index.html":{}}}],["c",{"_index":617,"title":{},"body":{"license.html":{}}}],["cache.service",{"_index":565,"title":{},"body":{"index.html":{}}}],["call",{"_index":557,"title":{},"body":{"index.html":{}}}],["called",{"_index":559,"title":{},"body":{"index.html":{}}}],["calling",{"_index":556,"title":{},"body":{"index.html":{}}}],["calls",{"_index":450,"title":{},"body":{"index.html":{}}}],["cansend",{"_index":263,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["cansend(req",{"_index":529,"title":{},"body":{"index.html":{}}}],["cansend(request",{"_index":97,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["case",{"_index":251,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch",{"_index":274,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["catch(error",{"_index":225,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["chainhandlers",{"_index":235,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["chainhandlers(handlers",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["charge",{"_index":624,"title":{},"body":{"license.html":{}}}],["check",{"_index":518,"title":{},"body":{"index.html":{}}}],["claim",{"_index":672,"title":{},"body":{"license.html":{}}}],["class",{"_index":86,"title":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["class/interface",{"_index":79,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["classes",{"_index":134,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"overview.html":{}}}],["classof",{"_index":88,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["client",{"_index":197,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["client(undefined",{"_index":385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client_guards",{"_index":34,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_handlers",{"_index":44,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_headers",{"_index":52,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client_with_credentials",{"_index":56,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientconstructor",{"_index":1,"title":{"interfaces/ClientConstructor.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clienthandlers",{"_index":231,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientheaders",{"_index":198,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["clientinstance",{"_index":121,"title":{"interfaces/ClientInstance.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{}}}],["clientoptions",{"_index":123,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["code",{"_index":560,"title":{},"body":{"index.html":{}}}],["completely",{"_index":610,"title":{},"body":{"index.html":{}}}],["component",{"_index":431,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":650,"title":{},"body":{"license.html":{}}}],["config",{"_index":244,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["configure",{"_index":168,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["configured",{"_index":454,"title":{},"body":{"index.html":{}}}],["configures",{"_index":457,"title":{},"body":{"index.html":{}}}],["connection",{"_index":680,"title":{},"body":{"license.html":{}}}],["const",{"_index":24,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["construction",{"_index":563,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":11,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["constructor(injector",{"_index":594,"title":{},"body":{"index.html":{}}}],["constructor(private",{"_index":436,"title":{},"body":{"index.html":{}}}],["constructor(request",{"_index":139,"title":{},"body":{"classes/GuardForbid.html":{}}}],["context",{"_index":255,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["context)[next](request",{"_index":266,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next",{"_index":277,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[injector].get(next).cansend(request",{"_index":264,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next]).bind(context",{"_index":276,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["context[next][error_handler",{"_index":275,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["contract",{"_index":676,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":603,"title":{},"body":{"index.html":{}}}],["cookies",{"_index":574,"title":{},"body":{"index.html":{}}}],["copies",{"_index":644,"title":{},"body":{"license.html":{}}}],["copy",{"_index":627,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":616,"title":{},"body":{"license.html":{}}}],["core",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":309,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":214,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["created",{"_index":561,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":209,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["credentials.decorator.ts",{"_index":343,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":105,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["damages",{"_index":673,"title":{},"body":{"license.html":{}}}],["data",{"_index":490,"title":{},"body":{"index.html":{}}}],["data.append('image",{"_index":495,"title":{},"body":{"index.html":{}}}],["deal",{"_index":631,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":681,"title":{},"body":{"license.html":{}}}],["declaration",{"_index":507,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":423,"title":{},"body":{"index.html":{},"overview.html":{}}}],["declarative",{"_index":402,"title":{},"body":{"index.html":{}}}],["declare",{"_index":522,"title":{},"body":{"index.html":{}}}],["declared",{"_index":458,"title":{},"body":{"index.html":{}}}],["decorated",{"_index":392,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["decorator",{"_index":395,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["decorators",{"_index":464,"title":{},"body":{"index.html":{}}}],["default",{"_index":253,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":92,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["defined",{"_index":140,"title":{},"body":{"classes/GuardForbid.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"index.html":{}}}],["defines",{"_index":572,"title":{},"body":{"index.html":{}}}],["defining",{"_index":455,"title":{},"body":{"index.html":{}}}],["delete",{"_index":67,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delete(path",{"_index":474,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":347,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":286,"title":{},"body":{"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{}}}],["descriptor",{"_index":157,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["descriptor.value",{"_index":165,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["determined",{"_index":504,"title":{},"body":{"index.html":{}}}],["developed",{"_index":588,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":640,"title":{},"body":{"license.html":{}}}],["docs",{"_index":444,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":310,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":523,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":469,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":169,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["endpoint.replace",{"_index":174,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["enum",{"_index":63,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["enumerations",{"_index":367,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":137,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["error_handler",{"_index":46,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorhandler",{"_index":319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["errorhandlers",{"_index":546,"title":{},"body":{"index.html":{}}}],["especially",{"_index":577,"title":{},"body":{"index.html":{}}}],["etc",{"_index":486,"title":{},"body":{"index.html":{}}}],["event",{"_index":668,"title":{},"body":{"license.html":{}}}],["example",{"_index":415,"title":{},"body":{"index.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["exports",{"_index":308,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["express",{"_index":659,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["false",{"_index":224,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["files",{"_index":630,"title":{},"body":{"license.html":{}}}],["fill",{"_index":482,"title":{},"body":{"index.html":{}}}],["first",{"_index":537,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":664,"title":{},"body":{"license.html":{}}}],["following",{"_index":649,"title":{},"body":{"license.html":{}}}],["forbad",{"_index":160,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["forbidden",{"_index":558,"title":{},"body":{"index.html":{}}}],["forget",{"_index":524,"title":{},"body":{"index.html":{}}}],["fork",{"_index":608,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":483,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":293,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["forroot(undefined",{"_index":294,"title":{},"body":{"modules/RestModule.html":{}}}],["free",{"_index":623,"title":{},"body":{"license.html":{}}}],["function",{"_index":87,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(this",{"_index":167,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["functionality",{"_index":449,"title":{},"body":{"index.html":{}}}],["functions",{"_index":369,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["functionsof",{"_index":81,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":647,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":471,"title":{},"body":{"index.html":{}}}],["getting",{"_index":397,"title":{"index.html":{},"license.html":{}},"body":{}}],["globalhandlers",{"_index":227,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["going",{"_index":467,"title":{},"body":{"index.html":{}}}],["granted",{"_index":622,"title":{},"body":{"license.html":{}}}],["graph",{"_index":682,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":95,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["guardforbid",{"_index":133,"title":{"classes/GuardForbid.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["guardforbid(request",{"_index":226,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardfunction",{"_index":100,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guardfunctions",{"_index":387,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardfunctionsof",{"_index":101,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["guards",{"_index":32,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["guards([posttodoguard",{"_index":531,"title":{},"body":{"index.html":{}}}],["guards(guardfunctions",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guardspromise",{"_index":220,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardspromise.then",{"_index":236,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["guardtype",{"_index":102,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handle",{"_index":110,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["handler",{"_index":109,"title":{"interfaces/Handler.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["handler(original",{"_index":282,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handler.decorator.ts",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlerfunction",{"_index":103,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlerfunctionsof",{"_index":106,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":42,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["handlers(handlers",{"_index":388,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers.reduce((prev",{"_index":272,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["handlersof",{"_index":107,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["head",{"_index":69,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["head(path",{"_index":477,"title":{},"body":{"index.html":{}}}],["header",{"_index":188,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["header(name",{"_index":389,"title":{},"body":{"miscellaneous/functions.html":{}}}],["header[key",{"_index":203,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headerinjector",{"_index":509,"title":{},"body":{"index.html":{}}}],["headerinjectorresponse",{"_index":114,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headerinjectortype",{"_index":118,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":50,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["headers(headers",{"_index":390,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headers.append(key",{"_index":195,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headers[method](name",{"_index":208,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["headersclientparam",{"_index":120,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersinjector",{"_index":116,"title":{"classes/HeadersInjector.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["headersobject",{"_index":111,"title":{"interfaces/HeadersObject.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["headersparam",{"_index":119,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hello",{"_index":434,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":621,"title":{},"body":{"license.html":{}}}],["holders",{"_index":670,"title":{},"body":{"license.html":{}}}],["http",{"_index":60,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["http://localhost:3000",{"_index":422,"title":{},"body":{"index.html":{}}}],["http_client",{"_index":28,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpclient",{"_index":18,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpclientmodule",{"_index":301,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["httperrorresponse",{"_index":21,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["httpheaders",{"_index":146,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpparams",{"_index":147,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httprequest",{"_index":19,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["httprequest(method",{"_index":252,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["httpresponse",{"_index":20,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["id",{"_index":500,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":484,"title":{},"body":{"index.html":{}}}],["implements",{"_index":526,"title":{},"body":{"index.html":{}}}],["implied",{"_index":660,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["imports",{"_index":302,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["included",{"_index":654,"title":{},"body":{"license.html":{}}}],["including",{"_index":634,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":284,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["inject",{"_index":117,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["injectable",{"_index":93,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["injectable.handle.bind(injectable",{"_index":279,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectable.handle[error_handler",{"_index":278,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["injectiontoken('base_headers",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('base_with_credentials",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_base_url",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('rest_handlers",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":16,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inserttodo(@body",{"_index":428,"title":{},"body":{"index.html":{}}}],["inside",{"_index":459,"title":{},"body":{"index.html":{}}}],["install",{"_index":411,"title":{},"body":{"index.html":{}}}],["installation",{"_index":406,"title":{},"body":{"index.html":{}}}],["instance",{"_index":190,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["instance.inject",{"_index":193,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["instanceof",{"_index":267,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["interface/class",{"_index":76,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"interfaces/RootConfiguration.html":{},"overview.html":{}}}],["js",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["jsonp",{"_index":71,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["jsonp(path",{"_index":478,"title":{},"body":{"index.html":{}}}],["key",{"_index":112,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["keyof",{"_index":83,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["kind",{"_index":658,"title":{},"body":{"license.html":{}}}],["legend",{"_index":686,"title":{},"body":{"overview.html":{}}}],["liability",{"_index":674,"title":{},"body":{"license.html":{}}}],["liable",{"_index":671,"title":{},"body":{"license.html":{}}}],["license",{"_index":614,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":635,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":591,"title":{},"body":{"index.html":{}}}],["limited",{"_index":661,"title":{},"body":{"license.html":{}}}],["literal",{"_index":12,"title":{},"body":{"interfaces/ClientConstructor.html":{}}}],["make",{"_index":438,"title":{},"body":{"index.html":{}}}],["makes",{"_index":452,"title":{},"body":{"index.html":{}}}],["mark",{"_index":481,"title":{},"body":{"index.html":{}}}],["marked",{"_index":451,"title":{},"body":{"index.html":{}}}],["marks",{"_index":446,"title":{},"body":{"index.html":{}}}],["matching",{"_index":130,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":663,"title":{},"body":{"license.html":{}}}],["merge",{"_index":638,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":74,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["methodhandlers",{"_index":233,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodheaders",{"_index":200,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["methodname",{"_index":164,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":62,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["miscellaneous",{"_index":366,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":615,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":637,"title":{},"body":{"license.html":{}}}],["module",{"_index":288,"title":{"modules/RestModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":290,"title":{"modules.html":{}},"body":{"modules/RestModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":298,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["more",{"_index":404,"title":{},"body":{"index.html":{}}}],["multi",{"_index":306,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["name",{"_index":143,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":75,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/typealiases.html":{}}}],["never}[keyof",{"_index":85,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["new",{"_index":89,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":229,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next(request",{"_index":265,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next.prototype",{"_index":262,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["next[error_handler",{"_index":280,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ngmodule",{"_index":299,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["noninfringement",{"_index":667,"title":{},"body":{"license.html":{}}}],["notice",{"_index":652,"title":{},"body":{"license.html":{}}}],["now",{"_index":612,"title":{},"body":{"index.html":{}}}],["npm",{"_index":410,"title":{},"body":{"index.html":{}}}],["null",{"_index":179,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["number",{"_index":122,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["object",{"_index":8,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["object.entries((target.constructor[param_headers",{"_index":206,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries((target.constructor[paths",{"_index":173,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries((target.constructor[queries",{"_index":183,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(_headers",{"_index":194,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["object.keys(header",{"_index":202,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["observable",{"_index":148,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["obtaining",{"_index":626,"title":{},"body":{"license.html":{}}}],["on_client_ready",{"_index":58,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["onclientready",{"_index":326,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["onready",{"_index":567,"title":{},"body":{"index.html":{}}}],["option",{"_index":571,"title":{},"body":{"index.html":{}}}],["optional",{"_index":132,"title":{},"body":{"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":70,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options(path",{"_index":476,"title":{},"body":{"index.html":{}}}],["original",{"_index":104,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["otherservices",{"_index":595,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":466,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":679,"title":{},"body":{"license.html":{},"overview.html":{}}}],["outgoing",{"_index":573,"title":{},"body":{"index.html":{}}}],["overview",{"_index":685,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":82,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["package",{"_index":346,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":172,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["param_headers",{"_index":48,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":204,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parameterdecorator",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":142,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":217,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["particular",{"_index":665,"title":{},"body":{"license.html":{}}}],["passed",{"_index":261,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["patch",{"_index":68,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["patch('todos/:id",{"_index":497,"title":{},"body":{"index.html":{}}}],["patch(path",{"_index":475,"title":{},"body":{"index.html":{}}}],["patchtodo(@body",{"_index":498,"title":{},"body":{"index.html":{}}}],["path",{"_index":162,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["path('id",{"_index":499,"title":{},"body":{"index.html":{}}}],["path(key",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paths",{"_index":38,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":620,"title":{},"body":{"license.html":{}}}],["permit",{"_index":645,"title":{},"body":{"license.html":{}}}],["person",{"_index":625,"title":{},"body":{"license.html":{}}}],["persons",{"_index":646,"title":{},"body":{"license.html":{}}}],["placeholder",{"_index":393,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portions",{"_index":656,"title":{},"body":{"license.html":{}}}],["post",{"_index":65,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post('image",{"_index":488,"title":{},"body":{"index.html":{}}}],["post('todos",{"_index":427,"title":{},"body":{"index.html":{}}}],["post(path",{"_index":472,"title":{},"body":{"index.html":{}}}],["posttodo(@body",{"_index":479,"title":{},"body":{"index.html":{}}}],["posttodo(todo",{"_index":440,"title":{},"body":{"index.html":{}}}],["posttodoguard",{"_index":525,"title":{},"body":{"index.html":{}}}],["posttodoguard(req",{"_index":538,"title":{},"body":{"index.html":{}}}],["posttodos(todo",{"_index":532,"title":{},"body":{"index.html":{}}}],["prev",{"_index":230,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev.then(passed",{"_index":260,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["prev[method](res",{"_index":281,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["private",{"_index":566,"title":{},"body":{"index.html":{}}}],["process",{"_index":219,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["projects/.../body.decorator.ts",{"_index":370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../client.decorator.ts",{"_index":372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../error",{"_index":373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../guards.decorator.ts",{"_index":374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../handlers.decorator.ts",{"_index":375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../header.decorator.ts",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../headers.decorator.ts",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../on",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../path.decorator.ts",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../query.decorator.ts",{"_index":380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../request",{"_index":371,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../request.decorator.ts",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../tokens.ts",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../types.ts",{"_index":368,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../with",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/body.decorator.ts",{"_index":313,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/client.decorator.ts",{"_index":316,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/error",{"_index":317,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/guards.decorator.ts",{"_index":320,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/handlers.decorator.ts",{"_index":321,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/header.decorator.ts",{"_index":322,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/headers.decorator.ts",{"_index":323,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/on",{"_index":324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/path.decorator.ts",{"_index":327,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/query.decorator.ts",{"_index":330,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["projects/rest/src/lib/request",{"_index":135,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/rest/src/lib/request.decorator.ts",{"_index":334,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/rest.module.ts",{"_index":291,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["projects/rest/src/lib/rest.module.ts:29",{"_index":296,"title":{},"body":{"modules/RestModule.html":{}}}],["projects/rest/src/lib/tokens.ts",{"_index":337,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts",{"_index":6,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/rest/src/lib/types.ts:53",{"_index":287,"title":{},"body":{"interfaces/RestGuard.html":{}}}],["projects/rest/src/lib/types.ts:67",{"_index":285,"title":{},"body":{"interfaces/HeadersObject.html":{}}}],["projects/rest/src/lib/types.ts:74",{"_index":283,"title":{},"body":{"classes/HeadersInjector.html":{}}}],["projects/rest/src/lib/with",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":99,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["promise.resolve(true",{"_index":269,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["promiselike",{"_index":273,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"interfaces/RequestConfig.html":{},"interfaces/RootConfiguration.html":{}}}],["propertydescriptor",{"_index":158,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["propertykey",{"_index":156,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["provide",{"_index":304,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["provided",{"_index":580,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":126,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["provider",{"_index":300,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["providers",{"_index":303,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":448,"title":{},"body":{"index.html":{}}}],["public",{"_index":138,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["publish",{"_index":639,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":666,"title":{},"body":{"license.html":{}}}],["put",{"_index":66,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["put(path",{"_index":473,"title":{},"body":{"index.html":{}}}],["queries",{"_index":40,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":182,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["query(key",{"_index":394,"title":{},"body":{"miscellaneous/functions.html":{}}}],["query.append(param",{"_index":184,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["ready.decorator.ts",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refactored",{"_index":611,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":205,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["repository",{"_index":607,"title":{},"body":{"index.html":{}}}],["req.body.canbesent",{"_index":539,"title":{},"body":{"index.html":{}}}],["request",{"_index":61,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["requestbuilder",{"_index":333,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestbuilder(requestmethod.delete",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.get",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.head",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.jsonp",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.options",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.patch",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.post",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(requestmethod.put",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestbuilder(type",{"_index":161,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["requestconfig",{"_index":238,"title":{"interfaces/RequestConfig.html":{}},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{}}}],["requestfactory",{"_index":239,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestfactory(method",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requestfactory(type",{"_index":215,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod",{"_index":64,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"miscellaneous/enumerations.html":{}}}],["requestmethod.delete",{"_index":246,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.get",{"_index":245,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.head",{"_index":247,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.jsonp",{"_index":248,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.options",{"_index":249,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.patch",{"_index":242,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.post",{"_index":240,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requestmethod.put",{"_index":241,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["requests",{"_index":487,"title":{},"body":{"index.html":{}}}],["res",{"_index":271,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["reset",{"_index":689,"title":{},"body":{"overview.html":{}}}],["rest",{"_index":94,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rest_handlers",{"_index":150,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["restclient",{"_index":447,"title":{},"body":{"index.html":{}}}],["restguard",{"_index":96,"title":{"interfaces/RestGuard.html":{}},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"index.html":{}}}],["restmodule",{"_index":289,"title":{"modules/RestModule.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{},"modules.html":{}}}],["restmodule.forroot",{"_index":597,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({baseurl",{"_index":421,"title":{},"body":{"index.html":{}}}],["restmodule.forroot({withcredentials",{"_index":578,"title":{},"body":{"index.html":{}}}],["restor",{"_index":409,"title":{},"body":{"index.html":{}}}],["restpropertydecorator",{"_index":154,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["restriction",{"_index":633,"title":{},"body":{"license.html":{}}}],["result",{"_index":129,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.topromise",{"_index":268,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["results",{"_index":131,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["returning",{"_index":470,"title":{},"body":{"index.html":{}}}],["returns",{"_index":72,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["right",{"_index":562,"title":{},"body":{"index.html":{}}}],["rights",{"_index":636,"title":{},"body":{"license.html":{}}}],["root",{"_index":127,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["rootconfiguration",{"_index":295,"title":{"interfaces/RootConfiguration.html":{}},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{}}}],["run",{"_index":218,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["rxjs",{"_index":149,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"dependencies.html":{}}}],["save",{"_index":412,"title":{},"body":{"index.html":{}}}],["secret",{"_index":460,"title":{},"body":{"index.html":{}}}],["selector",{"_index":432,"title":{},"body":{"index.html":{}}}],["sell",{"_index":643,"title":{},"body":{"license.html":{}}}],["sent",{"_index":517,"title":{},"body":{"index.html":{}}}],["service",{"_index":453,"title":{},"body":{"index.html":{}}}],["services",{"_index":600,"title":{},"body":{"index.html":{}}}],["session",{"_index":527,"title":{},"body":{"index.html":{}}}],["sessionservice",{"_index":528,"title":{},"body":{"index.html":{}}}],["set",{"_index":187,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["shall",{"_index":653,"title":{},"body":{"license.html":{}}}],["shouldn't",{"_index":596,"title":{},"body":{"index.html":{}}}],["single",{"_index":535,"title":{},"body":{"index.html":{}}}],["software",{"_index":628,"title":{},"body":{"license.html":{}}}],["something",{"_index":439,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"miscellaneous/functions.html":{}}}],["source.then(res",{"_index":270,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["specified",{"_index":73,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":398,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["startguardcheck",{"_index":254,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["startguardcheck(target",{"_index":221,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["statements",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":292,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["steven166/angular",{"_index":609,"title":{},"body":{"index.html":{}}}],["string",{"_index":113,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["subject",{"_index":648,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":641,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":655,"title":{},"body":{"license.html":{}}}],["super('a",{"_index":159,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["supports",{"_index":592,"title":{},"body":{"index.html":{}}}],["switch",{"_index":250,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["symbol",{"_index":26,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('base_url",{"_index":31,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('bodies",{"_index":37,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_guards",{"_index":35,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_handlers",{"_index":45,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_headers",{"_index":53,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('client_with_credentials",{"_index":57,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('error_handler",{"_index":47,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('guards",{"_index":33,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('handlers",{"_index":43,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('headers",{"_index":51,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('http_client",{"_index":29,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('injector",{"_index":27,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('on_client_ready",{"_index":59,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('param_headers",{"_index":49,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('paths",{"_index":39,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('queries",{"_index":41,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["symbol('with_credentials",{"_index":55,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":78,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{}}}],["t[p",{"_index":84,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["table",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":155,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["target.constructor[bodies",{"_index":178,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][client_guards",{"_index":257,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[guards][methodname",{"_index":258,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][client_handlers",{"_index":232,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[handlers][methodname",{"_index":234,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[headers",{"_index":199,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials",{"_index":211,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][client_with_credentials",{"_index":212,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["target.constructor[with_credentials][methodname",{"_index":213,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["template",{"_index":77,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"index.html":{}}}],["thalesrc",{"_index":619,"title":{},"body":{"license.html":{}}}],["thalesrc/angular",{"_index":399,"title":{},"body":{"index.html":{}}}],["then(result",{"_index":222,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this.client.inserttodo(todo",{"_index":441,"title":{},"body":{"index.html":{}}}],["this.client.patchtodo(todo",{"_index":502,"title":{},"body":{"index.html":{}}}],["this.client.posttodo(todo",{"_index":492,"title":{},"body":{"index.html":{}}}],["this.client.todos().then(todos",{"_index":437,"title":{},"body":{"index.html":{}}}],["this.client.uploadimage(data",{"_index":496,"title":{},"body":{"index.html":{}}}],["this.session.loggedin$.pipe(first()).topromise",{"_index":530,"title":{},"body":{"index.html":{}}}],["this.todocacheservice.cachetodos(todos",{"_index":569,"title":{},"body":{"index.html":{}}}],["this.todos",{"_index":568,"title":{},"body":{"index.html":{}}}],["this[base_url]}/${endpoint",{"_index":216,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[header",{"_index":201,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[http_client].request(request).topromise",{"_index":237,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_headers",{"_index":186,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(base_with_credentials",{"_index":210,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(header",{"_index":191,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["this[injector].get(rest_handlers)).reduce((prev",{"_index":228,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["throw",{"_index":223,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["todo",{"_index":429,"title":{},"body":{"index.html":{}}}],["todo.client",{"_index":418,"title":{},"body":{"index.html":{}}}],["todo.client.ts",{"_index":425,"title":{},"body":{"index.html":{}}}],["todo.component",{"_index":420,"title":{},"body":{"index.html":{}}}],["todo.component.ts",{"_index":430,"title":{},"body":{"index.html":{}}}],["todocacheservice",{"_index":564,"title":{},"body":{"index.html":{}}}],["todoclient",{"_index":417,"title":{},"body":{"index.html":{}}}],["todocomponent",{"_index":419,"title":{},"body":{"index.html":{}}}],["todoid",{"_index":501,"title":{},"body":{"index.html":{}}}],["todomodule",{"_index":533,"title":{},"body":{"index.html":{}}}],["todos",{"_index":426,"title":{},"body":{"index.html":{}}}],["token",{"_index":581,"title":{},"body":{"index.html":{}}}],["tokens",{"_index":153,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["top",{"_index":584,"title":{},"body":{"index.html":{}}}],["topsecret",{"_index":601,"title":{},"body":{"index.html":{}}}],["tort",{"_index":677,"title":{},"body":{"license.html":{}}}],["true",{"_index":307,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":691,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":180,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{}}}],["types",{"_index":145,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{}}}],["typescript",{"_index":401,"title":{},"body":{"index.html":{}}}],["u",{"_index":80,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["undefined",{"_index":171,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{}}}],["unless",{"_index":576,"title":{},"body":{"index.html":{}}}],["uploadimage(@body",{"_index":489,"title":{},"body":{"index.html":{}}}],["uploadimage(image",{"_index":493,"title":{},"body":{"index.html":{}}}],["uploads",{"_index":485,"title":{},"body":{"index.html":{}}}],["url",{"_index":243,"title":{},"body":{"classes/GuardForbid.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["use",{"_index":91,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RestGuard.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["used",{"_index":468,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":305,"title":{},"body":{"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"index.html":{}}}],["util",{"_index":462,"title":{},"body":{"index.html":{}}}],["value",{"_index":297,"title":{},"body":{"modules/RestModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":693,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":662,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":657,"title":{},"body":{"license.html":{}}}],["whether",{"_index":519,"title":{},"body":{"index.html":{},"license.html":{}}}],["with_credentials",{"_index":54,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["withcredentials",{"_index":128,"title":{},"body":{"interfaces/ClientConstructor.html":{},"interfaces/ClientInstance.html":{},"interfaces/ClientOptions.html":{},"classes/GuardForbid.html":{},"interfaces/Handler.html":{},"classes/HeadersInjector.html":{},"interfaces/HeadersObject.html":{},"interfaces/RequestConfig.html":{},"interfaces/RestGuard.html":{},"modules/RestModule.html":{},"interfaces/RootConfiguration.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["withcredentials(true",{"_index":585,"title":{},"body":{"index.html":{}}}],["withcredentials(withcredentials",{"_index":396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withcredentialsparam",{"_index":587,"title":{},"body":{"index.html":{}}}],["without",{"_index":632,"title":{},"body":{"license.html":{}}}],["world",{"_index":435,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":407,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":688,"title":{},"body":{"overview.html":{}}}],["zçelik",{"_index":606,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ClientConstructor.html":{"url":"interfaces/ClientConstructor.html","title":"interface - ClientConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Object\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constructor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constructor\n                                    \n                                \n                                \n                                    \n                                        constructor:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientInstance.html":{"url":"interfaces/ClientInstance.html","title":"interface - ClientInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        BASE_URL\n                                \n                                \n                                        HTTP_CLIENT\n                                \n                                \n                                        INJECTOR\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        BASE_URL\n                                    \n                                \n                                \n                                    \n                                        BASE_URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        HTTP_CLIENT\n                                    \n                                \n                                \n                                    \n                                        HTTP_CLIENT:         HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        INJECTOR\n                                    \n                                \n                                \n                                    \n                                        INJECTOR:         Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Injector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        guards\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        providedIn\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersClientParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersClientParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guards\n                                    \n                                \n                                \n                                    \n                                        guards:         Guard\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Guard\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providedIn\n                                    \n                                \n                                \n                                    \n                                        providedIn:     Type | \"root\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Type | \"root\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuardForbid.html":{"url":"classes/GuardForbid.html","title":"class - GuardForbid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuardForbid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: HttpRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/request-builder.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    HttpRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpRequest\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/rest/src/lib/request-builder.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS,\n          CLIENT_WITH_CREDENTIALS, PATHS, QUERIES } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Queries\n        // _____________________________________________________________________________\n        let query = new HttpParams();\n\n        for (const [param, index] of Object.entries((target.constructor[QUERIES] || {})[methodName] || {})) {\n          query = query.append(param, args[index]);\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials, params: query });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n  params: HttpParams;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Handler.html":{"url":"interfaces/Handler.html","title":"interface - Handler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Handler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handle\n                                    \n                                \n                                \n                                    \n                                        handle:         HandlerFunction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlerFunction\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeadersInjector.html":{"url":"classes/HeadersInjector.html","title":"class - HeadersInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeadersInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                inject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            inject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inject()\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         HeaderInjectorResponse\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeadersObject.html":{"url":"interfaces/HeadersObject.html","title":"interface - HeadersObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeadersObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | []\n\n                    \n                \n                        \n                            \n                                Defined in projects/rest/src/lib/types.ts:67\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestConfig.html":{"url":"interfaces/RequestConfig.html","title":"interface - RequestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/request-builder.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        headers\n                                \n                                \n                                        params\n                                \n                                \n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         HttpHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpHeaders\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                    \n                                \n                                \n                                    \n                                        params:         HttpParams\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpParams\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ClientInstance, HTTP_CLIENT, BASE_URL, GUARDS, ClientConstructor,\n          CLIENT_GUARDS, BODIES, INJECTOR, HANDLERS, CLIENT_HANDLERS, HandlersOf,\n          ERROR_HANDLER, RequestMethod, PARAM_HEADERS, HeadersParam, HeadersInjector,\n          HeadersObject, HEADERS, CLIENT_HEADERS, HeadersClientParam, WITH_CREDENTIALS,\n          CLIENT_WITH_CREDENTIALS, PATHS, QUERIES } from './types';\nimport { HttpRequest, HttpResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\n\ntype RestPropertyDecorator = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;\n\nclass GuardForbid extends Error {\n  constructor(\n    public request: HttpRequest\n  ) {\n    super('A guard function forbad the request');\n  }\n}\n\nexport function requestBuilder(type: RequestMethod): (path?: string) => RestPropertyDecorator {\n  return function (path?: string): RestPropertyDecorator {\n    return function (target: ClientConstructor, methodName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n      descriptor.value = async function(this: ClientInstance, ...args: any[]) {\n        // > Configure endpoint\n        // _____________________________________________________________________________\n        let endpoint = path !== undefined ? path : methodName;\n\n        for (const [param, index] of Object.entries((target.constructor[PATHS] || {})[methodName] || {})) {\n          endpoint = endpoint.replace(':' + param, args[index]);\n        }\n\n        // > Configure request body\n        // _____________________________________________________________________________\n        const bodyParamIndex = (target.constructor[BODIES] || {})[methodName];\n        let body: any = null;\n\n        if (typeof bodyParamIndex === 'number') {\n          body = args[bodyParamIndex];\n        }\n\n        // > Configure Queries\n        // _____________________________________________________________________________\n        let query = new HttpParams();\n\n        for (const [param, index] of Object.entries((target.constructor[QUERIES] || {})[methodName] || {})) {\n          query = query.append(param, args[index]);\n        }\n\n        // > Configure Headers\n        // _____________________________________________________________________________\n        let headers = new HttpHeaders();\n\n        // >> Base Headers\n        const baseHeaders: HeadersParam[] =  this[INJECTOR].get(BASE_HEADERS);\n\n        for (const set of baseHeaders) {\n          for (const header of set) {\n            let _headers: HeadersObject =  header;\n\n            if (typeof header === 'function') {\n              const instance: HeadersInjector = this[INJECTOR].get(header);\n              _headers = await instance.inject();\n            }\n\n            for (const key of Object.keys(_headers)) {\n              headers = headers.append(key, _headers[key]);\n            }\n          }\n        }\n\n        // >> Client Headers & Method Headers\n        const clientHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[CLIENT_HEADERS] || [];\n        const methodHeaders: HeadersClientParam = (target.constructor[HEADERS] || {})[methodName] || [];\n\n        for (let header of [...clientHeaders, ...methodHeaders]) {\n          if (typeof header === 'function') {\n            const instance: HeadersInjector = this[INJECTOR].get(header);\n            header = await instance.inject();\n          }\n\n          if (typeof header === 'string') {\n            header = await this[header]();\n          }\n\n          for (const key of Object.keys(header)) {\n            headers = headers.append(key, header[key]);\n          }\n        }\n\n        // >> Parameter Headers\n        for (const [name, [replace, index]] of Object.entries((target.constructor[PARAM_HEADERS] || {})[methodName] || {})) {\n          const method: 'set' | 'append' = replace ? 'set' : 'append';\n\n          headers = headers[method](name, args[index]);\n        }\n\n        // > With Credentials\n        // _____________________________________________________________________________\n        let withCredentials: boolean =  this[INJECTOR].get(BASE_WITH_CREDENTIALS);\n\n        if (target.constructor[WITH_CREDENTIALS]) {\n          if (typeof target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][CLIENT_WITH_CREDENTIALS];\n          }\n\n          if (typeof target.constructor[WITH_CREDENTIALS][methodName] !== 'undefined') {\n            withCredentials = target.constructor[WITH_CREDENTIALS][methodName];\n          }\n        }\n\n        // > Create request object\n        // _____________________________________________________________________________\n        const request = requestFactory(type as any, `${this[BASE_URL]}/${endpoint}`, { body, headers, withCredentials, params: query });\n\n        // > Run guard process\n        // _____________________________________________________________________________\n        const guardsPromise = startGuardCheck(target, methodName, request, this)\n          .then(result => {\n            if (!result) { throw false; }\n          })\n          .catch(error => {\n            if (error === false) {\n              throw new GuardForbid(request);\n            }\n\n            throw error;\n          });\n\n        // > Handlers\n        // _____________________________________________________________________________\n        const globalHandlers: HandlersOf = (this[INJECTOR].get(REST_HANDLERS)).reduce((prev, next) => [...prev, ...next], []);\n        const clientHandlers: HandlersOf = target.constructor[HANDLERS][CLIENT_HANDLERS];\n        const methodHandlers: HandlersOf = target.constructor[HANDLERS][methodName] || [];\n\n        // > Result\n        // _____________________________________________________________________________\n        return await chainHandlers(\n          [...globalHandlers, ...clientHandlers, ...methodHandlers],\n          this,\n          guardsPromise.then(() => >>this[HTTP_CLIENT].request(request).toPromise())\n        );\n      };\n\n      return descriptor;\n    };\n  };\n}\n\ninterface RequestConfig {\n  headers: HttpHeaders;\n  withCredentials: boolean;\n  params: HttpParams;\n}\n\nfunction requestFactory(\n  method: RequestMethod.POST | RequestMethod.PUT | RequestMethod.PATCH,\n  url: string,\n  config: RequestConfig\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod.GET | RequestMethod.DELETE | RequestMethod.HEAD | RequestMethod.JSONP | RequestMethod.OPTIONS,\n  url: string,\n  config: RequestConfig & { body?: T }\n): HttpRequest;\nfunction requestFactory(\n  method: RequestMethod,\n  url: string,\n  {body, ...rest}: RequestConfig & { body?: T }\n): HttpRequest {\n  switch (method) {\n    case RequestMethod.POST:\n    case RequestMethod.PUT:\n    case RequestMethod.PATCH:\n      return new HttpRequest(method, url, body, rest);\n    default:\n      return new HttpRequest(method, url, rest);\n  }\n}\n\nasync function startGuardCheck(\n  target: ClientConstructor,\n  methodName: string,\n  request: HttpRequest,\n  context: ClientInstance\n): Promise {\n  const allGuards = [...target.constructor[GUARDS][CLIENT_GUARDS], ...(target.constructor[GUARDS][methodName] || [])];\n\n  return await allGuards.reduce((prev, next) => {\n    return prev.then(passed => {\n      let result;\n\n      if (!passed) {\n        throw false;\n      }\n\n      if (typeof next === 'function') {\n        if (next.prototype && 'canSend' in next.prototype) {\n          result = context[INJECTOR].get(next).canSend(request);\n        } else {\n          result = next(request);\n        }\n      } else {\n        result = (context)[next](request);\n      }\n\n      if (result instanceof Observable) {\n        result = result.toPromise();\n      }\n\n      return result;\n    });\n  }, Promise.resolve(true));\n}\n\nfunction chainHandlers(\n  handlers: HandlersOf,\n  context: ClientInstance,\n  source: Promise>\n): Promise {\n  let original: HttpResponse;\n\n  source.then(res => {\n    original = res;\n  }, error => {\n    original = error;\n  });\n\n  return handlers.reduce((prev: PromiseLike, next) => {\n    let handler: Function;\n    let method: 'then' | 'catch';\n\n    if (typeof next === 'string') {\n      method = context[next][ERROR_HANDLER] ? 'catch' : 'then';\n      handler = (context[next]).bind(context);\n    } else if (next.prototype && 'handle' in next.prototype) {\n      const injectable = context[INJECTOR].get(next);\n      method = injectable.handle[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = injectable.handle.bind(injectable);\n    } else {\n      method = next[ERROR_HANDLER] ? 'catch' : 'then';\n      handler = next;\n    }\n\n    return prev[method](res => handler(original, res));\n  }, source);\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RestGuard.html":{"url":"interfaces/RestGuard.html","title":"interface - RestGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RestGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/types.ts\n        \n\n            \n                Description\n            \n            \n                Use to define an injectable as a rest guard\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canSend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canSend\n                        \n                        \n                    \n                \n            \n            \n                \ncanSend(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injector, Type } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nexport const INJECTOR: unique symbol = Symbol('INJECTOR');\nexport const HTTP_CLIENT: unique symbol = Symbol('HTTP_CLIENT');\nexport const BASE_URL: unique symbol = Symbol('BASE_URL');\nexport const GUARDS: unique symbol = Symbol('GUARDS');\nexport const CLIENT_GUARDS: unique symbol = Symbol('CLIENT_GUARDS');\nexport const BODIES: unique symbol = Symbol('BODIES');\nexport const PATHS: unique symbol = Symbol('PATHS');\nexport const QUERIES: unique symbol = Symbol('QUERIES');\nexport const HANDLERS: unique symbol = Symbol('HANDLERS');\nexport const CLIENT_HANDLERS: unique symbol = Symbol('CLIENT_HANDLERS');\nexport const ERROR_HANDLER: unique symbol = Symbol('ERROR_HANDLER');\nexport const PARAM_HEADERS: unique symbol = Symbol('PARAM_HEADERS');\nexport const HEADERS: unique symbol = Symbol('HEADERS');\nexport const CLIENT_HEADERS: unique symbol = Symbol('CLIENT_HEADERS');\nexport const WITH_CREDENTIALS: unique symbol = Symbol('WITH_CREDENTIALS');\nexport const CLIENT_WITH_CREDENTIALS: unique symbol = Symbol('CLIENT_WITH_CREDENTIALS');\nexport const ON_CLIENT_READY: unique symbol = Symbol('ON_CLIENT_READY');\n\n/**\n * Http Request Methods\n */\nexport enum RequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS',\n  JSONP = 'JSONP'\n}\n\n/**\n * Returns specified type of method names of an interface/class\n *\n * @template T Class/Interface type\n * @template U Method type\n */\ntype FunctionsOf = {[P in keyof T]: T[P] extends U ? P : never}[keyof T];\n\n/**\n * Returns a class-function type of an interface/class\n */\ntype ClassOf = new (...args: any[]) => T;\n\n/**\n * Use to define an injectable as a rest guard\n */\nexport interface RestGuard {\n  canSend(request: HttpRequest): boolean | Promise;\n}\nexport type GuardFunction = (request: HttpRequest) => boolean | Promise;\nexport type GuardFunctionsOf = FunctionsOf;\nexport type GuardType = GuardFunctionsOf | GuardFunction | ClassOf;\nexport type Guard = GuardType[] | GuardType;\n\nexport type HandlerFunction = (original: HttpResponse | HttpErrorResponse, current: any) => any | Promise;\nexport type HandlerFunctionsOf = FunctionsOf;\nexport type HandlersOf = Array | HandlerFunction | (new (...args: any[]) => Handler)>;\nexport interface Handler {\n  handle: HandlerFunction;\n}\n\nexport interface HeadersObject {\n  [key: string]: string | string[];\n}\n\ntype HeaderInjectorResponse = HeadersObject | Promise;\n\nexport abstract class HeadersInjector {\n  abstract inject(): HeaderInjectorResponse;\n}\n\nexport type HeaderInjectorType = ClassOf;\nexport type HeadersParam = Array;\nexport type HeadersClientParam = Array HeaderInjectorResponse>>;\n\nexport interface ClientInstance {\n  [INJECTOR]: Injector;\n  [HTTP_CLIENT]: HttpClient;\n  [BASE_URL]: string;\n}\n\nexport interface ClientConstructor extends Object {\n  constructor: {\n    new (...args: any[]): any;\n    [GUARDS]: {\n      [CLIENT_GUARDS]: Array | GuardFunction>;\n      [key: string]: Array | GuardFunction>\n    };\n    [BODIES]: {\n      [key: string]: number;\n    };\n    [PATHS]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [QUERIES]: {\n      [key: string]: {\n        [key: string]: number;\n      };\n    };\n    [HANDLERS]: {\n      [CLIENT_HANDLERS]: HandlersOf;\n      [key: string]: HandlersOf;\n    };\n    [PARAM_HEADERS]: {\n      [key: string]: {\n        [key: string]: [boolean, number];\n      }\n    };\n    [HEADERS]: {\n      [CLIENT_HEADERS]: HeadersClientParam;\n      [key: string]: HeadersClientParam;\n    };\n    [WITH_CREDENTIALS]: {\n      [CLIENT_WITH_CREDENTIALS]: boolean;\n      [key: string]: boolean;\n    };\n    [ON_CLIENT_READY]: string;\n  };\n}\n\nexport interface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n  withCredentials?: boolean;\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(undefined: RootConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in projects/rest/src/lib/rest.module.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                                RootConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootConfiguration.html":{"url":"interfaces/RootConfiguration.html","title":"interface - RootConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RootConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/rest/src/lib/rest.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        baseHeaders\n                                \n                                \n                                            Optional\n                                        baseUrl\n                                \n                                \n                                            Optional\n                                        handlers\n                                \n                                \n                                            Optional\n                                        withCredentials\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHeaders\n                                    \n                                \n                                \n                                    \n                                        baseHeaders:         HeadersParam\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HeadersParam\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handlers\n                                    \n                                \n                                \n                                    \n                                        handlers:         HandlersOf\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HandlersOf\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { BASE_URL, REST_HANDLERS, BASE_HEADERS, BASE_WITH_CREDENTIALS } from './tokens';\nimport { HandlersOf, HeadersParam, HeadersInjector } from './types';\n\ninterface RootConfiguration {\n  baseUrl?: string;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersParam;\n  withCredentials?: boolean;\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {provide: BASE_URL, useValue: ''},\n    {provide: REST_HANDLERS, useValue: [], multi: true},\n    {provide: BASE_HEADERS, useValue: [], multi: true},\n    {provide: BASE_WITH_CREDENTIALS, useValue: true}\n  ],\n  exports: [\n    HttpClientModule\n  ]\n})\nexport class RestModule {\n  public static forRoot({\n    baseUrl = '',\n    handlers = [],\n    baseHeaders = [],\n    withCredentials = true\n  }: RootConfiguration = {} ): ModuleWithProviders {\n    return {\n      ngModule: RestModule,\n      providers: [\n        {provide: BASE_URL, useValue: baseUrl},\n        {provide: REST_HANDLERS, useValue: handlers, multi: true},\n        {provide: BASE_HEADERS, useValue: baseHeaders, multi: true},\n        {provide: BASE_WITH_CREDENTIALS, useValue: withCredentials}\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/rest/src/lib/body.decorator.ts\n            \n            function\n            Body\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/client.decorator.ts\n            \n            function\n            Client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/error-handler.decorator.ts\n            \n            function\n            ErrorHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/guards.decorator.ts\n            \n            function\n            Guards\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/handlers.decorator.ts\n            \n            function\n            Handlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/header.decorator.ts\n            \n            function\n            Header\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/headers.decorator.ts\n            \n            function\n            Headers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/on-client-ready.decorator.ts\n            \n            function\n            OnClientReady\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/path.decorator.ts\n            \n            function\n            Path\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/query.decorator.ts\n            \n            function\n            Query\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            class\n            GuardForbid\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            interface\n            RequestConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            chainHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestBuilder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            requestFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request-builder.ts\n            \n            function\n            startGuardCheck\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Delete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Get\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Head\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Jsonp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Patch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/request.decorator.ts\n            \n            variable\n            Put\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/rest.module.ts\n            \n            interface\n            RootConfiguration\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            BASE_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/tokens.ts\n            \n            variable\n            REST_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            class\n            HeadersInjector\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientConstructor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientInstance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            ClientOptions\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            Handler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            HeadersObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            interface\n            RestGuard\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BASE_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            BODIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            CLIENT_WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ERROR_HANDLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            GUARDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HANDLERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            HTTP_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            INJECTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            ON_CLIENT_READY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PARAM_HEADERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            PATHS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            QUERIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/types.ts\n            \n            variable\n            WITH_CREDENTIALS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/rest/src/lib/with-credentials.decorator.ts\n            \n            function\n            WithCredentials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.2.3\n        \n            @angular/common : ~8.2.3\n        \n            @angular/compiler : ~8.2.3\n        \n            @angular/core : ~8.2.3\n        \n            @angular/forms : ~8.2.3\n        \n            @angular/platform-browser : ~8.2.3\n        \n            @angular/platform-browser-dynamic : ~8.2.3\n        \n            @angular/router : ~8.2.3\n        \n            core-js : ^2.5.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.5.2\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RequestMethod   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RequestMethod\n                    \n                \n                    \n                        \n                            Http Request Methods\n\n                        \n                    \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 JSONP\n                            \n                        \n                        \n                            \n                                Value : JSONP\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Body   (projects/.../body.decorator.ts)\n                        \n                        \n                            chainHandlers   (projects/.../request-builder.ts)\n                        \n                        \n                            Client   (projects/.../client.decorator.ts)\n                        \n                        \n                            ErrorHandler   (projects/.../error-handler.decorator.ts)\n                        \n                        \n                            Guards   (projects/.../guards.decorator.ts)\n                        \n                        \n                            Handlers   (projects/.../handlers.decorator.ts)\n                        \n                        \n                            Header   (projects/.../header.decorator.ts)\n                        \n                        \n                            Headers   (projects/.../headers.decorator.ts)\n                        \n                        \n                            OnClientReady   (projects/.../on-client-ready.decorator.ts)\n                        \n                        \n                            Path   (projects/.../path.decorator.ts)\n                        \n                        \n                            Query   (projects/.../query.decorator.ts)\n                        \n                        \n                            requestBuilder   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            requestFactory   (projects/.../request-builder.ts)\n                        \n                        \n                            startGuardCheck   (projects/.../request-builder.ts)\n                        \n                        \n                            WithCredentials   (projects/.../with-credentials.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/body.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Body\n                        \n                        \n                    \n                \n            \n            \n                \nBody()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ParameterDecorator\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            chainHandlers\n                        \n                        \n                    \n                \n            \n            \n                \nchainHandlers(handlers, context, source)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestBuilder\n                        \n                        \n                    \n                \n            \n            \n                \nrequestBuilder(type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RestPropertyDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrequestFactory(method, url, undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startGuardCheck\n                        \n                        \n                    \n                \n            \n            \n                \nstartGuardCheck(target, methodName, request, context)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    methodName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/client.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Client\n                        \n                        \n                    \n                \n            \n            \n                \nClient(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/error-handler.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            ErrorHandler\n                        \n                        \n                    \n                \n            \n            \n                \nErrorHandler()\n                \n            \n\n\n\n\n        \n    \n    projects/rest/src/lib/guards.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Guards\n                        \n                        \n                    \n                \n            \n            \n                \nGuards(guardFunctions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    guardFunctions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/handlers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Handlers\n                        \n                        \n                    \n                \n            \n            \n                \nHandlers(handlers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/header.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Header\n                        \n                        \n                    \n                \n            \n            \n                \nHeader(name, replace)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replace\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/headers.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Headers\n                        \n                        \n                    \n                \n            \n            \n                \nHeaders(headers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/on-client-ready.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            OnClientReady\n                        \n                        \n                    \n                \n            \n            \n                \nOnClientReady()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                \n            \n        \n    \n    projects/rest/src/lib/path.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Path\n                        \n                        \n                    \n                \n            \n            \n                \nPath(key)\n                \n            \n\n\n\n\n            \n                \n                    A parameter decorated with Path will replace the specified key in the url\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path placeholder key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/query.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Query\n                        \n                        \n                    \n                \n            \n            \n                \nQuery(key)\n                \n            \n\n\n\n\n            \n                \n                    Use this decorator to set a query parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request query name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ParameterDecorator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/rest/src/lib/with-credentials.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            WithCredentials\n                        \n                        \n                    \n                \n            \n            \n                \nWithCredentials(withCredentials)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    withCredentials\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     PropertyDescriptor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n@thalesrc/angular-rest\nAngular Rest Http Module with Typescript Declarative Annotations, Guards, Handlers and more\n\n1. Installation\nyarn add @thalesrc/angular-restor\nnpm install @thalesrc/angular-rest --save\n2. Basic Example\n// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\nimport { TodoClient } from './todo.client';\nimport { TodoComponent } from './todo.component';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({baseUrl: 'http://localhost:3000'})\n  ],\n  providers: [\n    TodoClient\n  ],\n  declarations: [\n    TodoComponent\n  ]\n})\nexport class AppModule {}\n// todo.client.ts\n\nimport { HttpRequest } from '@angular/common/http';\nimport { Client, Get, Post, Body } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public insertTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n// todo.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-todo',\n  template: 'Hello World'\n})\nexport class TodoComponent {\n  constructor(private client: TodoClient) {\n    this.client.todos().then(todos => {\n      // Make something with todos\n    });\n  }\n\n  async postTodo(todo: Todo): Promise {\n    return await this.client.insertTodo(todo);\n  }\n}\n\n3. API Docs\n\n3.1. Client Decorator\n@Client() decorator marks a class as RestClient and provides functionality to make Http calls with its marked methods.\nThis decorator also marks the class as Injectable() and makes it to function as an Angular Service.\nIt can be configured by defining a ClientOptions object as a parameter\n3.1.1. ClientOptions\nA ClientOptions object configures base options for the rest methods declared inside a @Client() class\ninterface ClientOptions {\n  baseUrl?: string;\n  guards?: Guard;\n  handlers?: HandlersOf;\n  baseHeaders?: HeadersClientParam;\n  providedIn?: Type | 'root';\n}@Client({\n  baseUrl: 'http://localhost:3000',\n  baseHeaders: [{'Secret-Key': 'The best rest util is @thalesrc/angular-rest'}]\n  ...\n})\nexport class TodoClient {\n  ...\n}\n3.2. Request Method Decorators\nAll of these decorators marks a method in a @Client() as a request builder. path can be specified to define the endpoint path. Otherwise, the method name is going to be used as path.\nThe method return type should be defined as Promise and function should be empty but only returning null. Decorators will handle all the rest.\n\n@Get(path?: string)\n@Post(path?: string)\n@Put(path?: string)\n@Delete(path?: string)\n@Patch(path?: string)\n@Options(path?: string)\n@Head(path?: string)\n@Jsonp(path?: string)\n\nExample:\n@Client()\nexport class TodoClient {\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n}\n3.3. Body Parameter Decorator\nMark a parameter with @Body() decorator to fill body object with it.\nA FormData instance can be used for image uploads etc.\nBody decorator can be used in only POST, PUT, PATCH requests\nExample:\n@Client()\nexport class TodoClient {\n  @Post('todos')\n  public postTodo(@Body() todo: Todo): Promise {\n    return null;\n  }\n\n  @Post('image')\n  public uploadImage(@Body() data: FormData): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo): Promise {\n    return await this.client.postTodo(todo);\n  }\n\n  public async uploadImage(image: Blob): Promise {\n    const data = new FormData();\n    data.append('image', image);\n\n    return await this.client.uploadImage(data);\n  }\n}\n3.3. Path Parameter Decorator\nMark a parameter decorated with Path to replace the specified key in the url\nExample:\n@Client()\nexport class TodoClient {\n  @Patch('todos/:id')\n  public patchTodo(@Body() todo: Todo, @Path('id') id: string): Promise {\n    return null;\n  }\n}\n\n@Component({\n  ...\n})\nexport class AComponent {\n  constructor(private client: TodoClient) {}\n\n  public async postTodo(todo: Todo, todoId: string): Promise {\n    return await this.client.patchTodo(todo, todoId);\n  }\n}\n3.4. Query Parameter Decorator\nto be determined\n\n3.5. Headers\nTo be determined\n3.5.1. Header Declaration Methods\nTo be determined\n3.5.1.1 HeaderInjector\nTo be determined\n3.5.1.2 HeadersObject\nTo be determined\n3.5.1.3 Headers as Client Method\nTo be determined\n3.5.2. Base Headers\nTo be determined\n3.5.3. Client Headers\nTo be determined\n3.5.4. Parameter Headers\nTo be determined\n\n3.6. Guards\nGuards run just before a request has been sent to check whether request should be sent or not\n3.6.1. Guard Declaration Methods\nGuards can be a function, a method of a client or an injectable of RestGuard\n3.6.1.1 RestGuard\nDefine an injectable as a rest guard and declare them as a guard (Base Guard, Client Guard, Method Guard) to check a request can be sent or not.\nDon't forget to provide them in a module\nExample:\n@Injectable()\nexport class PostTodoGuard implements RestGuard {\n constructor(private session: SessionService) {}\n\n async canSend(req: HttpRequest): Promise {\n   return await this.session.loggedIn$.pipe(first()).toPromise()\n }\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([PostTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}\n\n@NgModule({\n providers: [\n   TodoClient,\n   PostTodoGuard\n ]\n})\nexport class TodoModule {}3.6.1.2. Guard Function\nA single function can be a rest guard if it accepts first param as HttpRequest and returns whether boolean or Promise\nExample:\nfunction postTodoGuard(req: HttpRequest): boolean {\n  return req.body.canBeSent;\n}\n\n@Client()\nexport class TodoClient {\n @Post('todos')\n @Guards([postTodoGuard])\n public async postTodos(todo: Todo): Promise {\n   return null;\n }\n}3.6.1.3. Guard Method\nTo be determined\n3.6.2. Base Guards\nTo be determined\n3.6.3. Client Guards\nTo be determined\n3.6.4. Method Guards\nTo be determined\n\n3.7. Handlers\nTo be determined\n3.7.1 ErrorHandlers\nTo be determined\n3.7.2 Handler Declaration Methods\nTo be determined\n3.7.2.1 Handler\nTo be determined\n3.7.2.2 Handler Function\nTo be determined\n3.7.2.3 Handler Method\nTo be determined\n3.7.3 Base Handlers\nTo be determined\n3.7.4 Client Handlers\nTo be determined\n3.7.5 Method Handlers\nTo be determined\n\n3.8. RestModule\nTo be determined\n\n3.9. OnClientReady Decorator\nIn client constructor functions, calling a rest call is forbidden. Because the client dependencies have not been set yet when the constructor function called.\nTo run some code when client instance created, @OnClientReady() decorator can be used. It will mark a method of a client to be called right after construction.\nExample:\nimport { Client, OnClientReady } from '@thalesrc/angular-rest';\nimport { TodoCacheService } from './todo-cache.service';\n\n@Client()\nexport class TodoClient {\n  constructor(\n    private todoCacheService: TodoCacheService\n  ) {}\n\n  @OnClientReady()\n  private onReady() {\n    const todos = await this.todos();\n\n    this.todoCacheService.cacheTodos(todos);\n  }\n\n  @Get()\n  public todos(): Promise {\n    return null;\n  }\n}\n3.10. WithCredentials Option\nDefines whether a request should be sent with outgoing credentials (cookies). Default true\n3.10.1. As Module Config\nIt can be set in module config as base option. That would configure for all requests unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule.forRoot({withCredentials: false})\n    ...\n  ],\n})\nexport class AppModule {}3.10.2. As Provider\nIt can be provided with the BASE_WITH_CREDENTIALS token as base option. That would also configure for all requests like As Module Config unless it is declared especially by other methods.\nExample:\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_WITH_CREDENTIALS } from '@thalesrc/angular-rest';\n\n@NgModule({\n  imports: [\n    RestModule\n    ...\n  ],\n  providers: [\n    {provide: BASE_WITH_CREDENTIALS, useValue: false},\n    ...\n  ]\n})\nexport class AppModule {}3.10.3. As Client Config\nIt can be set in @Client() decorator as an option. That would configure withCredentials option for all the calls in that client.\nExample:\nimport { Client } from '@thalesrc/angular-rest';\n\n@Client({\n  withCredentials: true\n})\nexport class TodoClient {\n  ...\n}3.10.4. WithCredentials Decorator\nIt can be set by @WithCredentials() decorator on top a rest call. That would configure withCredentials option for only that call.\nExample:\nimport { Client, WithCredentials } from '@thalesrc/angular-rest';\n\n@Client()\nexport class TodoClient {\n  @Get()\n  @WithCredentials(true)\n  public todos(): Promise {\n    return null;\n  }\n}3.10.5. WithCredentialsParam Decorator\nto be developed\n\n4. Aot Limitations\nThis package supports aot builds, however there are some limitations.\n\nThe Injector should have been defined as the first parameter for every @Client constructor.\n\nimport { Injector } from '@angular/core';\n\n@Client()\nexport class TodoClient {\n  constructor(injector: Injector, otherServices: Etc) {\n\n  }\n}\nBase handlers and base headers shouldn't be defined in RestModule.forRoot static method. All of these should be provided in module providers\n\nimport { NgModule } from '@angular/core';\nimport { RestModule, BASE_HEADERS, BASE_HANDLERS } from '@thalesrc/angular-rest';\n\nimport { BaseHeaders, BaseHandler } from './services';\n\n@NgModule({\n  imports: [RestModule],\n  providers: [\n    BaseHeaders,\n    BaseHandler,\n    {provide: BASE_HEADERS, useValue: [BaseHeaders, {'Secret-Key': 'topsecret'}], multi: true},\n    {provide: BASE_HANDLERS, useValue: [BaseHandler], multi: true},\n  ]\n})\nexport class AppModule {}\n5. Contributors\nAli Şahin Özçelik\nThis repository is started as a fork of steven166/angular-rest-client and completely refactored now\n\n6. License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Thalesrc\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClassOf   (projects/.../types.ts)\n                        \n                        \n                            FunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            Guard   (projects/.../types.ts)\n                        \n                        \n                            GuardFunction   (projects/.../types.ts)\n                        \n                        \n                            GuardFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            GuardType   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunction   (projects/.../types.ts)\n                        \n                        \n                            HandlerFunctionsOf   (projects/.../types.ts)\n                        \n                        \n                            HandlersOf   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorResponse   (projects/.../types.ts)\n                        \n                        \n                            HeaderInjectorType   (projects/.../types.ts)\n                        \n                        \n                            HeadersClientParam   (projects/.../types.ts)\n                        \n                        \n                            HeadersParam   (projects/.../types.ts)\n                        \n                        \n                            RestPropertyDecorator   (projects/.../request-builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    ClassOf\n                \n            \n            \n                \n                    Returns a class-function type of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FunctionsOf\n                \n            \n            \n                \n                    Returns specified type of method names of an interface/class\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Guard\n                \n            \n            \n                \n                        GuardType[] | GuardType\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardFunctionsOf\n                \n            \n            \n                \n                        FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GuardType\n                \n            \n            \n                \n                            GuardFunctionsOf | GuardFunction | ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlerFunctionsOf\n                \n            \n            \n                \n                            FunctionsOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HandlersOf\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorResponse\n                \n            \n            \n                \n                            HeadersObject | Promise\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderInjectorType\n                \n            \n            \n                \n                            ClassOf\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersClientParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersParam\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    projects/rest/src/lib/request-builder.ts\n    \n    \n        \n            \n                \n                    \n                    RestPropertyDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_HEADERS   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_URL   (projects/.../types.ts)\n                        \n                        \n                            BASE_URL   (projects/.../tokens.ts)\n                        \n                        \n                            BASE_WITH_CREDENTIALS   (projects/.../tokens.ts)\n                        \n                        \n                            BODIES   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_GUARDS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            CLIENT_WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                        \n                            Delete   (projects/.../request.decorator.ts)\n                        \n                        \n                            ERROR_HANDLER   (projects/.../types.ts)\n                        \n                        \n                            Get   (projects/.../request.decorator.ts)\n                        \n                        \n                            GUARDS   (projects/.../types.ts)\n                        \n                        \n                            HANDLERS   (projects/.../types.ts)\n                        \n                        \n                            Head   (projects/.../request.decorator.ts)\n                        \n                        \n                            HEADERS   (projects/.../types.ts)\n                        \n                        \n                            HTTP_CLIENT   (projects/.../types.ts)\n                        \n                        \n                            INJECTOR   (projects/.../types.ts)\n                        \n                        \n                            Jsonp   (projects/.../request.decorator.ts)\n                        \n                        \n                            ON_CLIENT_READY   (projects/.../types.ts)\n                        \n                        \n                            Options   (projects/.../request.decorator.ts)\n                        \n                        \n                            PARAM_HEADERS   (projects/.../types.ts)\n                        \n                        \n                            Patch   (projects/.../request.decorator.ts)\n                        \n                        \n                            PATHS   (projects/.../types.ts)\n                        \n                        \n                            Post   (projects/.../request.decorator.ts)\n                        \n                        \n                            Put   (projects/.../request.decorator.ts)\n                        \n                        \n                            QUERIES   (projects/.../types.ts)\n                        \n                        \n                            REST_HANDLERS   (projects/.../tokens.ts)\n                        \n                        \n                            WITH_CREDENTIALS   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/rest/src/lib/tokens.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('BASE_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REST_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('REST_HANDLERS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_URL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BASE_URL')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            BODIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('BODIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CLIENT_WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('CLIENT_WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_HANDLER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ERROR_HANDLER')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GUARDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('GUARDS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HANDLERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HANDLERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HTTP_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('HTTP_CLIENT')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INJECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('INJECTOR')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ON_CLIENT_READY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('ON_CLIENT_READY')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PARAM_HEADERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PARAM_HEADERS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PATHS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('PATHS')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            QUERIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('QUERIES')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WITH_CREDENTIALS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     symbol\n\n                        \n                    \n                    \n                        \n                            Default value : Symbol('WITH_CREDENTIALS')\n                        \n                    \n\n\n            \n        \n\n    projects/rest/src/lib/request.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Delete\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.DELETE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.GET)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Head\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.HEAD)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Jsonp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.JSONP)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Options\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.OPTIONS)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PATCH)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Post\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.POST)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : requestBuilder(RequestMethod.PUT)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
